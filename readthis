using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Dissonance;
using Steamworks;
using TMPro;
using Unity.Netcode;
using UnityEngine;
using UnityEngine.Animations.Rigging;
using UnityEngine.InputSystem;
using UnityEngine.Rendering;
using UnityEngine.Rendering.HighDefinition;
using UnityEngine.UI;

namespace GameNetcodeStuff
{
	// Token: 0x02000199 RID: 409
	public class PlayerControllerB : NetworkBehaviour, IHittable, IShockableWithGun, IVisibleThreat
	{
		// Token: 0x17000137 RID: 311
		// (get) Token: 0x06000F88 RID: 3976 RVA: 0x00011417 File Offset: 0x0000F617
		ThreatType IVisibleThreat.type
		{
			get
			{
				return ThreatType.Player;
			}
		}

		// Token: 0x06000F89 RID: 3977 RVA: 0x00081E7C File Offset: 0x0008007C
		float IVisibleThreat.GetVisibility()
		{
			if (this.isPlayerDead)
			{
				return 0f;
			}
			float num = 1f;
			if (this.isCrouching)
			{
				num -= 0.25f;
			}
			if (this.timeSincePlayerMoving > 0.5f)
			{
				num -= 0.16f;
			}
			return num;
		}

		// Token: 0x06000F8A RID: 3978 RVA: 0x00081EC4 File Offset: 0x000800C4
		int IVisibleThreat.GetThreatLevel(Vector3 seenByPosition)
		{
			int num = 0;
			if (this.isHoldingObject && this.currentlyHeldObjectServer != null && this.currentlyHeldObjectServer.itemProperties.isDefensiveWeapon)
			{
				num += 2;
			}
			if (this.timeSinceMakingLoudNoise < 0.8f)
			{
				num++;
			}
			float num2 = this.LineOfSightToPositionAngle(seenByPosition, 60, -1f);
			Debug.Log(string.Format("angle: {0}", num2));
			if (num2 == -361f || num2 > 100f)
			{
				num--;
				Debug.Log("Subtracting threat level cause player is looking away");
			}
			else if (num2 < 45f)
			{
				num++;
				Debug.Log("Adding threat level cause player is looking at us");
			}
			if (TimeOfDay.Instance.normalizedTimeOfDay < 0.2f)
			{
				num++;
			}
			else if (TimeOfDay.Instance.normalizedTimeOfDay > 0.8f)
			{
				num--;
			}
			if (this.isInHangarShipRoom)
			{
				num++;
			}
			else if (Vector3.Distance(base.transform.position, StartOfRound.Instance.elevatorTransform.position) > 30f)
			{
				num--;
			}
			int num3 = Physics.OverlapSphereNonAlloc(base.transform.position, 12f, this.nearByPlayers, StartOfRound.Instance.playersMask);
			for (int i = 0; i < num3; i++)
			{
				if (Vector3.Distance(base.transform.position, this.nearByPlayers[i].transform.position) <= 6f || !Physics.Linecast(this.gameplayCamera.transform.position, this.nearByPlayers[i].transform.position + Vector3.up * 0.6f, StartOfRound.Instance.collidersAndRoomMaskAndDefault, QueryTriggerInteraction.Ignore))
				{
					num++;
				}
			}
			if (this.health >= 30)
			{
				num++;
			}
			else if (this.criticallyInjured)
			{
				num -= 2;
			}
			if (StartOfRound.Instance.connectedPlayersAmount <= 0)
			{
				num++;
			}
			return num;
		}

		// Token: 0x06000F8B RID: 3979 RVA: 0x000820A4 File Offset: 0x000802A4
		Vector3 IVisibleThreat.GetThreatVelocity()
		{
			if (base.IsOwner)
			{
				return Vector3.Normalize(this.thisController.velocity * 100f);
			}
			if (this.timeSincePlayerMoving < 0.25f)
			{
				return Vector3.Normalize((this.serverPlayerPosition - this.oldPlayerPosition) * 100f);
			}
			return Vector3.zero;
		}

		// Token: 0x06000F8C RID: 3980 RVA: 0x00082108 File Offset: 0x00080308
		int IVisibleThreat.GetInterestLevel()
		{
			int num = 0;
			if (this.currentlyHeldObjectServer != null && this.currentlyHeldObjectServer.itemProperties.isScrap)
			{
				num++;
			}
			if (this.carryWeight > 1.22f)
			{
				num++;
			}
			if (this.carryWeight > 1.5f)
			{
				num++;
			}
			return num;
		}

		// Token: 0x06000F8D RID: 3981 RVA: 0x0008215E File Offset: 0x0008035E
		Transform IVisibleThreat.GetThreatLookTransform()
		{
			return this.gameplayCamera.transform;
		}

		// Token: 0x06000F8E RID: 3982 RVA: 0x00011427 File Offset: 0x0000F627
		Transform IVisibleThreat.GetThreatTransform()
		{
			return base.transform;
		}

		// Token: 0x06000F8F RID: 3983 RVA: 0x0008216C File Offset: 0x0008036C
		private void Awake()
		{
			this.isHostPlayerObject = (base.gameObject == this.playersManager.allPlayerObjects[0]);
			this.playerActions = new PlayerActions();
			this.previousAnimationState = 0;
			this.serverPlayerPosition = base.transform.position;
			this.gameplayCamera.enabled = false;
			this.visorCamera.enabled = false;
			this.thisPlayerModel.enabled = true;
			this.thisPlayerModel.shadowCastingMode = ShadowCastingMode.On;
			this.thisPlayerModelArms.enabled = false;
			this.gameplayCamera.enabled = false;
			this.previousAnimationStateHash = new List<int>(new int[this.playerBodyAnimator.layerCount]);
			this.currentAnimationStateHash = new List<int>(new int[this.playerBodyAnimator.layerCount]);
			if (this.playerBodyAnimator.runtimeAnimatorController != this.playersManager.otherClientsAnimatorController)
			{
				this.playerBodyAnimator.runtimeAnimatorController = this.playersManager.otherClientsAnimatorController;
			}
			this.isCameraDisabled = true;
			this.sprintMeter = 1f;
			this.ItemSlots = new GrabbableObject[4];
			this.rightArmProceduralTargetBasePosition = this.rightArmProceduralTarget.localPosition;
			this.playerUsername = string.Format("Player #{0}", this.playerClientId);
			this.previousElevatorPosition = this.playersManager.elevatorTransform.position;
			if (base.gameObject.GetComponent<Rigidbody>())
			{
				base.gameObject.GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;
			}
			base.gameObject.GetComponent<CharacterController>().enabled = false;
			this.syncFullRotation = base.transform.eulerAngles;
		}

		// Token: 0x06000F90 RID: 3984 RVA: 0x00082310 File Offset: 0x00080510
		private void Start()
		{
			this.InstantiateBloodPooledObjects();
			base.StartCoroutine(this.PlayIntroTip());
			this.jetpackTurnCompass.SetParent(null);
			this.terminalScrollVertical.value += 500f;
		}

		// Token: 0x06000F91 RID: 3985 RVA: 0x00082348 File Offset: 0x00080548
		private IEnumerator PlayIntroTip()
		{
			yield return new WaitForSeconds(4f);
			QuickMenuManager quickMenu = Object.FindObjectOfType<QuickMenuManager>();
			yield return new WaitUntil(() => !quickMenu.isMenuOpen);
			HUDManager.Instance.DisplayTip("Welcome!", "Right-click to scan objects in the ship for info.", false, true, "LC_IntroTip1");
			yield break;
		}

		// Token: 0x06000F92 RID: 3986 RVA: 0x00082350 File Offset: 0x00080550
		private void InstantiateBloodPooledObjects()
		{
			int num = 50;
			for (int i = 0; i < num; i++)
			{
				GameObject gameObject = Object.Instantiate<GameObject>(this.playersManager.playerBloodPrefab, this.playersManager.bloodObjectsContainer);
				gameObject.SetActive(false);
				this.playerBloodPooledObjects.Add(gameObject);
			}
		}

		// Token: 0x06000F93 RID: 3987 RVA: 0x0008239C File Offset: 0x0008059C
		public void ResetPlayerBloodObjects(bool resetBodyBlood = true)
		{
			if (this.playerBloodPooledObjects != null)
			{
				for (int i = 0; i < this.playerBloodPooledObjects.Count; i++)
				{
					this.playerBloodPooledObjects[i].SetActive(false);
				}
			}
			if (resetBodyBlood)
			{
				for (int j = 0; j < this.bodyBloodDecals.Length; j++)
				{
					this.bodyBloodDecals[j].SetActive(false);
				}
			}
		}

		// Token: 0x06000F94 RID: 3988 RVA: 0x00082400 File Offset: 0x00080600
		private void OnEnable()
		{
			InputActionAsset actions = IngamePlayerSettings.Instance.playerInput.actions;
			try
			{
				this.playerActions.Movement.Look.performed += this.Look_performed;
				actions.FindAction("Jump", false).performed += this.Jump_performed;
				actions.FindAction("Crouch", false).performed += this.Crouch_performed;
				actions.FindAction("Interact", false).performed += this.Interact_performed;
				actions.FindAction("ItemSecondaryUse", false).performed += this.ItemSecondaryUse_performed;
				actions.FindAction("ItemTertiaryUse", false).performed += this.ItemTertiaryUse_performed;
				actions.FindAction("ActivateItem", false).performed += this.ActivateItem_performed;
				actions.FindAction("ActivateItem", false).canceled += this.ActivateItem_canceled;
				actions.FindAction("Discard", false).performed += this.Discard_performed;
				actions.FindAction("SwitchItem", false).performed += this.ScrollMouse_performed;
				actions.FindAction("OpenMenu", false).performed += this.OpenMenu_performed;
				actions.FindAction("InspectItem", false).performed += this.InspectItem_performed;
				actions.FindAction("SpeedCheat", false).performed += this.SpeedCheat_performed;
				actions.FindAction("Emote1", false).performed += this.Emote1_performed;
				actions.FindAction("Emote2", false).performed += this.Emote2_performed;
				this.playerActions.Movement.Enable();
			}
			catch (Exception arg)
			{
				Debug.LogError(string.Format("Error while subscribing to input in PlayerController!: {0}", arg));
			}
			this.playerActions.Movement.Enable();
		}

		// Token: 0x06000F95 RID: 3989 RVA: 0x00082630 File Offset: 0x00080830
		private void OnDisable()
		{
			InputActionAsset actions = IngamePlayerSettings.Instance.playerInput.actions;
			try
			{
				this.playerActions.Movement.Look.performed -= this.Look_performed;
				actions.FindAction("Jump", false).performed -= this.Jump_performed;
				actions.FindAction("Crouch", false).performed -= this.Crouch_performed;
				actions.FindAction("Interact", false).performed -= this.Interact_performed;
				actions.FindAction("ItemSecondaryUse", false).performed -= this.ItemSecondaryUse_performed;
				actions.FindAction("ItemTertiaryUse", false).performed -= this.ItemTertiaryUse_performed;
				actions.FindAction("ActivateItem", false).performed -= this.ActivateItem_performed;
				actions.FindAction("ActivateItem", false).canceled -= this.ActivateItem_canceled;
				actions.FindAction("Discard", false).performed -= this.Discard_performed;
				actions.FindAction("SwitchItem", false).performed -= this.ScrollMouse_performed;
				actions.FindAction("OpenMenu", false).performed -= this.OpenMenu_performed;
				actions.FindAction("InspectItem", false).performed -= this.InspectItem_performed;
				actions.FindAction("SpeedCheat", false).performed -= this.SpeedCheat_performed;
				actions.FindAction("Emote1", false).performed -= this.Emote1_performed;
				actions.FindAction("Emote2", false).performed -= this.Emote2_performed;
				this.playerActions.Movement.Enable();
			}
			catch (Exception arg)
			{
				Debug.LogError(string.Format("Error while unsubscribing from input in PlayerController!: {0}", arg));
			}
			this.playerActions.Movement.Disable();
		}

		// Token: 0x06000F96 RID: 3990 RVA: 0x00055184 File Offset: 0x00053384
		public override void OnDestroy()
		{
			base.OnDestroy();
		}

		// Token: 0x06000F97 RID: 3991 RVA: 0x00082860 File Offset: 0x00080A60
		private void SpeedCheat_performed(InputAction.CallbackContext context)
		{
			if ((!base.IsOwner || (!this.isPlayerControlled && !this.isPlayerDead) || this.inTerminalMenu || this.isTypingChat || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if (HUDManager.Instance == null)
			{
				return;
			}
			if (IngamePlayerSettings.Instance.playerInput.actions.FindAction("Sprint", false).ReadValue<float>() > 0.5f)
			{
				HUDManager.Instance.ToggleErrorConsole();
			}
		}

		// Token: 0x06000F98 RID: 3992 RVA: 0x000828F8 File Offset: 0x00080AF8
		public bool AllowPlayerDeath()
		{
			if (!StartOfRound.Instance.allowLocalPlayerDeath)
			{
				return false;
			}
			if (this.playersManager.testRoom == null)
			{
				if (StartOfRound.Instance.timeSinceRoundStarted < 2f)
				{
					return false;
				}
				if (!this.playersManager.shipDoorsEnabled)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x06000F99 RID: 3993 RVA: 0x0008294C File Offset: 0x00080B4C
		public void DamagePlayer(int damageNumber, bool hasDamageSFX = true, bool callRPC = true, CauseOfDeath causeOfDeath = CauseOfDeath.Unknown, int deathAnimation = 0, bool fallDamage = false, Vector3 force = default(Vector3))
		{
			if (!base.IsOwner)
			{
				return;
			}
			if (this.isPlayerDead)
			{
				return;
			}
			if (!this.AllowPlayerDeath())
			{
				return;
			}
			if (this.health - damageNumber <= 0 && !this.criticallyInjured && damageNumber < 50)
			{
				this.health = 5;
			}
			else
			{
				this.health = Mathf.Clamp(this.health - damageNumber, 0, 100);
			}
			Debug.Log(string.Format("player's health after taking {0} damage: {1}", damageNumber, this.health));
			HUDManager.Instance.UpdateHealthUI(this.health, true);
			if (this.health <= 0)
			{
				this.KillPlayer(force, true, causeOfDeath, deathAnimation);
			}
			else
			{
				if (this.health < 10 && !this.criticallyInjured)
				{
					HUDManager.Instance.ShakeCamera(ScreenShakeType.Big);
					this.MakeCriticallyInjured(true);
				}
				else
				{
					if (damageNumber > 30)
					{
						this.sprintMeter = Mathf.Clamp(this.sprintMeter + (float)damageNumber / 125f, 0f, 1f);
					}
					if (callRPC)
					{
						if (base.IsServer)
						{
							this.DamagePlayerClientRpc(damageNumber, this.health);
						}
						else
						{
							this.DamagePlayerServerRpc(damageNumber, this.health);
						}
					}
				}
				if (fallDamage)
				{
					HUDManager.Instance.UIAudio.PlayOneShot(StartOfRound.Instance.fallDamageSFX, 1f);
					WalkieTalkie.TransmitOneShotAudio(this.movementAudio, StartOfRound.Instance.fallDamageSFX, 1f);
					this.BreakLegsSFXClientRpc();
				}
				else if (hasDamageSFX)
				{
					HUDManager.Instance.UIAudio.PlayOneShot(StartOfRound.Instance.damageSFX, 1f);
				}
			}
			this.takingFallDamage = false;
			if (!this.inSpecialInteractAnimation)
			{
				this.playerBodyAnimator.SetTrigger("Damage");
			}
			this.specialAnimationWeight = 1f;
			this.PlayQuickSpecialAnimation(0.7f);
		}

		// Token: 0x06000F9A RID: 3994 RVA: 0x00082B08 File Offset: 0x00080D08
		[ServerRpc]
		public void BreakLegsSFXServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(800455552U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 800455552U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.BreakLegsSFXClientRpc();
		}

		// Token: 0x06000F9B RID: 3995 RVA: 0x00082C1C File Offset: 0x00080E1C
		[ClientRpc]
		public void BreakLegsSFXClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(3591743514U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 3591743514U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.movementAudio.PlayOneShot(StartOfRound.Instance.fallDamageSFX, 1f);
			WalkieTalkie.TransmitOneShotAudio(this.movementAudio, StartOfRound.Instance.fallDamageSFX, 1f);
		}

		// Token: 0x06000F9C RID: 3996 RVA: 0x00082D24 File Offset: 0x00080F24
		public void MakeCriticallyInjured(bool enable)
		{
			if (enable)
			{
				this.criticallyInjured = true;
				this.playerBodyAnimator.SetBool("Limp", true);
				this.bleedingHeavily = true;
				if (base.IsServer)
				{
					this.MakeCriticallyInjuredClientRpc();
					return;
				}
				this.MakeCriticallyInjuredServerRpc();
				return;
			}
			else
			{
				this.criticallyInjured = false;
				this.playerBodyAnimator.SetBool("Limp", false);
				this.bleedingHeavily = false;
				if (base.IsServer)
				{
					this.HealClientRpc();
					return;
				}
				this.HealServerRpc();
				return;
			}
		}

		// Token: 0x06000F9D RID: 3997 RVA: 0x00082DA0 File Offset: 0x00080FA0
		[ServerRpc]
		public void DamagePlayerServerRpc(int damageNumber, int newHealthAmount)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(1084949295U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, damageNumber);
				BytePacker.WriteValueBitPacked(writer, newHealthAmount);
				base.__endSendServerRpc(ref writer, 1084949295U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.DamagePlayerClientRpc(damageNumber, newHealthAmount);
		}

		// Token: 0x06000F9E RID: 3998 RVA: 0x00082ED0 File Offset: 0x000810D0
		[ClientRpc]
		public void DamagePlayerClientRpc(int damageNumber, int newHealthAmount)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(1822320450U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, damageNumber);
				BytePacker.WriteValueBitPacked(writer, newHealthAmount);
				base.__endSendClientRpc(ref writer, 1822320450U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.DamageOnOtherClients(damageNumber, newHealthAmount);
		}

		// Token: 0x06000F9F RID: 3999 RVA: 0x00082FBC File Offset: 0x000811BC
		private void DamageOnOtherClients(int damageNumber, int newHealthAmount)
		{
			this.playersManager.gameStats.allPlayerStats[(int)(checked((IntPtr)this.playerClientId))].damageTaken += damageNumber;
			this.health = newHealthAmount;
			if (base.IsOwner)
			{
				return;
			}
			this.PlayQuickSpecialAnimation(0.7f);
		}

		// Token: 0x06000FA0 RID: 4000 RVA: 0x00083009 File Offset: 0x00081209
		public void PlayQuickSpecialAnimation(float animTime)
		{
			if (this.quickSpecialAnimationCoroutine != null)
			{
				base.StopCoroutine(this.quickSpecialAnimationCoroutine);
			}
			this.quickSpecialAnimationCoroutine = base.StartCoroutine(this.playQuickSpecialAnimation(animTime));
		}

		// Token: 0x06000FA1 RID: 4001 RVA: 0x00083032 File Offset: 0x00081232
		private IEnumerator playQuickSpecialAnimation(float animTime)
		{
			this.playingQuickSpecialAnimation = true;
			yield return new WaitForSeconds(animTime);
			this.playingQuickSpecialAnimation = false;
			yield break;
		}

		// Token: 0x06000FA2 RID: 4002 RVA: 0x00083048 File Offset: 0x00081248
		[ServerRpc]
		public void StartSinkingServerRpc(float sinkingSpeed, int audioClipIndex)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(3986869491U, serverRpcParams, RpcDelivery.Reliable);
				writer.WriteValueSafe<float>(sinkingSpeed, default(FastBufferWriter.ForPrimitives));
				BytePacker.WriteValueBitPacked(writer, audioClipIndex);
				base.__endSendServerRpc(ref writer, 3986869491U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.StartSinkingClientRpc(sinkingSpeed, audioClipIndex);
		}

		// Token: 0x06000FA3 RID: 4003 RVA: 0x00083188 File Offset: 0x00081388
		[ClientRpc]
		public void StartSinkingClientRpc(float sinkingSpeed, int audioClipIndex)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(1090586009U, clientRpcParams, RpcDelivery.Reliable);
				writer.WriteValueSafe<float>(sinkingSpeed, default(FastBufferWriter.ForPrimitives));
				BytePacker.WriteValueBitPacked(writer, audioClipIndex);
				base.__endSendClientRpc(ref writer, 1090586009U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.sinkingSpeedMultiplier = sinkingSpeed;
			this.isSinking = true;
			this.statusEffectAudio.clip = StartOfRound.Instance.statusEffectClips[audioClipIndex];
			this.statusEffectAudio.Play();
		}

		// Token: 0x06000FA4 RID: 4004 RVA: 0x000832A8 File Offset: 0x000814A8
		[ServerRpc]
		public void StopSinkingServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(341877959U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 341877959U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.StopSinkingClientRpc();
		}

		// Token: 0x06000FA5 RID: 4005 RVA: 0x000833BC File Offset: 0x000815BC
		[ClientRpc]
		public void StopSinkingClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2005250174U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 2005250174U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.statusEffectAudio.Stop();
			this.isSinking = false;
			this.voiceMuffledByEnemy = false;
			if (!base.IsOwner)
			{
				if (this.currentVoiceChatIngameSettings == null)
				{
					StartOfRound.Instance.RefreshPlayerVoicePlaybackObjects();
				}
				if (this.currentVoiceChatIngameSettings != null)
				{
					this.currentVoiceChatIngameSettings.voiceAudio.GetComponent<OccludeAudio>().overridingLowPass = false;
				}
			}
		}

		// Token: 0x06000FA6 RID: 4006 RVA: 0x000834E4 File Offset: 0x000816E4
		[ServerRpc]
		public void MakeCriticallyInjuredServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(4195705835U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 4195705835U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.MakeCriticallyInjuredClientRpc();
		}

		// Token: 0x06000FA7 RID: 4007 RVA: 0x000835F8 File Offset: 0x000817F8
		[ClientRpc]
		public void MakeCriticallyInjuredClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(3390857164U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 3390857164U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.bleedingHeavily = true;
			this.criticallyInjured = true;
			this.hasBeenCriticallyInjured = true;
		}

		// Token: 0x06000FA8 RID: 4008 RVA: 0x000836D8 File Offset: 0x000818D8
		[ServerRpc]
		public void HealServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(2585603452U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 2585603452U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.HealClientRpc();
		}

		// Token: 0x06000FA9 RID: 4009 RVA: 0x000837EC File Offset: 0x000819EC
		[ClientRpc]
		public void HealClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2196003333U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 2196003333U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.bleedingHeavily = false;
			this.criticallyInjured = false;
		}

		// Token: 0x06000FAA RID: 4010 RVA: 0x000838CC File Offset: 0x00081ACC
		public void DropBlood(Vector3 direction = default(Vector3), bool leaveBlood = true, bool leaveFootprint = false)
		{
			bool flag = false;
			if (leaveBlood)
			{
				if (this.bloodDropTimer >= 0f && !this.isPlayerDead)
				{
					return;
				}
				this.bloodDropTimer = 0.4f;
				if (direction == Vector3.zero)
				{
					direction = Vector3.down;
				}
				Transform transform = this.playerBloodPooledObjects[this.currentBloodIndex].transform;
				transform.rotation = Quaternion.LookRotation(direction, Vector3.up);
				if (this.isInElevator)
				{
					transform.SetParent(this.playersManager.elevatorTransform);
				}
				else
				{
					transform.SetParent(this.playersManager.bloodObjectsContainer);
				}
				if (this.isPlayerDead)
				{
					if (this.deadBody == null || !this.deadBody.gameObject.activeSelf)
					{
						return;
					}
					this.interactRay = new Ray(this.deadBody.bodyParts[3].transform.position + Vector3.up * 0.5f, direction);
				}
				else
				{
					this.interactRay = new Ray(base.transform.position + base.transform.up * 2f, direction);
				}
				if (Physics.Raycast(this.interactRay, out this.hit, 6f, this.playersManager.collidersAndRoomMaskAndDefault, QueryTriggerInteraction.Ignore))
				{
					flag = true;
					transform.position = this.hit.point - direction.normalized * 0.45f;
					this.RandomizeBloodRotationAndScale(transform);
					transform.gameObject.SetActive(true);
				}
				this.currentBloodIndex = (this.currentBloodIndex + 1) % this.playerBloodPooledObjects.Count;
			}
			if (leaveFootprint && !this.isPlayerDead)
			{
				if (this.playersManager.snowFootprintsPooledObjects == null || this.playersManager.snowFootprintsPooledObjects.Count <= 0)
				{
					return;
				}
				this.alternatePlaceFootprints = !this.alternatePlaceFootprints;
				if (this.alternatePlaceFootprints)
				{
					return;
				}
				Transform transform2 = this.playersManager.snowFootprintsPooledObjects[this.playersManager.currentFootprintIndex].transform;
				transform2.rotation = Quaternion.LookRotation(direction, Vector3.up);
				if (!flag)
				{
					this.interactRay = new Ray(base.transform.position + base.transform.up * 0.3f, direction);
					if (Physics.Raycast(this.interactRay, out this.hit, 6f, this.playersManager.collidersAndRoomMaskAndDefault, QueryTriggerInteraction.Ignore))
					{
						transform2.position = this.hit.point - direction.normalized * 0.45f;
					}
				}
				else
				{
					transform2.position = this.hit.point - direction.normalized * 0.45f;
				}
				transform2.transform.eulerAngles = new Vector3(transform2.transform.eulerAngles.x, base.transform.eulerAngles.y, transform2.transform.eulerAngles.z);
				this.playersManager.snowFootprintsPooledObjects[this.playersManager.currentFootprintIndex].enabled = true;
				this.playersManager.currentFootprintIndex = (this.playersManager.currentFootprintIndex + 1) % this.playersManager.snowFootprintsPooledObjects.Count;
			}
		}

		// Token: 0x06000FAB RID: 4011 RVA: 0x00083C28 File Offset: 0x00081E28
		private void RandomizeBloodRotationAndScale(Transform blood)
		{
			Vector3 localEulerAngles = blood.localEulerAngles;
			localEulerAngles.z = Random.Range(-180f, 180f);
			blood.localEulerAngles = localEulerAngles;
			blood.localScale = new Vector3(Random.Range(0.15f, 0.7f), Random.Range(0.15f, 0.7f), 0.55f);
		}

		// Token: 0x06000FAC RID: 4012 RVA: 0x00083C87 File Offset: 0x00081E87
		private void Emote1_performed(InputAction.CallbackContext context)
		{
			this.PerformEmote(context, 1);
		}

		// Token: 0x06000FAD RID: 4013 RVA: 0x00083C91 File Offset: 0x00081E91
		private void Emote2_performed(InputAction.CallbackContext context)
		{
			this.PerformEmote(context, 2);
		}

		// Token: 0x06000FAE RID: 4014 RVA: 0x00083C9C File Offset: 0x00081E9C
		public void PerformEmote(InputAction.CallbackContext context, int emoteID)
		{
			if (!context.performed)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (!this.CheckConditionsForEmote())
			{
				return;
			}
			if (this.timeSinceStartingEmote < 0.5f)
			{
				return;
			}
			this.timeSinceStartingEmote = 0f;
			this.performingEmote = true;
			this.playerBodyAnimator.SetInteger("emoteNumber", emoteID);
			this.StartPerformingEmoteServerRpc();
		}

		// Token: 0x06000FAF RID: 4015 RVA: 0x00083D1C File Offset: 0x00081F1C
		[ServerRpc]
		public void StartPerformingEmoteServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3803364611U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 3803364611U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.StartPerformingEmoteClientRpc();
		}

		// Token: 0x06000FB0 RID: 4016 RVA: 0x00083E30 File Offset: 0x00082030
		[ClientRpc]
		public void StartPerformingEmoteClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(1955832627U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 1955832627U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.performingEmote = true;
		}

		// Token: 0x06000FB1 RID: 4017 RVA: 0x00083F00 File Offset: 0x00082100
		[ServerRpc]
		public void StopPerformingEmoteServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(878005044U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 878005044U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.StopPerformingEmoteClientRpc();
		}

		// Token: 0x06000FB2 RID: 4018 RVA: 0x00084014 File Offset: 0x00082214
		[ClientRpc]
		public void StopPerformingEmoteClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(655708081U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 655708081U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.performingEmote = false;
		}

		// Token: 0x06000FB3 RID: 4019 RVA: 0x000840E4 File Offset: 0x000822E4
		public bool CheckConditionsForSinkingInQuicksand()
		{
			return this.thisController.isGrounded && !this.inSpecialInteractAnimation && !this.inAnimationWithEnemy && !this.isClimbingLadder && (this.currentFootstepSurfaceIndex == 1 || this.currentFootstepSurfaceIndex == 4 || this.currentFootstepSurfaceIndex == 8);
		}

		// Token: 0x06000FB4 RID: 4020 RVA: 0x00084140 File Offset: 0x00082340
		private bool CheckConditionsForEmote()
		{
			return !this.inSpecialInteractAnimation && !this.isPlayerDead && !this.isJumping && !this.isWalking && !this.isCrouching && !this.isClimbingLadder && !this.isGrabbingObjectAnimation && !this.inTerminalMenu && !this.isTypingChat;
		}

		// Token: 0x06000FB5 RID: 4021 RVA: 0x000841A0 File Offset: 0x000823A0
		private void ActivateItem_performed(InputAction.CallbackContext context)
		{
			if (!context.performed)
			{
				return;
			}
			if (base.IsOwner && this.isPlayerDead && (!base.IsServer || this.isHostPlayerObject))
			{
				if (StartOfRound.Instance.overrideSpectateCamera)
				{
					return;
				}
				if (this.spectatedPlayerScript != null && !this.spectatedPlayerScript.isPlayerDead)
				{
					this.SpectateNextPlayer();
				}
				return;
			}
			else
			{
				if (!this.CanUseItem())
				{
					return;
				}
				if (this.timeSinceSwitchingSlots < 0.075f)
				{
					return;
				}
				ShipBuildModeManager.Instance.CancelBuildMode(true);
				this.currentlyHeldObjectServer.gameObject.GetComponent<GrabbableObject>().UseItemOnClient(true);
				this.timeSinceSwitchingSlots = 0f;
				return;
			}
		}

		// Token: 0x06000FB6 RID: 4022 RVA: 0x00084249 File Offset: 0x00082449
		private void ActivateItem_canceled(InputAction.CallbackContext context)
		{
			if (!this.CanUseItem())
			{
				return;
			}
			if (!this.currentlyHeldObjectServer.itemProperties.holdButtonUse)
			{
				return;
			}
			ShipBuildModeManager.Instance.CancelBuildMode(true);
			this.currentlyHeldObjectServer.gameObject.GetComponent<GrabbableObject>().UseItemOnClient(false);
		}

		// Token: 0x06000FB7 RID: 4023 RVA: 0x00084288 File Offset: 0x00082488
		private bool CanUseItem()
		{
			return ((base.IsOwner && this.isPlayerControlled && (!base.IsServer || this.isHostPlayerObject)) || this.isTestingPlayer) && this.isHoldingObject && !(this.currentlyHeldObjectServer == null) && !this.quickMenuManager.isMenuOpen && !this.isPlayerDead && (this.currentlyHeldObjectServer.itemProperties.usableInSpecialAnimations || (!this.isGrabbingObjectAnimation && !this.inTerminalMenu && !this.isTypingChat && (!this.inSpecialInteractAnimation || this.inShockingMinigame)));
		}

		// Token: 0x06000FB8 RID: 4024 RVA: 0x00084330 File Offset: 0x00082530
		private int FirstEmptyItemSlot()
		{
			int result = -1;
			if (this.ItemSlots[this.currentItemSlot] == null)
			{
				result = this.currentItemSlot;
			}
			else
			{
				for (int i = 0; i < this.ItemSlots.Length; i++)
				{
					if (this.ItemSlots[i] == null)
					{
						result = i;
						break;
					}
				}
			}
			return result;
		}

		// Token: 0x06000FB9 RID: 4025 RVA: 0x00084385 File Offset: 0x00082585
		private int NextItemSlot(bool forward)
		{
			if (forward)
			{
				return (this.currentItemSlot + 1) % this.ItemSlots.Length;
			}
			if (this.currentItemSlot == 0)
			{
				return this.ItemSlots.Length - 1;
			}
			return this.currentItemSlot - 1;
		}

		// Token: 0x06000FBA RID: 4026 RVA: 0x000843B8 File Offset: 0x000825B8
		private void SwitchToItemSlot(int slot, GrabbableObject fillSlotWithItem = null)
		{
			this.currentItemSlot = slot;
			if (base.IsOwner)
			{
				for (int i = 0; i < HUDManager.Instance.itemSlotIconFrames.Length; i++)
				{
					HUDManager.Instance.itemSlotIconFrames[i].GetComponent<Animator>().SetBool("selectedSlot", false);
				}
				HUDManager.Instance.itemSlotIconFrames[slot].GetComponent<Animator>().SetBool("selectedSlot", true);
			}
			if (fillSlotWithItem != null)
			{
				this.ItemSlots[slot] = fillSlotWithItem;
				if (base.IsOwner)
				{
					HUDManager.Instance.itemSlotIcons[slot].sprite = fillSlotWithItem.itemProperties.itemIcon;
					HUDManager.Instance.itemSlotIcons[this.currentItemSlot].enabled = true;
				}
			}
			if (this.currentlyHeldObjectServer != null)
			{
				this.currentlyHeldObjectServer.playerHeldBy = this;
				if (base.IsOwner)
				{
					this.SetSpecialGrabAnimationBool(false, this.currentlyHeldObjectServer);
				}
				this.currentlyHeldObjectServer.PocketItem();
				if (this.ItemSlots[slot] != null && !string.IsNullOrEmpty(this.ItemSlots[slot].itemProperties.pocketAnim))
				{
					this.playerBodyAnimator.SetTrigger(this.ItemSlots[slot].itemProperties.pocketAnim);
				}
			}
			if (this.ItemSlots[slot] != null)
			{
				this.ItemSlots[slot].playerHeldBy = this;
				this.ItemSlots[slot].EquipItem();
				if (base.IsOwner)
				{
					this.SetSpecialGrabAnimationBool(true, this.ItemSlots[slot]);
				}
				if (this.currentlyHeldObjectServer != null)
				{
					if (this.ItemSlots[slot].itemProperties.twoHandedAnimation || this.currentlyHeldObjectServer.itemProperties.twoHandedAnimation)
					{
						this.playerBodyAnimator.ResetTrigger("SwitchHoldAnimationTwoHanded");
						this.playerBodyAnimator.SetTrigger("SwitchHoldAnimationTwoHanded");
					}
					this.playerBodyAnimator.ResetTrigger("SwitchHoldAnimation");
					this.playerBodyAnimator.SetTrigger("SwitchHoldAnimation");
				}
				this.twoHandedAnimation = this.ItemSlots[slot].itemProperties.twoHandedAnimation;
				this.twoHanded = this.ItemSlots[slot].itemProperties.twoHanded;
				this.playerBodyAnimator.SetBool("GrabValidated", true);
				this.playerBodyAnimator.SetBool("cancelHolding", false);
				this.isHoldingObject = true;
				this.currentlyHeldObjectServer = this.ItemSlots[slot];
			}
			else
			{
				if (!base.IsOwner && this.heldObjectServerCopy != null)
				{
					this.heldObjectServerCopy.SetActive(false);
				}
				if (base.IsOwner)
				{
					HUDManager.Instance.ClearControlTips();
				}
				this.currentlyHeldObjectServer = null;
				this.currentlyHeldObject = null;
				this.isHoldingObject = false;
				this.twoHanded = false;
				this.playerBodyAnimator.SetBool("cancelHolding", true);
			}
			if (base.IsOwner)
			{
				if (this.twoHanded)
				{
					HUDManager.Instance.PingHUDElement(HUDManager.Instance.Inventory, 0.1f, 0.13f, 0.13f);
					HUDManager.Instance.holdingTwoHandedItem.enabled = true;
					return;
				}
				HUDManager.Instance.PingHUDElement(HUDManager.Instance.Inventory, 1.5f, 1f, 0.13f);
				HUDManager.Instance.holdingTwoHandedItem.enabled = false;
			}
		}

		// Token: 0x06000FBB RID: 4027 RVA: 0x000846EC File Offset: 0x000828EC
		private void ScrollMouse_performed(InputAction.CallbackContext context)
		{
			if (this.inTerminalMenu)
			{
				float num = context.ReadValue<float>();
				this.terminalScrollVertical.value += num / 3f;
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (this.timeSinceSwitchingSlots < 0.3f)
			{
				return;
			}
			if (this.isGrabbingObjectAnimation || this.quickMenuManager.isMenuOpen || this.inSpecialInteractAnimation || this.throwingObject || this.isTypingChat || this.twoHanded || this.activatingItem)
			{
				return;
			}
			if (this.jetpackControls || this.disablingJetpackControls)
			{
				return;
			}
			ShipBuildModeManager.Instance.CancelBuildMode(true);
			this.playerBodyAnimator.SetBool("GrabValidated", false);
			if (context.ReadValue<float>() > 0f)
			{
				this.SwitchToItemSlot(this.NextItemSlot(true), null);
				this.SwitchItemSlotsServerRpc(true);
			}
			else
			{
				this.SwitchToItemSlot(this.NextItemSlot(false), null);
				this.SwitchItemSlotsServerRpc(false);
			}
			if (this.currentlyHeldObjectServer != null)
			{
				this.currentlyHeldObjectServer.gameObject.GetComponent<AudioSource>().PlayOneShot(this.currentlyHeldObjectServer.itemProperties.grabSFX, 0.6f);
			}
			this.timeSinceSwitchingSlots = 0f;
		}

		// Token: 0x06000FBC RID: 4028 RVA: 0x00084844 File Offset: 0x00082A44
		[ServerRpc]
		private void SwitchItemSlotsServerRpc(bool forward)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(412259855U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(forward, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref fastBufferWriter, 412259855U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.SwitchItemSlotsClientRpc(forward);
		}

		// Token: 0x06000FBD RID: 4029 RVA: 0x00084974 File Offset: 0x00082B74
		[ClientRpc]
		private void SwitchItemSlotsClientRpc(bool forward)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(141629807U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(forward, default(FastBufferWriter.ForPrimitives));
				base.__endSendClientRpc(ref fastBufferWriter, 141629807U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.SwitchToItemSlot(this.NextItemSlot(forward), null);
		}

		// Token: 0x06000FBE RID: 4030 RVA: 0x00084A70 File Offset: 0x00082C70
		private bool InteractTriggerUseConditionsMet()
		{
			if (this.sinkingValue > 0.73f)
			{
				return false;
			}
			if (this.isClimbingLadder)
			{
				if (this.hoveringOverTrigger.isLadder)
				{
					if (!this.hoveringOverTrigger.usingLadder)
					{
						return false;
					}
				}
				else if (this.hoveringOverTrigger.specialCharacterAnimation)
				{
					return false;
				}
			}
			else if (this.inSpecialInteractAnimation)
			{
				return false;
			}
			return !this.hoveringOverTrigger.isPlayingSpecialAnimation;
		}

		// Token: 0x06000FBF RID: 4031 RVA: 0x00084ADC File Offset: 0x00082CDC
		private void InspectItem_performed(InputAction.CallbackContext context)
		{
			if (ShipBuildModeManager.Instance.InBuildMode)
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inSpecialInteractAnimation || this.throwingObject)
			{
				return;
			}
			if (this.activatingItem)
			{
				return;
			}
			ShipBuildModeManager.Instance.CancelBuildMode(true);
			if (this.currentlyHeldObjectServer != null)
			{
				this.currentlyHeldObjectServer.InspectItem();
			}
		}

		// Token: 0x06000FC0 RID: 4032 RVA: 0x00084B78 File Offset: 0x00082D78
		private void QEItemInteract_performed(InputAction.CallbackContext context)
		{
			if (!this.equippedUsableItemQE)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inTerminalMenu || this.inSpecialInteractAnimation || this.throwingObject)
			{
				return;
			}
			if (this.timeSinceSwitchingSlots < 0.2f)
			{
				return;
			}
			float num = context.ReadValue<float>();
			if (this.currentlyHeldObjectServer != null)
			{
				this.timeSinceSwitchingSlots = 0f;
				if (num < 0f)
				{
					this.currentlyHeldObjectServer.ItemInteractLeftRightOnClient(false);
					return;
				}
				this.currentlyHeldObjectServer.ItemInteractLeftRightOnClient(true);
			}
		}

		// Token: 0x06000FC1 RID: 4033 RVA: 0x00084C3C File Offset: 0x00082E3C
		private void ItemSecondaryUse_performed(InputAction.CallbackContext context)
		{
			Debug.Log("secondary use A");
			if (!this.equippedUsableItemQE)
			{
				return;
			}
			Debug.Log("secondary use B");
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			Debug.Log("secondary use C");
			if (!context.performed)
			{
				return;
			}
			Debug.Log("secondary use D");
			if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inTerminalMenu || this.inSpecialInteractAnimation || this.throwingObject)
			{
				return;
			}
			Debug.Log("secondary use E");
			if (this.timeSinceSwitchingSlots < 0.2f)
			{
				return;
			}
			Debug.Log("secondary use F");
			if (this.currentlyHeldObjectServer != null)
			{
				Debug.Log("secondary use G");
				this.timeSinceSwitchingSlots = 0f;
				this.currentlyHeldObjectServer.ItemInteractLeftRightOnClient(false);
			}
		}

		// Token: 0x06000FC2 RID: 4034 RVA: 0x00084D28 File Offset: 0x00082F28
		private void ItemTertiaryUse_performed(InputAction.CallbackContext context)
		{
			if (!this.equippedUsableItemQE)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inTerminalMenu || this.inSpecialInteractAnimation || this.throwingObject)
			{
				return;
			}
			if (this.timeSinceSwitchingSlots < 0.2f)
			{
				return;
			}
			if (this.currentlyHeldObjectServer != null)
			{
				this.timeSinceSwitchingSlots = 0f;
				this.currentlyHeldObjectServer.ItemInteractLeftRightOnClient(true);
			}
		}

		// Token: 0x06000FC3 RID: 4035 RVA: 0x00084DD0 File Offset: 0x00082FD0
		private void Interact_performed(InputAction.CallbackContext context)
		{
			if (base.IsOwner && this.isPlayerDead && (!base.IsServer || this.isHostPlayerObject))
			{
				if (StartOfRound.Instance.overrideSpectateCamera)
				{
					return;
				}
				if (this.spectatedPlayerScript != null && !this.spectatedPlayerScript.isPlayerDead)
				{
					this.SpectateNextPlayer();
				}
				return;
			}
			else
			{
				if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
				{
					return;
				}
				if (!context.performed)
				{
					return;
				}
				if (this.timeSinceSwitchingSlots < 0.2f)
				{
					return;
				}
				ShipBuildModeManager.Instance.CancelBuildMode(true);
				if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inTerminalMenu || this.throwingObject || this.IsInspectingItem)
				{
					return;
				}
				if (this.inAnimationWithEnemy != null)
				{
					return;
				}
				if (this.jetpackControls || this.disablingJetpackControls)
				{
					return;
				}
				if (StartOfRound.Instance.suckingPlayersOutOfShip)
				{
					return;
				}
				if (!this.activatingItem)
				{
					this.BeginGrabObject();
				}
				if (this.hoveringOverTrigger == null || this.hoveringOverTrigger.holdInteraction || (this.isHoldingObject && !this.hoveringOverTrigger.oneHandedItemAllowed) || (this.twoHanded && (!this.hoveringOverTrigger.twoHandedItemAllowed || this.hoveringOverTrigger.specialCharacterAnimation)))
				{
					return;
				}
				if (!this.InteractTriggerUseConditionsMet())
				{
					return;
				}
				this.hoveringOverTrigger.Interact(this.thisPlayerBody);
				return;
			}
		}

		// Token: 0x06000FC4 RID: 4036 RVA: 0x00084F4C File Offset: 0x0008314C
		private void BeginGrabObject()
		{
			this.interactRay = new Ray(this.gameplayCamera.transform.position, this.gameplayCamera.transform.forward);
			if (Physics.Raycast(this.interactRay, out this.hit, this.grabDistance, this.interactableObjectsMask) && this.hit.collider.gameObject.layer != 8 && this.hit.collider.tag == "PhysicsProp")
			{
				if (this.twoHanded || this.sinkingValue > 0.73f)
				{
					return;
				}
				this.currentlyGrabbingObject = this.hit.collider.transform.gameObject.GetComponent<GrabbableObject>();
				if (!GameNetworkManager.Instance.gameHasStarted && !this.currentlyGrabbingObject.itemProperties.canBeGrabbedBeforeGameStart && StartOfRound.Instance.testRoom == null)
				{
					return;
				}
				this.grabInvalidated = false;
				if (this.currentlyGrabbingObject == null || this.inSpecialInteractAnimation || this.currentlyGrabbingObject.isHeld || this.currentlyGrabbingObject.isPocketed)
				{
					return;
				}
				NetworkObject networkObject = this.currentlyGrabbingObject.NetworkObject;
				if (networkObject == null || !networkObject.IsSpawned)
				{
					return;
				}
				this.currentlyGrabbingObject.InteractItem();
				if (this.currentlyGrabbingObject.grabbable && this.FirstEmptyItemSlot() != -1)
				{
					this.playerBodyAnimator.SetBool("GrabInvalidated", false);
					this.playerBodyAnimator.SetBool("GrabValidated", false);
					this.playerBodyAnimator.SetBool("cancelHolding", false);
					this.playerBodyAnimator.ResetTrigger("Throw");
					this.SetSpecialGrabAnimationBool(true, null);
					this.isGrabbingObjectAnimation = true;
					this.cursorIcon.enabled = false;
					this.cursorTip.text = "";
					this.twoHanded = this.currentlyGrabbingObject.itemProperties.twoHanded;
					this.carryWeight += Mathf.Clamp(this.currentlyGrabbingObject.itemProperties.weight - 1f, 0f, 10f);
					if (this.currentlyGrabbingObject.itemProperties.grabAnimationTime > 0f)
					{
						this.grabObjectAnimationTime = this.currentlyGrabbingObject.itemProperties.grabAnimationTime;
					}
					else
					{
						this.grabObjectAnimationTime = 0.4f;
					}
					if (!this.isTestingPlayer)
					{
						this.GrabObjectServerRpc(networkObject);
					}
					if (this.grabObjectCoroutine != null)
					{
						base.StopCoroutine(this.grabObjectCoroutine);
					}
					this.grabObjectCoroutine = base.StartCoroutine(this.GrabObject());
				}
			}
		}

		// Token: 0x06000FC5 RID: 4037 RVA: 0x000851EE File Offset: 0x000833EE
		private IEnumerator GrabObject()
		{
			this.grabbedObjectValidated = false;
			yield return new WaitForSeconds(0.1f);
			this.currentlyGrabbingObject.parentObject = this.localItemHolder;
			if (this.currentlyGrabbingObject.itemProperties.grabSFX != null)
			{
				this.itemAudio.PlayOneShot(this.currentlyGrabbingObject.itemProperties.grabSFX, 1f);
			}
			if (this.currentlyGrabbingObject.playerHeldBy != null)
			{
				Debug.Log(string.Format("playerHeldBy on currentlyGrabbingObject 1: {0}", this.currentlyGrabbingObject.playerHeldBy));
			}
			while ((this.currentlyGrabbingObject != this.currentlyHeldObjectServer || !this.currentlyHeldObjectServer.wasOwnerLastFrame) && !this.grabInvalidated)
			{
				Debug.Log(string.Format("grabInvalidated: {0}", this.grabInvalidated));
				yield return null;
			}
			if (this.grabInvalidated)
			{
				this.grabInvalidated = false;
				Debug.Log("Grab was invalidated on object: " + this.currentlyGrabbingObject.name);
				if (this.currentlyGrabbingObject.playerHeldBy != null)
				{
					Debug.Log(string.Format("playerHeldBy on currentlyGrabbingObject 2: {0}", this.currentlyGrabbingObject.playerHeldBy));
				}
				if (this.currentlyGrabbingObject.parentObject == this.localItemHolder)
				{
					if (this.currentlyGrabbingObject.playerHeldBy != null)
					{
						Debug.Log(string.Format("Grab invalidated; giving grabbed object to the client who got it first; {0}", this.currentlyGrabbingObject.playerHeldBy));
						this.currentlyGrabbingObject.parentObject = this.currentlyGrabbingObject.playerHeldBy.serverItemHolder;
					}
					else
					{
						Debug.Log("Grab invalidated; no other client has possession of it, so set its parent object to null.");
						this.currentlyGrabbingObject.parentObject = null;
					}
				}
				this.twoHanded = false;
				this.SetSpecialGrabAnimationBool(false, null);
				if (this.currentlyHeldObjectServer != null)
				{
					this.playerBodyAnimator.SetBool("Grab", true);
				}
				this.playerBodyAnimator.SetBool("GrabInvalidated", true);
				this.carryWeight = Mathf.Clamp(this.carryWeight - (this.currentlyGrabbingObject.itemProperties.weight - 1f), 0f, 10f);
				this.isGrabbingObjectAnimation = false;
				this.currentlyGrabbingObject = null;
				yield break;
			}
			this.grabbedObjectValidated = true;
			this.currentlyHeldObjectServer.GrabItemOnClient();
			this.isHoldingObject = true;
			yield return new WaitForSeconds(this.grabObjectAnimationTime - 0.2f);
			this.playerBodyAnimator.SetBool("GrabValidated", true);
			this.isGrabbingObjectAnimation = false;
			yield break;
		}

		// Token: 0x06000FC6 RID: 4038 RVA: 0x00085200 File Offset: 0x00083400
		private void SetSpecialGrabAnimationBool(bool setTrue, GrabbableObject currentItem = null)
		{
			if (currentItem == null)
			{
				currentItem = this.currentlyGrabbingObject;
			}
			if (!base.IsOwner)
			{
				return;
			}
			this.playerBodyAnimator.SetBool("Grab", setTrue);
			if (!string.IsNullOrEmpty(currentItem.itemProperties.grabAnim))
			{
				try
				{
					this.playerBodyAnimator.SetBool(currentItem.itemProperties.grabAnim, setTrue);
				}
				catch (Exception)
				{
					Debug.LogError("An item tried to set an animator bool which does not exist: " + currentItem.itemProperties.grabAnim);
				}
			}
		}

		// Token: 0x06000FC7 RID: 4039 RVA: 0x00085290 File Offset: 0x00083490
		[ServerRpc]
		private void GrabObjectServerRpc(NetworkObjectReference grabbedObject)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(1554282707U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				base.__endSendServerRpc(ref fastBufferWriter, 1554282707U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			bool flag = true;
			NetworkObject networkObject;
			if (grabbedObject.TryGet(out networkObject, null) && networkObject.GetComponentInChildren<GrabbableObject>())
			{
				if (networkObject.GetComponentInChildren<GrabbableObject>().heldByPlayerOnServer)
				{
					flag = false;
					Debug.Log("Invalidated grab on " + base.gameObject.name + " on client; another player was already grabbing the same object");
				}
			}
			else
			{
				flag = false;
			}
			if (flag)
			{
				networkObject.GetComponentInChildren<GrabbableObject>().heldByPlayerOnServer = true;
				networkObject.ChangeOwnership(this.actualClientId);
				this.GrabObjectClientRpc(true, networkObject);
				return;
			}
			this.GrabObjectClientRpc(flag, grabbedObject);
		}

		// Token: 0x06000FC8 RID: 4040 RVA: 0x00085438 File Offset: 0x00083638
		[ClientRpc]
		private void GrabObjectClientRpc(bool grabValidated, NetworkObjectReference grabbedObject)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2552479808U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(grabValidated, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				base.__endSendClientRpc(ref fastBufferWriter, 2552479808U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (grabValidated)
			{
				NetworkObject networkObject;
				if (!grabbedObject.TryGet(out networkObject, null))
				{
					Debug.Log(string.Format("Error! Networkobject grabbed was not found on client: {0}", networkObject.NetworkObjectId));
					return;
				}
				this.SwitchToItemSlot(this.FirstEmptyItemSlot(), networkObject.gameObject.GetComponentInChildren<GrabbableObject>());
				this.currentlyHeldObjectServer.EnablePhysics(false);
				this.currentlyHeldObjectServer.isHeld = true;
				this.currentlyHeldObjectServer.hasHitGround = false;
				this.currentlyHeldObjectServer.isInFactory = this.isInsideFactory;
				this.twoHanded = this.currentlyHeldObjectServer.itemProperties.twoHanded;
				this.twoHandedAnimation = this.currentlyHeldObjectServer.itemProperties.twoHandedAnimation;
				if (!base.IsOwner)
				{
					this.currentlyHeldObjectServer.parentObject = this.serverItemHolder;
					this.isHoldingObject = true;
					this.carryWeight += Mathf.Clamp(this.currentlyHeldObjectServer.itemProperties.weight - 1f, 0f, 10f);
					if (this.currentlyHeldObjectServer.itemProperties.grabSFX != null)
					{
						this.itemAudio.PlayOneShot(this.currentlyHeldObjectServer.itemProperties.grabSFX, 1f);
					}
					if (this.currentlyHeldObjectServer.playerHeldBy != null)
					{
						Debug.Log(string.Format("playerHeldBy on grabbed object: {0}", this.currentlyHeldObjectServer.playerHeldBy));
						return;
					}
					Debug.Log("grabbed object playerHeldBy is null");
					return;
				}
			}
			else
			{
				Debug.Log(string.Format("Player #{0}: Was grabbing object {1} validated by server? : {2}", this.playerClientId, grabbedObject.NetworkObjectId, grabValidated));
				if (base.IsOwner)
				{
					Debug.Log("Local client got grab invalidated");
					this.grabInvalidated = true;
				}
			}
		}

		// Token: 0x06000FC9 RID: 4041 RVA: 0x000856E8 File Offset: 0x000838E8
		private void Discard_performed(InputAction.CallbackContext context)
		{
			if (!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject))
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if (StartOfRound.Instance.localPlayerUsingController && ShipBuildModeManager.Instance.InBuildMode)
			{
				ShipBuildModeManager.Instance.StoreObjectLocalClient();
				return;
			}
			if (this.timeSinceSwitchingSlots < 0.2f)
			{
				return;
			}
			if (this.isGrabbingObjectAnimation || this.timeSinceSwitchingSlots < 0.2f || this.isTypingChat || this.inSpecialInteractAnimation)
			{
				return;
			}
			if (this.activatingItem)
			{
				return;
			}
			ShipBuildModeManager.Instance.CancelBuildMode(true);
			if (!this.throwingObject && this.isHoldingObject && this.currentlyHeldObjectServer != null)
			{
				if (Object.FindObjectOfType<DepositItemsDesk>() != null && this.currentlyHeldObjectServer != null)
				{
					DepositItemsDesk depositItemsDesk = Object.FindObjectOfType<DepositItemsDesk>();
					if (Object.FindObjectOfType<DepositItemsDesk>().triggerCollider.bounds.Contains(this.currentlyHeldObjectServer.transform.position))
					{
						depositItemsDesk.PlaceItemOnCounter(this);
						return;
					}
				}
				base.StartCoroutine(this.waitToEndOfFrameToDiscard());
			}
		}

		// Token: 0x06000FCA RID: 4042 RVA: 0x00085808 File Offset: 0x00083A08
		private IEnumerator waitToEndOfFrameToDiscard()
		{
			yield return new WaitForEndOfFrame();
			this.DiscardHeldObject(false, null, default(Vector3), true);
			yield break;
		}

		// Token: 0x06000FCB RID: 4043 RVA: 0x00085818 File Offset: 0x00083A18
		public void DespawnHeldObject()
		{
			if (this.currentlyHeldObjectServer != null)
			{
				this.SetSpecialGrabAnimationBool(false, this.currentlyHeldObjectServer);
				this.playerBodyAnimator.SetBool("cancelHolding", true);
				this.playerBodyAnimator.SetTrigger("Throw");
				HUDManager.Instance.itemSlotIcons[this.currentItemSlot].enabled = false;
				HUDManager.Instance.holdingTwoHandedItem.enabled = false;
				this.throwingObject = true;
				this.DespawnHeldObjectOnClient();
				this.DespawnHeldObjectServerRpc();
			}
		}

		// Token: 0x06000FCC RID: 4044 RVA: 0x0008589C File Offset: 0x00083A9C
		private void DespawnHeldObjectOnClient()
		{
			this.ItemSlots[this.currentItemSlot] = null;
			this.twoHanded = false;
			this.twoHandedAnimation = false;
			this.carryWeight -= Mathf.Clamp(this.currentlyHeldObjectServer.itemProperties.weight - 1f, 0f, 10f);
			this.isHoldingObject = false;
			this.hasThrownObject = true;
		}

		// Token: 0x06000FCD RID: 4045 RVA: 0x00085908 File Offset: 0x00083B08
		[ServerRpc]
		private void DespawnHeldObjectServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(1786952262U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 1786952262U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			if (this.currentlyHeldObjectServer != null)
			{
				this.currentlyHeldObjectServer.gameObject.GetComponent<NetworkObject>().Despawn(true);
			}
			this.DespawnHeldObjectClientRpc();
		}

		// Token: 0x06000FCE RID: 4046 RVA: 0x00085A40 File Offset: 0x00083C40
		[ClientRpc]
		private void DespawnHeldObjectClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2217326231U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 2217326231U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (!base.IsOwner)
			{
				this.DespawnHeldObjectOnClient();
				return;
			}
			this.throwingObject = false;
		}

		// Token: 0x06000FCF RID: 4047 RVA: 0x00085B20 File Offset: 0x00083D20
		public void DiscardHeldObject(bool placeObject = false, NetworkObject parentObjectTo = null, Vector3 placePosition = default(Vector3), bool matchRotationOfParent = true)
		{
			this.SetSpecialGrabAnimationBool(false, this.currentlyHeldObjectServer);
			this.playerBodyAnimator.SetBool("cancelHolding", true);
			this.playerBodyAnimator.SetTrigger("Throw");
			HUDManager.Instance.itemSlotIcons[this.currentItemSlot].enabled = false;
			HUDManager.Instance.holdingTwoHandedItem.enabled = false;
			if (!placeObject)
			{
				this.throwingObject = true;
				bool droppedInElevator = this.isInElevator;
				Vector3 targetFloorPosition;
				if (!this.isInElevator)
				{
					Vector3 vector;
					if (this.currentlyHeldObjectServer.itemProperties.allowDroppingAheadOfPlayer)
					{
						vector = this.DropItemAheadOfPlayer();
					}
					else
					{
						vector = this.currentlyHeldObjectServer.GetItemFloorPosition(default(Vector3));
					}
					if (!this.playersManager.shipBounds.bounds.Contains(vector))
					{
						targetFloorPosition = this.playersManager.propsContainer.InverseTransformPoint(vector);
					}
					else
					{
						droppedInElevator = true;
						targetFloorPosition = this.playersManager.elevatorTransform.InverseTransformPoint(vector);
					}
				}
				else
				{
					Vector3 vector = this.currentlyHeldObjectServer.GetItemFloorPosition(default(Vector3));
					if (!this.playersManager.shipBounds.bounds.Contains(vector))
					{
						droppedInElevator = false;
						targetFloorPosition = this.playersManager.propsContainer.InverseTransformPoint(vector);
					}
					else
					{
						targetFloorPosition = this.playersManager.elevatorTransform.InverseTransformPoint(vector);
					}
				}
				int floorYRot = (int)base.transform.localEulerAngles.y;
				this.SetObjectAsNoLongerHeld(droppedInElevator, this.isInHangarShipRoom, targetFloorPosition, this.currentlyHeldObjectServer, floorYRot);
				this.currentlyHeldObjectServer.DiscardItemOnClient();
				this.ThrowObjectServerRpc(this.currentlyHeldObjectServer.NetworkObject, droppedInElevator, this.isInHangarShipRoom, targetFloorPosition, floorYRot);
				return;
			}
			if (parentObjectTo == null)
			{
				this.throwingObject = true;
				if (this.isInElevator)
				{
					placePosition = StartOfRound.Instance.elevatorTransform.InverseTransformPoint(placePosition);
				}
				else
				{
					placePosition = StartOfRound.Instance.propsContainer.InverseTransformPoint(placePosition);
				}
				int floorYRot2 = (int)base.transform.localEulerAngles.y;
				this.SetObjectAsNoLongerHeld(this.isInElevator, this.isInHangarShipRoom, placePosition, this.currentlyHeldObjectServer, floorYRot2);
				this.currentlyHeldObjectServer.DiscardItemOnClient();
				this.ThrowObjectServerRpc(this.currentlyHeldObjectServer.gameObject.GetComponent<NetworkObject>(), this.isInElevator, this.isInHangarShipRoom, placePosition, floorYRot2);
				return;
			}
			this.PlaceGrabbableObject(parentObjectTo.transform, placePosition, matchRotationOfParent, this.currentlyHeldObjectServer);
			this.currentlyHeldObjectServer.DiscardItemOnClient();
			this.PlaceObjectServerRpc(this.currentlyHeldObjectServer.gameObject.GetComponent<NetworkObject>(), parentObjectTo, placePosition, matchRotationOfParent);
		}

		// Token: 0x06000FD0 RID: 4048 RVA: 0x00085DAC File Offset: 0x00083FAC
		private Vector3 DropItemAheadOfPlayer()
		{
			Vector3 vector = Vector3.zero;
			Ray ray = new Ray(base.transform.position + Vector3.up * 0.4f, this.gameplayCamera.transform.forward);
			if (Physics.Raycast(ray, out this.hit, 1.7f, 268438273, QueryTriggerInteraction.Ignore))
			{
				vector = ray.GetPoint(Mathf.Clamp(this.hit.distance - 0.3f, 0.01f, 2f));
			}
			else
			{
				vector = ray.GetPoint(1.7f);
			}
			Vector3 itemFloorPosition = this.currentlyHeldObjectServer.GetItemFloorPosition(vector);
			if (itemFloorPosition == vector)
			{
				itemFloorPosition = this.currentlyHeldObjectServer.GetItemFloorPosition(default(Vector3));
			}
			return itemFloorPosition;
		}

		// Token: 0x06000FD1 RID: 4049 RVA: 0x00085E74 File Offset: 0x00084074
		[ServerRpc]
		private void ThrowObjectServerRpc(NetworkObjectReference grabbedObject, bool droppedInElevator, bool droppedInShipRoom, Vector3 targetFloorPosition, int floorYRot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(2376977494U, serverRpcParams, RpcDelivery.Reliable);
				writer.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				writer.WriteValueSafe<bool>(droppedInElevator, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe<bool>(droppedInShipRoom, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe(targetFloorPosition);
				BytePacker.WriteValueBitPacked(writer, floorYRot);
				base.__endSendServerRpc(ref writer, 2376977494U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			NetworkObject networkObject;
			if (grabbedObject.TryGet(out networkObject, null))
			{
				this.ThrowObjectClientRpc(droppedInElevator, droppedInShipRoom, targetFloorPosition, grabbedObject, floorYRot);
				return;
			}
			Debug.LogError("Object was not thrown because it does not exist on the server.");
		}

		// Token: 0x06000FD2 RID: 4050 RVA: 0x00086014 File Offset: 0x00084214
		[ClientRpc]
		private void ThrowObjectClientRpc(bool droppedInElevator, bool droppedInShipRoom, Vector3 targetFloorPosition, NetworkObjectReference grabbedObject, int floorYRot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(3943098567U, clientRpcParams, RpcDelivery.Reliable);
				writer.WriteValueSafe<bool>(droppedInElevator, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe<bool>(droppedInShipRoom, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe(targetFloorPosition);
				writer.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				BytePacker.WriteValueBitPacked(writer, floorYRot);
				base.__endSendClientRpc(ref writer, 3943098567U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			NetworkObject networkObject;
			if (grabbedObject.TryGet(out networkObject, null))
			{
				GrabbableObject component = networkObject.GetComponent<GrabbableObject>();
				if (!base.IsOwner)
				{
					this.SetObjectAsNoLongerHeld(droppedInElevator, droppedInShipRoom, targetFloorPosition, component, -1);
				}
				if (!component.itemProperties.syncDiscardFunction)
				{
					component.playerHeldBy = null;
				}
				if (component == this.currentlyHeldObjectServer)
				{
					this.currentlyHeldObjectServer = null;
				}
				else
				{
					string arg = "null";
					if (this.currentlyHeldObjectServer != null)
					{
						arg = this.currentlyHeldObjectServer.gameObject.name;
					}
					Debug.LogError(string.Format("ThrowObjectClientRpc called for an object which is not the same as currentlyHeldObjectServer which is {0}, on player #{1}.", arg, this.playerClientId));
				}
			}
			else
			{
				Debug.LogError("The server did not have a reference to the held object (when attempting to THROW on client.)");
			}
			if (base.IsOwner)
			{
				this.throwingObject = false;
			}
		}

		// Token: 0x06000FD3 RID: 4051 RVA: 0x000861F8 File Offset: 0x000843F8
		public void SetObjectAsNoLongerHeld(bool droppedInElevator, bool droppedInShipRoom, Vector3 targetFloorPosition, GrabbableObject dropObject, int floorYRot = -1)
		{
			for (int i = 0; i < this.ItemSlots.Length; i++)
			{
				if (this.ItemSlots[i] == dropObject)
				{
					this.ItemSlots[i] = null;
				}
			}
			dropObject.heldByPlayerOnServer = false;
			dropObject.parentObject = null;
			if (droppedInElevator)
			{
				dropObject.transform.SetParent(this.playersManager.elevatorTransform, true);
			}
			else
			{
				dropObject.transform.SetParent(this.playersManager.propsContainer, true);
			}
			this.SetItemInElevator(droppedInShipRoom, droppedInElevator, dropObject);
			dropObject.EnablePhysics(true);
			dropObject.EnableItemMeshes(true);
			dropObject.transform.localScale = dropObject.originalScale;
			dropObject.isHeld = false;
			dropObject.isPocketed = false;
			dropObject.fallTime = 0f;
			dropObject.startFallingPosition = dropObject.transform.parent.InverseTransformPoint(dropObject.transform.position);
			dropObject.targetFloorPosition = targetFloorPosition;
			dropObject.floorYRot = floorYRot;
			this.twoHanded = false;
			this.twoHandedAnimation = false;
			this.carryWeight -= Mathf.Clamp(dropObject.itemProperties.weight - 1f, 0f, 10f);
			this.isHoldingObject = false;
			this.hasThrownObject = true;
		}

		// Token: 0x06000FD4 RID: 4052 RVA: 0x00086340 File Offset: 0x00084540
		public void SetAllItemsInElevator(bool inShipRoom, bool inElevator)
		{
			for (int i = 0; i < this.ItemSlots.Length; i++)
			{
				if (this.ItemSlots[i] != null)
				{
					this.SetItemInElevator(inShipRoom, inElevator, this.ItemSlots[i]);
				}
			}
		}

		// Token: 0x06000FD5 RID: 4053 RVA: 0x00086380 File Offset: 0x00084580
		public void SetItemInElevator(bool droppedInShipRoom, bool droppedInElevator, GrabbableObject gObject)
		{
			gObject.isInElevator = droppedInElevator;
			if (gObject.isInShipRoom != droppedInShipRoom)
			{
				gObject.isInShipRoom = droppedInShipRoom;
				if (!gObject.scrapPersistedThroughRounds)
				{
					if (droppedInShipRoom)
					{
						RoundManager.Instance.scrapCollectedInLevel += gObject.scrapValue;
						StartOfRound.Instance.gameStats.allPlayerStats[(int)(checked((IntPtr)this.playerClientId))].profitable += gObject.scrapValue;
						RoundManager.Instance.CollectNewScrapForThisRound(gObject);
						gObject.OnBroughtToShip();
						if (gObject.itemProperties.isScrap && Vector3.Distance(GameNetworkManager.Instance.localPlayerController.transform.position, gObject.transform.position) < 12f)
						{
							HUDManager.Instance.DisplayTip("Got scrap!", "To sell, use the terminal to route the ship to the company building.", false, true, "LCTip_SellScrap");
						}
					}
					else
					{
						if (gObject.scrapPersistedThroughRounds)
						{
							return;
						}
						RoundManager.Instance.scrapCollectedInLevel -= gObject.scrapValue;
						StartOfRound.Instance.gameStats.allPlayerStats[(int)(checked((IntPtr)this.playerClientId))].profitable -= gObject.scrapValue;
					}
					HUDManager.Instance.SetQuota(RoundManager.Instance.scrapCollectedInLevel, -1);
				}
				if (droppedInShipRoom)
				{
					StartOfRound.Instance.currentShipItemCount++;
					return;
				}
				StartOfRound.Instance.currentShipItemCount--;
			}
		}

		// Token: 0x06000FD6 RID: 4054 RVA: 0x000864E8 File Offset: 0x000846E8
		[ServerRpc]
		private void PlaceObjectServerRpc(NetworkObjectReference grabbedObject, NetworkObjectReference parentObject, Vector3 placePositionOffset = default(Vector3), bool matchRotationOfParent = true)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3830452098U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(parentObject, default(FastBufferWriter.ForNetworkSerializable));
				fastBufferWriter.WriteValueSafe(placePositionOffset);
				fastBufferWriter.WriteValueSafe<bool>(matchRotationOfParent, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref fastBufferWriter, 3830452098U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			NetworkObject networkObject;
			NetworkObject networkObject2;
			if (grabbedObject.TryGet(out networkObject, null) && parentObject.TryGet(out networkObject2, null))
			{
				this.PlaceObjectClientRpc(parentObject, placePositionOffset, matchRotationOfParent, grabbedObject);
				return;
			}
			NetworkObject networkObject3;
			if (!grabbedObject.TryGet(out networkObject3, null))
			{
				Debug.LogError(string.Format("Object placement not synced to clients, missing reference to a network object: placing object with id: {0}; player #{1}", grabbedObject.NetworkObjectId, this.playerClientId));
				return;
			}
			NetworkObject networkObject4;
			if (!parentObject.TryGet(out networkObject4, null))
			{
				Debug.LogError(string.Format("Object placement not synced to clients, missing reference to a network object: parent object with id: {0}; player #{1}", grabbedObject.NetworkObjectId, this.playerClientId));
			}
		}

		// Token: 0x06000FD7 RID: 4055 RVA: 0x000866E0 File Offset: 0x000848E0
		public void PlaceGrabbableObject(Transform parentObject, Vector3 positionOffset, bool matchRotationOfParent, GrabbableObject placeObject)
		{
			placeObject.EnablePhysics(true);
			placeObject.EnableItemMeshes(true);
			placeObject.isHeld = false;
			placeObject.isPocketed = false;
			placeObject.heldByPlayerOnServer = false;
			this.SetItemInElevator(this.isInHangarShipRoom, this.isInElevator, placeObject);
			placeObject.parentObject = null;
			placeObject.transform.SetParent(parentObject, true);
			placeObject.startFallingPosition = placeObject.transform.localPosition;
			placeObject.transform.localScale = placeObject.originalScale;
			placeObject.transform.localPosition = positionOffset;
			placeObject.targetFloorPosition = positionOffset;
			if (!matchRotationOfParent)
			{
				placeObject.fallTime = 0f;
			}
			else
			{
				placeObject.transform.localEulerAngles = new Vector3(0f, 0f, 0f);
				placeObject.fallTime = 1.1f;
			}
			placeObject.OnPlaceObject();
			for (int i = 0; i < this.ItemSlots.Length; i++)
			{
				if (this.ItemSlots[i] == placeObject)
				{
					this.ItemSlots[i] = null;
				}
			}
			this.twoHanded = false;
			this.twoHandedAnimation = false;
			this.carryWeight -= Mathf.Clamp(placeObject.itemProperties.weight - 1f, 0f, 10f);
			this.isHoldingObject = false;
			this.hasThrownObject = true;
		}

		// Token: 0x06000FD8 RID: 4056 RVA: 0x00086838 File Offset: 0x00084A38
		[ClientRpc]
		private void PlaceObjectClientRpc(NetworkObjectReference parentObjectReference, Vector3 placePositionOffset, bool matchRotationOfParent, NetworkObjectReference grabbedObject)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(3771510012U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(parentObjectReference, default(FastBufferWriter.ForNetworkSerializable));
				fastBufferWriter.WriteValueSafe(placePositionOffset);
				fastBufferWriter.WriteValueSafe<bool>(matchRotationOfParent, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<NetworkObjectReference>(grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
				base.__endSendClientRpc(ref fastBufferWriter, 3771510012U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			NetworkObject networkObject;
			if (grabbedObject.TryGet(out networkObject, null))
			{
				GrabbableObject component = networkObject.GetComponent<GrabbableObject>();
				if (!base.IsOwner)
				{
					NetworkObject networkObject2;
					if (parentObjectReference.TryGet(out networkObject2, null))
					{
						this.PlaceGrabbableObject(networkObject2.transform, placePositionOffset, matchRotationOfParent, component);
					}
					else
					{
						this.PlaceGrabbableObject(null, placePositionOffset, matchRotationOfParent, component);
						Debug.LogError(string.Format("Reference to parent object when placing was missing. object: {0} placed by {1}", component, base.gameObject.name));
					}
				}
				if (!component.itemProperties.syncDiscardFunction)
				{
					component.playerHeldBy = null;
				}
				if (this.currentlyHeldObjectServer == component)
				{
					this.currentlyHeldObjectServer = null;
				}
				else
				{
					string arg = "null";
					if (this.currentlyHeldObjectServer != null)
					{
						arg = this.currentlyHeldObjectServer.gameObject.name;
					}
					Debug.LogError(string.Format("ThrowObjectClientRpc called for an object which is not the same as currentlyHeldObjectServer which is {0}, on player #{1}.", arg, this.playerClientId));
				}
			}
			else
			{
				Debug.LogError("The server did not have a reference to the held object (when attempting to PLACE object on client.)");
			}
			if (base.IsOwner)
			{
				this.throwingObject = false;
				HUDManager.Instance.itemSlotIcons[this.currentItemSlot].enabled = false;
			}
		}

		// Token: 0x06000FD9 RID: 4057 RVA: 0x00086A5C File Offset: 0x00084C5C
		private void SetFreeCamera_performed(InputAction.CallbackContext context)
		{
			if (!base.IsServer || !base.IsOwner)
			{
				return;
			}
			if (!context.performed)
			{
				return;
			}
			if (this.isTypingChat)
			{
				return;
			}
			ShipBuildModeManager.Instance.CancelBuildMode(true);
			int num;
			if (TimeOfDay.Instance.insideLighting && !StartOfRound.Instance.inShipPhase)
			{
				if (RoundManager.Instance.dungeonGenerator == null || RoundManager.Instance.dungeonGenerator.Root == null)
				{
					return;
				}
				StartOfRound.Instance.freeCinematicCamera.transform.position = RoundManager.Instance.dungeonGenerator.Root.transform.position;
				StartOfRound.Instance.freeCinematicCameraTurnCompass.transform.position = RoundManager.Instance.dungeonGenerator.Root.transform.position;
				num = 3;
			}
			else
			{
				if (StartOfRound.Instance.elevatorTransform == null)
				{
					return;
				}
				num = 1;
				StartOfRound.Instance.freeCinematicCamera.transform.position = StartOfRound.Instance.elevatorTransform.position;
				StartOfRound.Instance.freeCinematicCameraTurnCompass.transform.position = StartOfRound.Instance.elevatorTransform.position;
			}
			AudioReverbPresets audioReverbPresets = Object.FindObjectOfType<AudioReverbPresets>();
			if (audioReverbPresets != null)
			{
				if (audioReverbPresets.audioPresets[num].usePreset != -1)
				{
					Debug.LogError("Audio preset AudioReverbTrigger is set to call another audio preset. This would cause a crash.");
					return;
				}
				audioReverbPresets.audioPresets[num].ChangeAudioReverbForPlayer(this);
			}
			TimeOfDay.Instance.insideLighting = !TimeOfDay.Instance.insideLighting;
		}

		// Token: 0x06000FDA RID: 4058 RVA: 0x00086BEC File Offset: 0x00084DEC
		public void ChangeHelmetLight(int lightNumber, bool enable = true)
		{
			for (int i = 0; i < this.allHelmetLights.Length; i++)
			{
				this.allHelmetLights[i].enabled = false;
			}
			this.allHelmetLights[lightNumber].enabled = enable;
			this.helmetLight = this.allHelmetLights[lightNumber];
		}

		// Token: 0x06000FDB RID: 4059 RVA: 0x00086C38 File Offset: 0x00084E38
		private void OpenMenu_performed(InputAction.CallbackContext context)
		{
			Debug.Log("PLAYER OPENED MENU");
			Debug.Log(string.Format("In terminal menu: {0}", this.inTerminalMenu));
			if (!context.performed)
			{
				return;
			}
			if (NetworkManager.Singleton == null)
			{
				if (!this.isTestingPlayer)
				{
					return;
				}
			}
			else if (!base.IsOwner || (!this.isPlayerControlled && !this.isPlayerDead) || (base.IsServer && !this.isHostPlayerObject))
			{
				return;
			}
			if (this.inTerminalMenu || (Object.FindObjectOfType<Terminal>() && Object.FindObjectOfType<Terminal>().timeSinceTerminalInUse < 0.25f))
			{
				return;
			}
			if (this.isTypingChat)
			{
				return;
			}
			if (!this.quickMenuManager.isMenuOpen)
			{
				this.quickMenuManager.OpenQuickMenu();
				return;
			}
			if (IngamePlayerSettings.Instance.changesNotApplied)
			{
				IngamePlayerSettings.Instance.DisplayConfirmChangesScreen(true);
				return;
			}
			this.quickMenuManager.CloseQuickMenu();
		}

		// Token: 0x06000FDC RID: 4060 RVA: 0x00086D20 File Offset: 0x00084F20
		private void Jump_performed(InputAction.CallbackContext context)
		{
			if (this.quickMenuManager.isMenuOpen)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (this.inSpecialInteractAnimation)
			{
				return;
			}
			if (this.isTypingChat)
			{
				return;
			}
			if (this.isMovementHindered > 0 && !this.isUnderwater)
			{
				return;
			}
			if (this.isExhausted)
			{
				return;
			}
			if ((this.thisController.isGrounded || (!this.isJumping && this.IsPlayerNearGround())) && !this.isJumping && (!this.isPlayerSliding || this.playerSlidingTimer > 2.5f) && !this.isCrouching)
			{
				this.playerSlidingTimer = 0f;
				this.isJumping = true;
				this.sprintMeter = Mathf.Clamp(this.sprintMeter - 0.08f, 0f, 1f);
				this.movementAudio.PlayOneShot(StartOfRound.Instance.playerJumpSFX);
				if (this.jumpCoroutine != null)
				{
					base.StopCoroutine(this.jumpCoroutine);
				}
				this.jumpCoroutine = base.StartCoroutine(this.PlayerJump());
			}
		}

		// Token: 0x06000FDD RID: 4061 RVA: 0x00086E4A File Offset: 0x0008504A
		private IEnumerator PlayerJump()
		{
			this.playerBodyAnimator.SetBool("Jumping", true);
			yield return new WaitForSeconds(0.15f);
			this.fallValue = this.jumpForce;
			this.fallValueUncapped = this.jumpForce;
			yield return new WaitForSeconds(0.1f);
			this.isJumping = false;
			this.isFallingFromJump = true;
			yield return new WaitUntil(() => this.thisController.isGrounded);
			this.playerBodyAnimator.SetBool("Jumping", false);
			this.isFallingFromJump = false;
			this.PlayerHitGroundEffects();
			this.jumpCoroutine = null;
			yield break;
		}

		// Token: 0x06000FDE RID: 4062 RVA: 0x00086E59 File Offset: 0x00085059
		public void ResetFallGravity()
		{
			this.takingFallDamage = false;
			this.fallValue = 0f;
			this.fallValueUncapped = 0f;
		}

		// Token: 0x06000FDF RID: 4063 RVA: 0x00086E78 File Offset: 0x00085078
		private void PlayerLookInput()
		{
			if (this.quickMenuManager.isMenuOpen)
			{
				return;
			}
			if (StartOfRound.Instance.newGameIsLoading)
			{
				return;
			}
			if (this.disableLookInput)
			{
				return;
			}
			Vector2 vector = this.playerActions.Movement.Look.ReadValue<Vector2>() * 0.008f * (float)IngamePlayerSettings.Instance.settings.lookSensitivity;
			if (IngamePlayerSettings.Instance.settings.invertYAxis)
			{
				vector.y *= -1f;
			}
			if (this.isFreeCamera)
			{
				StartOfRound.Instance.freeCinematicCameraTurnCompass.Rotate(new Vector3(0f, vector.x, 0f));
				this.cameraUp -= vector.y;
				this.cameraUp = Mathf.Clamp(this.cameraUp, -80f, 80f);
				StartOfRound.Instance.freeCinematicCameraTurnCompass.transform.localEulerAngles = new Vector3(this.cameraUp, StartOfRound.Instance.freeCinematicCameraTurnCompass.transform.localEulerAngles.y, 0f);
				return;
			}
			if (this.IsInspectingItem)
			{
				vector *= 0.01f;
				Vector3 localPosition = this.rightArmProceduralTarget.localPosition;
				localPosition.x = Mathf.Clamp(localPosition.x + vector.x, this.rightArmProceduralTargetBasePosition.x - 0.1f, this.rightArmProceduralTargetBasePosition.x + 0.1f);
				localPosition.y = Mathf.Clamp(localPosition.y + vector.y, this.rightArmProceduralTargetBasePosition.y - 0.3f, this.rightArmProceduralTargetBasePosition.y + 0.3f);
				this.rightArmProceduralTarget.localPosition = new Vector3(localPosition.x, localPosition.y, this.rightArmProceduralTarget.localPosition.z);
				return;
			}
			if (base.IsOwner && this.isPlayerDead && (!base.IsServer || this.isHostPlayerObject))
			{
				this.spectateCameraPivot.Rotate(new Vector3(0f, vector.x, 0f));
				this.cameraUp -= vector.y;
				this.cameraUp = Mathf.Clamp(this.cameraUp, -80f, 80f);
				this.spectateCameraPivot.transform.localEulerAngles = new Vector3(this.cameraUp, this.spectateCameraPivot.transform.localEulerAngles.y, 0f);
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			StartOfRound.Instance.playerLookMagnitudeThisFrame = vector.magnitude * Time.deltaTime;
			if (this.inSpecialInteractAnimation && this.isClimbingLadder)
			{
				this.LookWhileClimbingLadder(vector);
				this.SyncFullRotWithClients();
				return;
			}
			if (this.smoothLookMultiplier != 25f)
			{
				this.CalculateSmoothLookingInput(vector);
			}
			else
			{
				this.CalculateNormalLookingInput(vector);
			}
			if (this.isTestingPlayer)
			{
				return;
			}
			if (base.IsServer && this.playersManager.connectedPlayersAmount < 1)
			{
				return;
			}
			if (this.jetpackControls)
			{
				this.SyncFullRotWithClients();
				return;
			}
			if (this.updatePlayerLookInterval > 0.1f && Physics.OverlapSphere(base.transform.position, 35f, this.playerMask).Length != 0)
			{
				this.updatePlayerLookInterval = 0f;
				if (Mathf.Abs(this.oldCameraUp + this.previousYRot - (this.cameraUp + this.thisPlayerBody.eulerAngles.y)) > 3f)
				{
					if (this.playersManager.newGameIsLoading)
					{
						return;
					}
					this.UpdatePlayerRotationServerRpc((short)this.cameraUp, (short)this.thisPlayerBody.eulerAngles.y);
					this.oldCameraUp = this.cameraUp;
					this.previousYRot = this.thisPlayerBody.eulerAngles.y;
				}
			}
		}

		// Token: 0x06000FE0 RID: 4064 RVA: 0x00087274 File Offset: 0x00085474
		private void SyncFullRotWithClients()
		{
			if (this.jetpackControls || this.isClimbingLadder)
			{
				if (this.updatePlayerLookInterval > 0.15f)
				{
					this.updatePlayerLookInterval = 0f;
					this.UpdatePlayerRotationFullServerRpc(base.transform.eulerAngles);
					this.syncFullRotation = base.transform.eulerAngles;
				}
				return;
			}
		}

		// Token: 0x06000FE1 RID: 4065 RVA: 0x000872CC File Offset: 0x000854CC
		private void CalculateSmoothLookingInput(Vector2 inputVector)
		{
			if (!this.smoothLookEnabledLastFrame)
			{
				this.smoothLookEnabledLastFrame = true;
				this.smoothLookTurnCompass.rotation = this.gameplayCamera.transform.rotation;
				this.smoothLookTurnCompass.SetParent(null);
			}
			this.smoothLookTurnCompass.Rotate(new Vector3(0f, inputVector.x, 0f), Space.Self);
			this.cameraUp -= inputVector.y;
			this.cameraUp = Mathf.Clamp(this.cameraUp, -80f, 60f);
			this.smoothLookTurnCompass.localEulerAngles = new Vector3(this.cameraUp, this.smoothLookTurnCompass.localEulerAngles.y, this.smoothLookTurnCompass.localEulerAngles.z);
			this.smoothLookTurnCompass.eulerAngles = new Vector3(this.smoothLookTurnCompass.eulerAngles.x, this.smoothLookTurnCompass.eulerAngles.y, this.thisPlayerBody.transform.eulerAngles.z);
			this.thisPlayerBody.eulerAngles = new Vector3(this.thisPlayerBody.eulerAngles.x, Mathf.LerpAngle(this.thisPlayerBody.eulerAngles.y, this.smoothLookTurnCompass.eulerAngles.y, this.smoothLookMultiplier * Time.deltaTime), this.thisPlayerBody.eulerAngles.z);
			this.gameplayCamera.transform.localEulerAngles = new Vector3(Mathf.LerpAngle(this.gameplayCamera.transform.localEulerAngles.x, this.cameraUp, this.smoothLookMultiplier * Time.deltaTime), this.gameplayCamera.transform.localEulerAngles.y, this.gameplayCamera.transform.localEulerAngles.z);
		}

		// Token: 0x06000FE2 RID: 4066 RVA: 0x000874A8 File Offset: 0x000856A8
		private void CalculateNormalLookingInput(Vector2 inputVector)
		{
			if (this.smoothLookEnabledLastFrame)
			{
				this.smoothLookEnabledLastFrame = false;
			}
			if (this.inShockingMinigame)
			{
				inputVector.x = Mathf.Clamp(inputVector.x, -15f, 15f);
				inputVector.y = Mathf.Clamp(inputVector.y, -15f, 15f);
				this.turnCompass.Rotate(new Vector3(0f, inputVector.x, 0f));
			}
			else if (this.jetpackControls)
			{
				this.jetpackTurnCompass.Rotate(new Vector3(0f, inputVector.x, 0f), Space.Self);
			}
			else
			{
				this.thisPlayerBody.Rotate(new Vector3(0f, inputVector.x, 0f), Space.Self);
			}
			this.cameraUp -= inputVector.y;
			this.cameraUp = Mathf.Clamp(this.cameraUp, -80f, 60f);
			this.gameplayCamera.transform.localEulerAngles = new Vector3(this.cameraUp, this.gameplayCamera.transform.localEulerAngles.y, this.gameplayCamera.transform.localEulerAngles.z);
			this.playerHudUIContainer.Rotate(new Vector3(inputVector.y / 4f, -inputVector.x / 8f, 0f) * Mathf.Clamp(Time.deltaTime * 15f, 0.02f, 4f));
		}

		// Token: 0x06000FE3 RID: 4067 RVA: 0x00087634 File Offset: 0x00085834
		private void Look_performed(InputAction.CallbackContext context)
		{
			if (this.quickMenuManager.isMenuOpen)
			{
				if (context.ReadValue<Vector2>().magnitude > 0.001f)
				{
					Cursor.visible = true;
				}
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			StartOfRound.Instance.localPlayerUsingController = !InputControlPath.MatchesPrefix("<Mouse>", context.control);
		}

		// Token: 0x06000FE4 RID: 4068 RVA: 0x000876B2 File Offset: 0x000858B2
		bool IShockableWithGun.CanBeShocked()
		{
			return !this.isPlayerDead;
		}

		// Token: 0x06000FE5 RID: 4069 RVA: 0x000876BD File Offset: 0x000858BD
		float IShockableWithGun.GetDifficultyMultiplier()
		{
			return 1.5f;
		}

		// Token: 0x06000FE6 RID: 4070 RVA: 0x00034001 File Offset: 0x00032201
		NetworkObject IShockableWithGun.GetNetworkObject()
		{
			return base.NetworkObject;
		}

		// Token: 0x06000FE7 RID: 4071 RVA: 0x00011427 File Offset: 0x0000F627
		Transform IShockableWithGun.GetShockableTransform()
		{
			return base.transform;
		}

		// Token: 0x06000FE8 RID: 4072 RVA: 0x000876C4 File Offset: 0x000858C4
		Vector3 IShockableWithGun.GetShockablePosition()
		{
			return this.gameplayCamera.transform.position;
		}

		// Token: 0x06000FE9 RID: 4073 RVA: 0x000876D6 File Offset: 0x000858D6
		void IShockableWithGun.ShockWithGun(PlayerControllerB shockedByPlayer)
		{
			this.isMovementHindered++;
			this.hinderedMultiplier *= 3.5f;
		}

		// Token: 0x06000FEA RID: 4074 RVA: 0x000876F8 File Offset: 0x000858F8
		void IShockableWithGun.StopShockingWithGun()
		{
			this.isMovementHindered = Mathf.Clamp(this.isMovementHindered - 1, 0, 1000);
			this.hinderedMultiplier /= 3.5f;
		}

		// Token: 0x06000FEB RID: 4075 RVA: 0x00087728 File Offset: 0x00085928
		public void ForceTurnTowardsTarget()
		{
			if (this.inSpecialInteractAnimation && this.inShockingMinigame && this.shockingTarget != null)
			{
				this.targetScreenPos = this.turnCompassCamera.WorldToViewportPoint(this.shockingTarget.position);
				this.shockMinigamePullPosition = this.targetScreenPos.x - 0.5f;
				float num = Mathf.Clamp(Time.deltaTime, 0f, 0.1f);
				if (this.targetScreenPos.x > 0.54f)
				{
					this.turnCompass.Rotate(Vector3.up * 2000f * num * Mathf.Abs(this.shockMinigamePullPosition));
					this.playerBodyAnimator.SetBool("PullingCameraRight", false);
					this.playerBodyAnimator.SetBool("PullingCameraLeft", true);
				}
				else if (this.targetScreenPos.x < 0.46f)
				{
					this.turnCompass.Rotate(Vector3.up * -2000f * num * Mathf.Abs(this.shockMinigamePullPosition));
					this.playerBodyAnimator.SetBool("PullingCameraLeft", false);
					this.playerBodyAnimator.SetBool("PullingCameraRight", true);
				}
				else
				{
					this.playerBodyAnimator.SetBool("PullingCameraLeft", false);
					this.playerBodyAnimator.SetBool("PullingCameraRight", false);
				}
				this.targetScreenPos = this.gameplayCamera.WorldToViewportPoint(this.shockingTarget.position + Vector3.up * 0.35f);
				if (this.targetScreenPos.y > 0.6f)
				{
					this.cameraUp = Mathf.Clamp(Mathf.Lerp(this.cameraUp, this.cameraUp - 25f, 25f * num * Mathf.Abs(this.targetScreenPos.y - 0.5f)), -89f, 89f);
				}
				else if (this.targetScreenPos.y < 0.35f)
				{
					this.cameraUp = Mathf.Clamp(Mathf.Lerp(this.cameraUp, this.cameraUp + 25f, 25f * num * Mathf.Abs(this.targetScreenPos.y - 0.5f)), -89f, 89f);
				}
				this.gameplayCamera.transform.localEulerAngles = new Vector3(this.cameraUp, this.gameplayCamera.transform.localEulerAngles.y, this.gameplayCamera.transform.localEulerAngles.z);
				Vector3 zero = Vector3.zero;
				zero.y = this.turnCompass.eulerAngles.y;
				this.thisPlayerBody.rotation = Quaternion.Lerp(this.thisPlayerBody.rotation, Quaternion.Euler(zero), Time.deltaTime * 20f * (1f - Mathf.Abs(this.shockMinigamePullPosition)));
			}
		}

		// Token: 0x06000FEC RID: 4076 RVA: 0x00087A20 File Offset: 0x00085C20
		private void LookWhileClimbingLadder(Vector2 lookInput)
		{
			lookInput *= 2f;
			this.ladderCameraHorizontal += lookInput.x;
			this.ladderCameraHorizontal = Mathf.Clamp(this.ladderCameraHorizontal, -60f, 60f);
			this.cameraUp -= lookInput.y;
			this.cameraUp = Mathf.Clamp(this.cameraUp, -60f, 25f);
			this.gameplayCamera.transform.localEulerAngles = new Vector3(this.cameraUp, this.ladderCameraHorizontal, this.gameplayCamera.transform.localEulerAngles.z);
		}

		// Token: 0x06000FED RID: 4077 RVA: 0x00087ACC File Offset: 0x00085CCC
		private void Crouch_performed(InputAction.CallbackContext context)
		{
			if (!context.performed)
			{
				return;
			}
			if (this.quickMenuManager.isMenuOpen)
			{
				return;
			}
			if ((!base.IsOwner || !this.isPlayerControlled || (base.IsServer && !this.isHostPlayerObject)) && !this.isTestingPlayer)
			{
				return;
			}
			if (this.inSpecialInteractAnimation || !this.thisController.isGrounded || this.isTypingChat)
			{
				return;
			}
			if (this.isJumping)
			{
				return;
			}
			this.Crouch(!this.isCrouching);
		}

		// Token: 0x06000FEE RID: 4078 RVA: 0x00087B50 File Offset: 0x00085D50
		public void Crouch(bool crouch)
		{
			if (!crouch)
			{
				if (!Physics.Raycast(this.gameplayCamera.transform.position, Vector3.up, out this.hit, 0.8f, this.playersManager.collidersAndRoomMask, QueryTriggerInteraction.Ignore))
				{
					this.isCrouching = false;
					StartOfRound.Instance.timeAtMakingLastPersonalMovement = Time.realtimeSinceStartup;
					this.playerBodyAnimator.SetBool("crouching", false);
				}
				return;
			}
			if (this.sourcesCausingSinking > 0 && this.sinkingValue > 0.6f)
			{
				return;
			}
			this.isCrouching = true;
			StartOfRound.Instance.timeAtMakingLastPersonalMovement = Time.realtimeSinceStartup;
			this.playerBodyAnimator.SetTrigger("startCrouching");
			this.playerBodyAnimator.SetBool("crouching", true);
		}

		// Token: 0x06000FEF RID: 4079 RVA: 0x00087C0C File Offset: 0x00085E0C
		[ServerRpc]
		private void UpdatePlayerRotationServerRpc(short newRot, short newYRot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(588787670U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, newRot);
				BytePacker.WriteValueBitPacked(writer, newYRot);
				base.__endSendServerRpc(ref writer, 588787670U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			try
			{
				this.UpdatePlayerRotationClientRpc(newRot, newYRot);
			}
			catch (Exception arg)
			{
				Debug.Log(string.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", arg));
			}
		}

		// Token: 0x06000FF0 RID: 4080 RVA: 0x00087D64 File Offset: 0x00085F64
		[ClientRpc]
		private void UpdatePlayerRotationClientRpc(short newRot, short newYRot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(2188611472U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, newRot);
				BytePacker.WriteValueBitPacked(writer, newYRot);
				base.__endSendClientRpc(ref writer, 2188611472U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.playersManager.gameStats.allPlayerStats[(int)(checked((IntPtr)this.playerClientId))].turnAmount++;
			if (base.IsOwner)
			{
				return;
			}
			this.targetYRot = (float)newYRot;
			this.targetLookRot = (float)newRot;
		}

		// Token: 0x06000FF1 RID: 4081 RVA: 0x00087E84 File Offset: 0x00086084
		[ServerRpc]
		private void UpdatePlayerRotationFullServerRpc(Vector3 playerEulers)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3789403418U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe(playerEulers);
				base.__endSendServerRpc(ref fastBufferWriter, 3789403418U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			try
			{
				this.UpdatePlayerRotationFullClientRpc(playerEulers);
			}
			catch (Exception arg)
			{
				Debug.Log(string.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", arg));
			}
		}

		// Token: 0x06000FF2 RID: 4082 RVA: 0x00087FCC File Offset: 0x000861CC
		[ClientRpc]
		private void UpdatePlayerRotationFullClientRpc(Vector3 playerEulers)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2444895710U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe(playerEulers);
				base.__endSendClientRpc(ref fastBufferWriter, 2444895710U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.syncFullRotation = playerEulers;
		}

		// Token: 0x06000FF3 RID: 4083 RVA: 0x000880B4 File Offset: 0x000862B4
		private void UpdatePlayerAnimationsToOtherClients(Vector2 moveInputVector)
		{
			this.updatePlayerAnimationsInterval += Time.deltaTime;
			if (this.inSpecialInteractAnimation || this.updatePlayerAnimationsInterval > 0.14f)
			{
				this.updatePlayerAnimationsInterval = 0f;
				this.currentAnimationSpeed = this.playerBodyAnimator.GetFloat("animationSpeed");
				for (int i = 0; i < this.playerBodyAnimator.layerCount; i++)
				{
					this.currentAnimationStateHash[i] = this.playerBodyAnimator.GetCurrentAnimatorStateInfo(i).fullPathHash;
					if (this.previousAnimationStateHash[i] != this.currentAnimationStateHash[i])
					{
						this.previousAnimationStateHash[i] = this.currentAnimationStateHash[i];
						this.previousAnimationSpeed = this.currentAnimationSpeed;
						this.UpdatePlayerAnimationServerRpc(this.currentAnimationStateHash[i], this.currentAnimationSpeed);
						return;
					}
				}
				if (this.previousAnimationSpeed != this.currentAnimationSpeed)
				{
					this.previousAnimationSpeed = this.currentAnimationSpeed;
					this.UpdatePlayerAnimationServerRpc(0, this.currentAnimationSpeed);
				}
			}
		}

		// Token: 0x06000FF4 RID: 4084 RVA: 0x000881C4 File Offset: 0x000863C4
		[ServerRpc]
		private void UpdatePlayerAnimationServerRpc(int animationState, float animationSpeed)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(3473255830U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, animationState);
				writer.WriteValueSafe<float>(animationSpeed, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref writer, 3473255830U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			try
			{
				this.UpdatePlayerAnimationClientRpc(animationState, animationSpeed);
			}
			catch (Exception arg)
			{
				Debug.Log(string.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", arg));
			}
		}

		// Token: 0x06000FF5 RID: 4085 RVA: 0x00088328 File Offset: 0x00086528
		[ClientRpc]
		private void UpdatePlayerAnimationClientRpc(int animationState, float animationSpeed)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(3386813972U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, animationState);
				writer.WriteValueSafe<float>(animationSpeed, default(FastBufferWriter.ForPrimitives));
				base.__endSendClientRpc(ref writer, 3386813972U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			if (this.playerBodyAnimator.GetFloat("animationSpeed") != animationSpeed)
			{
				this.playerBodyAnimator.SetFloat("animationSpeed", animationSpeed);
			}
			if (animationState != 0 && this.playerBodyAnimator.GetCurrentAnimatorStateInfo(0).fullPathHash != animationState)
			{
				for (int i = 0; i < this.playerBodyAnimator.layerCount; i++)
				{
					if (this.playerBodyAnimator.HasState(i, animationState))
					{
						this.playerBodyAnimator.CrossFadeInFixedTime(animationState, 0.1f);
						return;
					}
				}
			}
		}

		// Token: 0x06000FF6 RID: 4086 RVA: 0x00088496 File Offset: 0x00086696
		public void UpdateSpecialAnimationValue(bool specialAnimation, short yVal = 0, float timed = 0f, bool climbingLadder = false)
		{
			this.IsInSpecialAnimationServerRpc(specialAnimation, timed, climbingLadder);
			this.ResetZAndXRotation();
			if (specialAnimation)
			{
				this.UpdatePlayerRotationServerRpc(0, yVal);
			}
		}

		// Token: 0x06000FF7 RID: 4087 RVA: 0x000884B4 File Offset: 0x000866B4
		public void ResetZAndXRotation()
		{
			Vector3 localEulerAngles = this.thisPlayerBody.localEulerAngles;
			localEulerAngles.x = 0f;
			localEulerAngles.z = 0f;
			this.thisPlayerBody.localEulerAngles = localEulerAngles;
		}

		// Token: 0x06000FF8 RID: 4088 RVA: 0x000884F4 File Offset: 0x000866F4
		[ServerRpc]
		private void IsInSpecialAnimationServerRpc(bool specialAnimation, float timed = 0f, bool climbingLadder = false)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(2480354441U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(specialAnimation, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<float>(timed, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(climbingLadder, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref fastBufferWriter, 2480354441U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			try
			{
				this.IsInSpecialAnimationClientRpc(specialAnimation, timed, climbingLadder);
			}
			catch (Exception arg)
			{
				Debug.Log(string.Format("Client rpc parameters were likely not correct, so an RPC was skipped: {0}", arg));
			}
		}

		// Token: 0x06000FF9 RID: 4089 RVA: 0x00088684 File Offset: 0x00086884
		[ClientRpc]
		private void IsInSpecialAnimationClientRpc(bool specialAnimation, float timed = 0f, bool climbingLadder = false)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(2281795056U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(specialAnimation, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<float>(timed, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(climbingLadder, default(FastBufferWriter.ForPrimitives));
				base.__endSendClientRpc(ref fastBufferWriter, 2281795056U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			Debug.Log("Setting animation on client");
			this.inSpecialInteractAnimation = specialAnimation;
			this.isClimbingLadder = climbingLadder;
			if (!specialAnimation && !climbingLadder)
			{
				this.ResetZAndXRotation();
			}
			if (timed > 0f)
			{
				if (this.timeSpecialAnimationCoroutine != null)
				{
					base.StopCoroutine(this.timeSpecialAnimationCoroutine);
				}
				this.timeSpecialAnimationCoroutine = base.StartCoroutine(this.timeSpecialAnimation(timed));
			}
		}

		// Token: 0x06000FFA RID: 4090 RVA: 0x000887F9 File Offset: 0x000869F9
		private IEnumerator timeSpecialAnimation(float time)
		{
			yield return new WaitForSeconds(time);
			this.inSpecialInteractAnimation = false;
			this.timeSpecialAnimationCoroutine = null;
			yield break;
		}

		// Token: 0x06000FFB RID: 4091 RVA: 0x00088810 File Offset: 0x00086A10
		public void GetCurrentMaterialStandingOn()
		{
			this.interactRay = new Ray(this.thisPlayerBody.position + Vector3.up, -Vector3.up);
			if (Physics.Raycast(this.interactRay, out this.hit, 6f, StartOfRound.Instance.walkableSurfacesMask, QueryTriggerInteraction.Ignore) && !this.hit.collider.CompareTag(StartOfRound.Instance.footstepSurfaces[this.currentFootstepSurfaceIndex].surfaceTag))
			{
				for (int i = 0; i < StartOfRound.Instance.footstepSurfaces.Length; i++)
				{
					if (this.hit.collider.CompareTag(StartOfRound.Instance.footstepSurfaces[i].surfaceTag))
					{
						this.currentFootstepSurfaceIndex = i;
						return;
					}
				}
			}
		}

		// Token: 0x06000FFC RID: 4092 RVA: 0x000888D4 File Offset: 0x00086AD4
		public void PlayFootstepSound()
		{
			this.GetCurrentMaterialStandingOn();
			int num = Random.Range(0, StartOfRound.Instance.footstepSurfaces[this.currentFootstepSurfaceIndex].clips.Length);
			if (num == this.previousFootstepClip)
			{
				num = (num + 1) % StartOfRound.Instance.footstepSurfaces[this.currentFootstepSurfaceIndex].clips.Length;
			}
			this.movementAudio.pitch = Random.Range(0.93f, 1.07f);
			bool flag;
			if (base.IsOwner)
			{
				flag = this.isSprinting;
			}
			else
			{
				flag = this.playerBodyAnimator.GetCurrentAnimatorStateInfo(0).IsTag("Sprinting");
			}
			float num2 = 0.9f;
			if (!flag)
			{
				num2 = 0.6f;
			}
			this.movementAudio.PlayOneShot(StartOfRound.Instance.footstepSurfaces[this.currentFootstepSurfaceIndex].clips[num], num2);
			this.previousFootstepClip = num;
			WalkieTalkie.TransmitOneShotAudio(this.movementAudio, StartOfRound.Instance.footstepSurfaces[this.currentFootstepSurfaceIndex].clips[num], num2);
		}

		// Token: 0x06000FFD RID: 4093 RVA: 0x000889D0 File Offset: 0x00086BD0
		public void PlayFootstepServer()
		{
			if (this.isClimbingLadder || this.inSpecialInteractAnimation)
			{
				return;
			}
			if (!base.IsOwner && this.isPlayerControlled)
			{
				bool noiseIsInsideClosedShip = this.isInHangarShipRoom && this.playersManager.hangarDoorsClosed;
				if (this.isSprinting)
				{
					RoundManager.Instance.PlayAudibleNoise(base.transform.position, 22f, 0.6f, 0, noiseIsInsideClosedShip, 7);
				}
				else
				{
					RoundManager.Instance.PlayAudibleNoise(base.transform.position, 17f, 0.4f, 0, noiseIsInsideClosedShip, 7);
				}
				this.PlayFootstepSound();
			}
		}

		// Token: 0x06000FFE RID: 4094 RVA: 0x00088A6C File Offset: 0x00086C6C
		public void PlayFootstepLocal()
		{
			if (this.isClimbingLadder || this.inSpecialInteractAnimation)
			{
				return;
			}
			if (this.isTestingPlayer || (base.IsOwner && this.isPlayerControlled))
			{
				bool noiseIsInsideClosedShip = this.isInHangarShipRoom && this.playersManager.hangarDoorsClosed;
				if (this.isSprinting)
				{
					RoundManager.Instance.PlayAudibleNoise(base.transform.position, 22f, 0.6f, 0, noiseIsInsideClosedShip, 6);
				}
				else
				{
					RoundManager.Instance.PlayAudibleNoise(base.transform.position, 17f, 0.4f, 0, noiseIsInsideClosedShip, 6);
				}
				this.PlayFootstepSound();
			}
		}

		// Token: 0x06000FFF RID: 4095 RVA: 0x00088B10 File Offset: 0x00086D10
		[ServerRpc]
		private void UpdatePlayerPositionServerRpc(Vector3 newPos, bool inElevator, bool exhausted, bool isPlayerGrounded)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(2581007949U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe(newPos);
				fastBufferWriter.WriteValueSafe<bool>(inElevator, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(exhausted, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(isPlayerGrounded, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref fastBufferWriter, 2581007949U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			try
			{
				this.UpdatePlayerPositionClientRpc(newPos, inElevator, exhausted, isPlayerGrounded);
			}
			catch (Exception arg)
			{
				Debug.Log(string.Format("Caught an error when sending player position RPC; likely a player disconnected to cause this. Error: {0}", arg));
			}
		}

		// Token: 0x06001000 RID: 4096 RVA: 0x00088CAC File Offset: 0x00086EAC
		[ClientRpc]
		private void UpdatePlayerPositionClientRpc(Vector3 newPos, bool inElevator, bool exhausted, bool isPlayerGrounded)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(153310197U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe(newPos);
				fastBufferWriter.WriteValueSafe<bool>(inElevator, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(exhausted, default(FastBufferWriter.ForPrimitives));
				fastBufferWriter.WriteValueSafe<bool>(isPlayerGrounded, default(FastBufferWriter.ForPrimitives));
				base.__endSendClientRpc(ref fastBufferWriter, 153310197U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			this.playersManager.gameStats.allPlayerStats[(int)(checked((IntPtr)this.playerClientId))].stepsTaken++;
			this.playersManager.gameStats.allStepsTaken++;
			bool flag = this.currentFootstepSurfaceIndex == 8 && ((base.IsOwner && this.thisController.isGrounded) || isPlayerGrounded);
			if (this.bleedingHeavily || flag)
			{
				this.DropBlood(Vector3.down, this.bleedingHeavily, flag);
			}
			if (base.IsOwner)
			{
				return;
			}
			if (!inElevator)
			{
				this.isInHangarShipRoom = false;
			}
			this.isExhausted = exhausted;
			this.isInElevator = inElevator;
			this.oldPlayerPosition = this.serverPlayerPosition;
			if (!this.disableSyncInAnimation)
			{
				this.serverPlayerPosition = newPos;
			}
			if (this.isInElevator)
			{
				if (!this.wasInElevatorLastFrame)
				{
					this.wasInElevatorLastFrame = true;
					base.transform.SetParent(this.playersManager.elevatorTransform);
				}
			}
			else if (this.wasInElevatorLastFrame)
			{
				this.wasInElevatorLastFrame = false;
				base.transform.SetParent(this.playersManager.playersContainer);
				base.transform.eulerAngles = new Vector3(0f, base.transform.eulerAngles.y, 0f);
			}
			this.timeSincePlayerMoving = 0f;
		}

		// Token: 0x06001001 RID: 4097 RVA: 0x00088F18 File Offset: 0x00087118
		[ServerRpc]
		public void LandFromJumpServerRpc(bool fallHard)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3332990272U, serverRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(fallHard, default(FastBufferWriter.ForPrimitives));
				base.__endSendServerRpc(ref fastBufferWriter, 3332990272U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.LandFromJumpClientRpc(fallHard);
		}

		// Token: 0x06001002 RID: 4098 RVA: 0x00089048 File Offset: 0x00087248
		[ClientRpc]
		public void LandFromJumpClientRpc(bool fallHard)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(983565270U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe<bool>(fallHard, default(FastBufferWriter.ForPrimitives));
				base.__endSendClientRpc(ref fastBufferWriter, 983565270U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			if (fallHard)
			{
				this.movementAudio.PlayOneShot(StartOfRound.Instance.playerHitGroundHard, 1f);
				return;
			}
			this.movementAudio.PlayOneShot(StartOfRound.Instance.playerHitGroundSoft, 0.7f);
		}

		// Token: 0x06001003 RID: 4099 RVA: 0x0008916C File Offset: 0x0008736C
		public void LimpAnimationSpeed()
		{
			if (base.IsOwner)
			{
				this.limpMultiplier = 0.75f;
			}
		}

		// Token: 0x06001004 RID: 4100 RVA: 0x00089184 File Offset: 0x00087384
		public void SpawnPlayerAnimation()
		{
			this.UpdateSpecialAnimationValue(true, 0, 0f, false);
			this.inSpecialInteractAnimation = true;
			this.playerBodyAnimator.ResetTrigger("SpawnPlayer");
			this.playerBodyAnimator.SetTrigger("SpawnPlayer");
			base.StartCoroutine(this.spawnPlayerAnimTimer());
		}

		// Token: 0x06001005 RID: 4101 RVA: 0x000891D3 File Offset: 0x000873D3
		private IEnumerator spawnPlayerAnimTimer()
		{
			yield return new WaitForSeconds(3f);
			this.inSpecialInteractAnimation = false;
			this.UpdateSpecialAnimationValue(false, 0, 0f, false);
			yield break;
		}

		// Token: 0x06001006 RID: 4102 RVA: 0x000891E4 File Offset: 0x000873E4
		[ServerRpc(RequireOwnership = false)]
		private void SendNewPlayerValuesServerRpc(ulong newPlayerSteamId)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(2504133785U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, newPlayerSteamId);
				base.__endSendServerRpc(ref writer, 2504133785U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			if (!GameNetworkManager.Instance.disableSteam && GameNetworkManager.Instance.currentLobby != null)
			{
				if (!GameNetworkManager.Instance.steamIdsInLobby.Contains(newPlayerSteamId))
				{
					NetworkManager.Singleton.DisconnectClient(this.actualClientId);
					return;
				}
				if (StartOfRound.Instance.KickedClientIds.Contains(newPlayerSteamId))
				{
					NetworkManager.Singleton.DisconnectClient(this.actualClientId);
					return;
				}
			}
			List<ulong> list = new List<ulong>();
			for (int i = 0; i < 4; i++)
			{
				if (i == (int)this.playerClientId)
				{
					list.Add(newPlayerSteamId);
				}
				else
				{
					list.Add(this.playersManager.allPlayerScripts[i].playerSteamId);
				}
			}
			this.SendNewPlayerValuesClientRpc(list.ToArray());
		}

		// Token: 0x06001007 RID: 4103 RVA: 0x00089370 File Offset: 0x00087570
		[ClientRpc]
		private void SendNewPlayerValuesClientRpc(ulong[] playerSteamIds)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(956616685U, clientRpcParams, RpcDelivery.Reliable);
				bool flag = playerSteamIds != null;
				fastBufferWriter.WriteValueSafe<bool>(flag, default(FastBufferWriter.ForPrimitives));
				if (flag)
				{
					fastBufferWriter.WriteValueSafe<ulong>(playerSteamIds, default(FastBufferWriter.ForPrimitives));
				}
				base.__endSendClientRpc(ref fastBufferWriter, 956616685U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			for (int i = 0; i < playerSteamIds.Length; i++)
			{
				if (this.playersManager.allPlayerScripts[i].isPlayerControlled || this.playersManager.allPlayerScripts[i].isPlayerDead)
				{
					Friend friend = new Friend(playerSteamIds[i]);
					string text = this.NoPunctuation(friend.Name);
					text = Regex.Replace(text, "[^\\w\\._]", "");
					if (text == string.Empty || text.Length == 0)
					{
						text = "Nameless";
					}
					else if (text.Length <= 2)
					{
						text += "0";
					}
					this.playersManager.allPlayerScripts[i].playerSteamId = playerSteamIds[i];
					this.playersManager.allPlayerScripts[i].playerUsername = text;
					this.playersManager.allPlayerScripts[i].usernameBillboardText.text = text;
					string text2 = text;
					int numberOfDuplicateNamesInLobby = this.GetNumberOfDuplicateNamesInLobby();
					if (numberOfDuplicateNamesInLobby > 0)
					{
						text2 = string.Format("{0}{1}", text, numberOfDuplicateNamesInLobby);
					}
					this.quickMenuManager.AddUserToPlayerList(playerSteamIds[i], text2, i);
					StartOfRound.Instance.mapScreen.radarTargets[i].name = text2;
				}
			}
			StartOfRound.Instance.StartTrackingAllPlayerVoices();
			if (GameNetworkManager.Instance != null && GameNetworkManager.Instance.localPlayerController != null)
			{
				GameNetworkManager.Instance.localPlayerController.updatePositionForNewlyJoinedClient = true;
			}
		}

		// Token: 0x06001008 RID: 4104 RVA: 0x000895E8 File Offset: 0x000877E8
		private int GetNumberOfDuplicateNamesInLobby()
		{
			int num = 0;
			for (int i = 0; i < StartOfRound.Instance.allPlayerScripts.Length; i++)
			{
				if ((StartOfRound.Instance.allPlayerScripts[i].isPlayerControlled || this.playersManager.allPlayerScripts[i].isPlayerDead) && !(StartOfRound.Instance.allPlayerScripts[i] == this) && StartOfRound.Instance.allPlayerScripts[i].playerUsername == this.playerUsername)
				{
					num++;
				}
			}
			for (int j = 0; j < StartOfRound.Instance.allPlayerScripts.Length; j++)
			{
				if ((StartOfRound.Instance.allPlayerScripts[j].isPlayerControlled || this.playersManager.allPlayerScripts[j].isPlayerDead) && !(StartOfRound.Instance.allPlayerScripts[j] == this) && StartOfRound.Instance.allPlayerScripts[j].playerUsername == string.Format("{0}{1}", StartOfRound.Instance.allPlayerScripts[j].playerUsername, num))
				{
					num++;
				}
			}
			return num;
		}

		// Token: 0x06001009 RID: 4105 RVA: 0x000896FE File Offset: 0x000878FE
		private string NoPunctuation(string input)
		{
			return new string((from c in input
			where char.IsLetter(c)
			select c).ToArray<char>());
		}

		// Token: 0x0600100A RID: 4106 RVA: 0x00089730 File Offset: 0x00087930
		public void ConnectClientToPlayerObject()
		{
			if (!this.isTestingPlayer)
			{
				this.actualClientId = NetworkManager.Singleton.LocalClientId;
				this.playersManager.thisClientPlayerId = (int)this.playerClientId;
			}
			if (GameNetworkManager.Instance != null)
			{
				GameNetworkManager.Instance.localPlayerController = this;
			}
			this.playersManager.localPlayerController = this;
			for (int i = 0; i < this.playersManager.allPlayerObjects.Length; i++)
			{
				PlayerControllerB component = this.playersManager.allPlayerObjects[i].GetComponent<PlayerControllerB>();
				if (!component.isPlayerControlled && !component.isTestingPlayer)
				{
					component.TeleportPlayer(this.playersManager.notSpawnedPosition.position, false, 0f, false, true);
				}
				if (component != this.playersManager.localPlayerController)
				{
					this.playersManager.OtherClients.Add(component);
				}
			}
			this.playersManager.localClientHasControl = true;
			if (this.playerBodyAnimator.runtimeAnimatorController != this.playersManager.localClientAnimatorController)
			{
				this.playerBodyAnimator.runtimeAnimatorController = this.playersManager.localClientAnimatorController;
			}
			if (!this.isTestingPlayer)
			{
				if (!GameNetworkManager.Instance.disableSteam)
				{
					this.playerUsername = GameNetworkManager.Instance.username;
					this.SendNewPlayerValuesServerRpc(SteamClient.SteamId);
				}
				else if (base.IsServer)
				{
					Object.FindObjectOfType<QuickMenuManager>().AddUserToPlayerList(0UL, "Player #0", 0);
				}
				HUDManager.Instance.AddTextToChatOnServer(this.playerUsername + " joined the ship.", -1);
				this.usernameAlpha.alpha = 0f;
				this.usernameBillboardText.enabled = false;
			}
		}

		// Token: 0x0600100B RID: 4107 RVA: 0x000898D0 File Offset: 0x00087AD0
		private void ChangeAudioListenerToObject(GameObject addToObject)
		{
			this.activeAudioListener.transform.SetParent(addToObject.transform);
			this.activeAudioListener.transform.localEulerAngles = Vector3.zero;
			this.activeAudioListener.transform.localPosition = Vector3.zero;
			StartOfRound.Instance.audioListener = this.activeAudioListener;
		}

		// Token: 0x0600100C RID: 4108 RVA: 0x00089930 File Offset: 0x00087B30
		private void PlayerHitGroundEffects()
		{
			this.GetCurrentMaterialStandingOn();
			if (this.fallValue < -9f)
			{
				if (this.fallValue < -16f)
				{
					this.movementAudio.PlayOneShot(StartOfRound.Instance.playerHitGroundHard, 1f);
					WalkieTalkie.TransmitOneShotAudio(this.movementAudio, StartOfRound.Instance.playerHitGroundHard, 1f);
				}
				else if (this.fallValue < -2f)
				{
					this.movementAudio.PlayOneShot(StartOfRound.Instance.playerHitGroundSoft, 1f);
				}
				this.LandFromJumpServerRpc(this.fallValue < -16f);
			}
			if (this.takingFallDamage && !this.jetpackControls && !this.disablingJetpackControls && !this.isSpeedCheating)
			{
				if (this.fallValueUncapped < -50f)
				{
					this.DamagePlayer(100, true, true, CauseOfDeath.Gravity, 0, false, default(Vector3));
				}
				else
				{
					this.DamagePlayer(40, true, true, CauseOfDeath.Gravity, 0, false, default(Vector3));
				}
			}
			if (this.fallValue < -16f)
			{
				RoundManager.Instance.PlayAudibleNoise(base.transform.position, 7f, 0.5f, 0, false, 0);
			}
		}

		// Token: 0x0600100D RID: 4109 RVA: 0x00089A58 File Offset: 0x00087C58
		private void CalculateGroundNormal()
		{
			if (Physics.Raycast(base.transform.position + Vector3.up * 0.2f, -Vector3.up, out this.hit, 6f, 268438273, QueryTriggerInteraction.Ignore))
			{
				this.playerGroundNormal = this.hit.normal;
				return;
			}
			this.playerGroundNormal = Vector3.up;
		}

		// Token: 0x0600100E RID: 4110 RVA: 0x00089AC3 File Offset: 0x00087CC3
		private bool IsPlayerNearGround()
		{
			this.interactRay = new Ray(base.transform.position, Vector3.down);
			return Physics.Raycast(this.interactRay, 0.15f, StartOfRound.Instance.allPlayersCollideWithMask, QueryTriggerInteraction.Ignore);
		}

		// Token: 0x0600100F RID: 4111 RVA: 0x00089AFC File Offset: 0x00087CFC
		[ServerRpc]
		public void DisableJetpackModeServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3237016509U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 3237016509U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.DisableJetpackModeClientRpc();
		}

		// Token: 0x06001010 RID: 4112 RVA: 0x00089C10 File Offset: 0x00087E10
		[ClientRpc]
		public void DisableJetpackModeClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(1367193869U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 1367193869U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.DisableJetpackControlsLocally();
		}

		// Token: 0x06001011 RID: 4113 RVA: 0x00089CE7 File Offset: 0x00087EE7
		public void DisableJetpackControlsLocally()
		{
			this.jetpackControls = false;
			this.thisController.radius = 0.4f;
			this.jetpackTurnCompass.rotation = base.transform.rotation;
			this.startedJetpackControls = false;
			this.disablingJetpackControls = false;
		}

		// Token: 0x06001012 RID: 4114 RVA: 0x00089D24 File Offset: 0x00087F24
		private void Update()
		{
			if ((base.IsOwner && this.isPlayerControlled && (!base.IsServer || this.isHostPlayerObject)) || this.isTestingPlayer)
			{
				if (this.isCameraDisabled)
				{
					this.isCameraDisabled = false;
					Debug.Log("Taking control of player " + base.gameObject.name + " and enabling camera!");
					StartOfRound.Instance.SwitchCamera(this.gameplayCamera);
					this.thisPlayerModel.shadowCastingMode = ShadowCastingMode.ShadowsOnly;
					this.mapRadarDirectionIndicator.enabled = true;
					this.thisPlayerModelArms.enabled = true;
					this.playerScreen.enabled = true;
					Cursor.lockState = CursorLockMode.Locked;
					Cursor.visible = false;
					base.gameObject.GetComponent<CharacterController>().enabled = true;
					this.activeAudioReverbFilter = this.activeAudioListener.GetComponent<AudioReverbFilter>();
					this.activeAudioReverbFilter.enabled = true;
					this.ChangeAudioListenerToObject(this.gameplayCamera.gameObject);
					if (this.playerBodyAnimator.runtimeAnimatorController != this.playersManager.localClientAnimatorController)
					{
						this.playerBodyAnimator.runtimeAnimatorController = this.playersManager.localClientAnimatorController;
					}
					if (this.justConnected)
					{
						this.justConnected = false;
						this.ConnectClientToPlayerObject();
					}
					this.SpawnPlayerAnimation();
					Debug.Log("!!!! ENABLING CAMERA FOR PLAYER: " + base.gameObject.name);
					Debug.Log(string.Format("!!!! connectedPlayersAmount: {0}", this.playersManager.connectedPlayersAmount));
				}
				this.playerHudUIContainer.rotation = Quaternion.Lerp(this.playerHudUIContainer.rotation, this.playerHudBaseRotation.rotation, 24f * Time.deltaTime);
				this.SetNightVisionEnabled(false);
				if (!this.inSpecialInteractAnimation || this.inShockingMinigame)
				{
					if (!this.thisController.isGrounded)
					{
						if (this.jetpackControls && !this.disablingJetpackControls)
						{
							this.fallValue = Mathf.MoveTowards(this.fallValue, -8f, 7f * Time.deltaTime);
							this.fallValueUncapped = -8f;
						}
						else
						{
							this.fallValue = Mathf.Clamp(this.fallValue - 38f * Time.deltaTime, -150f, this.jumpForce);
							this.fallValueUncapped -= 38f * Time.deltaTime;
						}
						if (!this.isJumping && !this.isFallingFromJump)
						{
							if (!this.isFallingNoJump)
							{
								this.isFallingNoJump = true;
								this.fallValue = -7f;
							}
							else if (this.fallValue < -20f)
							{
								this.isCrouching = false;
								this.playerBodyAnimator.SetBool("crouching", false);
								this.playerBodyAnimator.SetBool("FallNoJump", true);
							}
						}
						if (this.fallValueUncapped < -40f)
						{
							this.takingFallDamage = true;
						}
					}
					else
					{
						this.movementHinderedPrev = this.isMovementHindered;
						if (!this.isJumping)
						{
							if (this.isFallingNoJump && !this.jetpackControls)
							{
								this.isFallingNoJump = false;
								if (!this.isCrouching && this.fallValue < -9f)
								{
									this.playerBodyAnimator.SetTrigger("ShortFallLanding");
								}
								this.PlayerHitGroundEffects();
							}
							this.fallValue = -7f;
							this.fallValueUncapped = -7f;
						}
						this.playerBodyAnimator.SetBool("FallNoJump", false);
					}
				}
				this.ForceTurnTowardsTarget();
				if (this.inTerminalMenu)
				{
					this.targetFOV = 60f;
				}
				else if (this.IsInspectingItem)
				{
					this.rightArmProceduralRig.weight = Mathf.Lerp(this.rightArmProceduralRig.weight, 1f, 25f * Time.deltaTime);
					this.targetFOV = 46f;
				}
				else
				{
					this.rightArmProceduralRig.weight = Mathf.Lerp(this.rightArmProceduralRig.weight, 0f, 25f * Time.deltaTime);
					if (this.isSprinting)
					{
						this.targetFOV = 68f;
					}
					else
					{
						this.targetFOV = 66f;
					}
				}
				this.gameplayCamera.fieldOfView = Mathf.Lerp(this.gameplayCamera.fieldOfView, this.targetFOV, 6f * Time.deltaTime);
				this.moveInputVector = IngamePlayerSettings.Instance.playerInput.actions.FindAction("Move", false).ReadValue<Vector2>();
				float num = IngamePlayerSettings.Instance.playerInput.actions.FindAction("Sprint", false).ReadValue<float>();
				if (this.quickMenuManager.isMenuOpen || this.isTypingChat || (this.inSpecialInteractAnimation && !this.isClimbingLadder && !this.inShockingMinigame))
				{
					this.moveInputVector = Vector2.zero;
				}
				this.SetFaceUnderwaterFilters();
				if (this.isWalking)
				{
					if (this.isFreeCamera || this.moveInputVector.sqrMagnitude <= 0.19f || (this.inSpecialInteractAnimation && !this.isClimbingLadder && !this.inShockingMinigame))
					{
						this.isWalking = false;
						this.isSprinting = false;
						this.playerBodyAnimator.SetBool("Walking", false);
						this.playerBodyAnimator.SetBool("Sprinting", false);
						this.playerBodyAnimator.SetBool("Sideways", false);
					}
					else if (num > 0.3f && this.movementHinderedPrev <= 0 && !this.criticallyInjured && this.sprintMeter > 0.1f)
					{
						if (!this.isSprinting && this.sprintMeter < 0.3f)
						{
							if (!this.isExhausted)
							{
								this.isExhausted = true;
							}
						}
						else
						{
							if (this.isCrouching)
							{
								this.Crouch(false);
							}
							this.isSprinting = true;
							this.playerBodyAnimator.SetBool("Sprinting", true);
						}
					}
					else
					{
						this.isSprinting = false;
						if (this.sprintMeter < 0.1f)
						{
							this.isExhausted = true;
						}
						this.playerBodyAnimator.SetBool("Sprinting", false);
					}
					if (this.isSprinting)
					{
						this.sprintMultiplier = Mathf.Lerp(this.sprintMultiplier, 2.25f, Time.deltaTime * 1f);
					}
					else
					{
						this.sprintMultiplier = Mathf.Lerp(this.sprintMultiplier, 1f, 10f * Time.deltaTime);
					}
					if (this.moveInputVector.y < 0.2f && this.moveInputVector.y > -0.2f && !this.inSpecialInteractAnimation)
					{
						this.playerBodyAnimator.SetBool("Sideways", true);
						this.isSidling = true;
					}
					else
					{
						this.playerBodyAnimator.SetBool("Sideways", false);
						this.isSidling = false;
					}
					if (this.enteringSpecialAnimation)
					{
						this.playerBodyAnimator.SetFloat("animationSpeed", 1f);
					}
					else if (this.moveInputVector.y < 0.5f && this.moveInputVector.x < 0.5f)
					{
						this.playerBodyAnimator.SetFloat("animationSpeed", -1f);
						this.movingForward = false;
					}
					else
					{
						this.playerBodyAnimator.SetFloat("animationSpeed", 1f);
						this.movingForward = true;
					}
				}
				else
				{
					if (this.enteringSpecialAnimation)
					{
						this.playerBodyAnimator.SetFloat("animationSpeed", 1f);
					}
					else if (this.isClimbingLadder)
					{
						this.playerBodyAnimator.SetFloat("animationSpeed", 0f);
					}
					if (!this.isFreeCamera && this.moveInputVector.sqrMagnitude >= 0.19f && (!this.inSpecialInteractAnimation || this.isClimbingLadder || this.inShockingMinigame))
					{
						this.isWalking = true;
						this.playerBodyAnimator.SetBool("Walking", true);
					}
				}
				if (this.performingEmote && !this.CheckConditionsForEmote())
				{
					this.performingEmote = false;
					this.StopPerformingEmoteServerRpc();
					this.timeSinceStartingEmote = 0f;
				}
				this.timeSinceStartingEmote += Time.deltaTime;
				this.playerBodyAnimator.SetBool("hinderedMovement", this.isMovementHindered > 0);
				if (this.sourcesCausingSinking == 0)
				{
					if (this.isSinking)
					{
						this.isSinking = false;
						this.StopSinkingServerRpc();
					}
				}
				else
				{
					if (this.isSinking)
					{
						this.GetCurrentMaterialStandingOn();
						if (!this.CheckConditionsForSinkingInQuicksand())
						{
							this.isSinking = false;
							this.StopSinkingServerRpc();
						}
					}
					else if (!this.isSinking && this.CheckConditionsForSinkingInQuicksand())
					{
						this.isSinking = true;
						this.StartSinkingServerRpc(this.sinkingSpeedMultiplier, this.statusEffectAudioIndex);
					}
					if (this.sinkingValue >= 1f)
					{
						this.KillPlayer(Vector3.zero, false, CauseOfDeath.Suffocation, 0);
					}
					else if (this.sinkingValue > 0.5f)
					{
						this.Crouch(false);
					}
				}
				if (this.isCrouching)
				{
					this.thisController.center = Vector3.Lerp(this.thisController.center, new Vector3(this.thisController.center.x, 0.72f, this.thisController.center.z), 8f * Time.deltaTime);
					this.thisController.height = Mathf.Lerp(this.thisController.height, 1.5f, 8f * Time.deltaTime);
				}
				else
				{
					this.thisController.center = Vector3.Lerp(this.thisController.center, new Vector3(this.thisController.center.x, 1.28f, this.thisController.center.z), 8f * Time.deltaTime);
					this.thisController.height = Mathf.Lerp(this.thisController.height, 2.5f, 8f * Time.deltaTime);
				}
				if (this.isFreeCamera)
				{
					float num2 = this.movementSpeed / 1.75f;
					if (num > 0.5f)
					{
						num2 *= 5f;
					}
					Vector3 a = (this.playersManager.freeCinematicCameraTurnCompass.transform.right * this.moveInputVector.x + this.playersManager.freeCinematicCameraTurnCompass.transform.forward * this.moveInputVector.y) * num2;
					this.playersManager.freeCinematicCameraTurnCompass.transform.position += a * Time.deltaTime;
					StartOfRound.Instance.freeCinematicCamera.transform.position = Vector3.Lerp(StartOfRound.Instance.freeCinematicCamera.transform.position, StartOfRound.Instance.freeCinematicCameraTurnCompass.transform.position, 3f * Time.deltaTime);
					StartOfRound.Instance.freeCinematicCamera.transform.rotation = Quaternion.Slerp(StartOfRound.Instance.freeCinematicCamera.transform.rotation, StartOfRound.Instance.freeCinematicCameraTurnCompass.rotation, 3f * Time.deltaTime);
				}
				if (this.jetpackControls)
				{
					if (this.disablingJetpackControls && this.thisController.isGrounded)
					{
						this.DisableJetpackControlsLocally();
						this.DisableJetpackModeServerRpc();
					}
					else if (!this.thisController.isGrounded)
					{
						if (!this.startedJetpackControls)
						{
							this.startedJetpackControls = true;
							this.jetpackTurnCompass.rotation = base.transform.rotation;
						}
						this.thisController.radius = Mathf.Lerp(this.thisController.radius, 1.25f, 10f * Time.deltaTime);
						this.jetpackTurnCompass.Rotate(new Vector3(0f, 0f, -this.moveInputVector.x) * (180f * Time.deltaTime), Space.Self);
						this.jetpackTurnCompass.Rotate(new Vector3(this.moveInputVector.y, 0f, 0f) * (180f * Time.deltaTime), Space.Self);
						base.transform.rotation = Quaternion.Slerp(base.transform.rotation, this.jetpackTurnCompass.rotation, 8f * Time.deltaTime);
					}
				}
				else if (!this.isClimbingLadder)
				{
					Vector3 localEulerAngles = base.transform.localEulerAngles;
					localEulerAngles.x = Mathf.LerpAngle(localEulerAngles.x, 0f, 15f * Time.deltaTime);
					localEulerAngles.z = Mathf.LerpAngle(localEulerAngles.z, 0f, 15f * Time.deltaTime);
					base.transform.localEulerAngles = localEulerAngles;
				}
				if (!this.inSpecialInteractAnimation || this.inShockingMinigame || StartOfRound.Instance.suckingPlayersOutOfShip)
				{
					if (this.isFreeCamera)
					{
						this.moveInputVector = Vector2.zero;
					}
					this.CalculateGroundNormal();
					float num3 = this.movementSpeed / this.carryWeight;
					if (this.sinkingValue > 0.73f)
					{
						num3 = 0f;
					}
					else
					{
						if (this.isCrouching)
						{
							num3 /= 1.5f;
						}
						else if (this.criticallyInjured && !this.isCrouching)
						{
							num3 *= this.limpMultiplier;
						}
						if (this.isSpeedCheating)
						{
							num3 *= 15f;
						}
						if (this.movementHinderedPrev > 0)
						{
							num3 /= 2f * this.hinderedMultiplier;
						}
						if (this.drunkness > 0f)
						{
							num3 *= StartOfRound.Instance.drunknessSpeedEffect.Evaluate(this.drunkness) / 5f + 1f;
						}
					}
					if (this.isTypingChat || (this.jetpackControls && !this.thisController.isGrounded) || StartOfRound.Instance.suckingPlayersOutOfShip)
					{
						this.moveInputVector = Vector2.zero;
					}
					Vector3 vector = new Vector3(0f, 0f, 0f);
					int num4 = Physics.OverlapSphereNonAlloc(base.transform.position, 0.65f, this.nearByPlayers, StartOfRound.Instance.playersMask);
					for (int i = 0; i < num4; i++)
					{
						vector += Vector3.Normalize((base.transform.position - this.nearByPlayers[i].transform.position) * 100f) * 1.2f;
					}
					int num5 = Physics.OverlapSphereNonAlloc(base.transform.position, 1.25f, this.nearByPlayers, 524288);
					for (int j = 0; j < num5; j++)
					{
						EnemyAICollisionDetect component = this.nearByPlayers[j].gameObject.GetComponent<EnemyAICollisionDetect>();
						if (component != null && !component.mainScript.isEnemyDead)
						{
							vector += Vector3.Normalize((base.transform.position - this.nearByPlayers[j].transform.position) * 100f) * 0.16f;
						}
					}
					float num6;
					if (this.isFallingFromJump || this.isFallingNoJump)
					{
						num6 = 1.33f;
					}
					else if (this.drunkness > 0.3f)
					{
						num6 = Mathf.Clamp(Mathf.Abs(this.drunkness - 2.25f), 0.3f, 2.5f);
					}
					else if (this.isSprinting)
					{
						num6 = 5f / (this.carryWeight * 1.5f);
					}
					else
					{
						num6 = 10f / this.carryWeight;
					}
					this.walkForce = Vector3.MoveTowards(this.walkForce, base.transform.right * this.moveInputVector.x + base.transform.forward * this.moveInputVector.y, num6 * Time.deltaTime);
					Vector3 vector2 = this.walkForce * num3 * this.sprintMultiplier + new Vector3(0f, this.fallValue, 0f) + vector;
					vector2 += this.externalForces;
					this.externalForces = Vector3.zero;
					if (this.isPlayerSliding && this.thisController.isGrounded)
					{
						this.playerSlidingTimer += Time.deltaTime;
						if (this.slideFriction > this.maxSlideFriction)
						{
							this.slideFriction -= 35f * Time.deltaTime;
						}
						vector2 = new Vector3(vector2.x + (1f - this.playerGroundNormal.y) * this.playerGroundNormal.x * (1f - this.slideFriction), vector2.y, vector2.z + (1f - this.playerGroundNormal.y) * this.playerGroundNormal.z * (1f - this.slideFriction));
					}
					else
					{
						this.playerSlidingTimer = 0f;
						this.slideFriction = 0f;
					}
					float magnitude = this.thisController.velocity.magnitude;
					this.thisController.Move(vector2 * Time.deltaTime);
					if (!this.teleportingThisFrame && this.teleportedLastFrame)
					{
						this.teleportedLastFrame = false;
					}
					if (this.jetpackControls || this.disablingJetpackControls)
					{
						if (!this.teleportingThisFrame && !this.inSpecialInteractAnimation && !this.enteringSpecialAnimation && !this.isClimbingLadder && StartOfRound.Instance.timeSinceRoundStarted > 1f)
						{
							float magnitude2 = this.thisController.velocity.magnitude;
							if (this.getAverageVelocityInterval <= 0f)
							{
								this.getAverageVelocityInterval = 0.04f;
								this.velocityAverageCount++;
								if (this.velocityAverageCount > this.velocityMovingAverageLength)
								{
									this.averageVelocity += (magnitude2 - this.averageVelocity) / (float)(this.velocityMovingAverageLength + 1);
								}
								else
								{
									this.averageVelocity += magnitude2;
									if (this.velocityAverageCount == this.velocityMovingAverageLength)
									{
										this.averageVelocity /= (float)this.velocityAverageCount;
									}
								}
							}
							else
							{
								this.getAverageVelocityInterval -= Time.deltaTime;
							}
							float num7 = this.averageVelocity - (magnitude2 + magnitude) / 2f;
							this.minVelocityToTakeDamage = 15f;
							if (this.jetpackControls)
							{
								float num8 = Vector3.Angle(Vector3.up, base.transform.up);
								if (num8 > 65f)
								{
									this.minVelocityToTakeDamage = 10f;
								}
								else if (num8 > 47f)
								{
									this.minVelocityToTakeDamage = 12.5f;
								}
							}
							if (this.timeSinceTakingGravityDamage > 1f && num7 > this.minVelocityToTakeDamage)
							{
								if (Physics.CheckSphere(this.gameplayCamera.transform.position, 3f, StartOfRound.Instance.collidersAndRoomMaskAndDefault))
								{
									Physics.OverlapSphere(this.gameplayCamera.transform.position, 3f, StartOfRound.Instance.collidersAndRoomMaskAndDefault, QueryTriggerInteraction.Ignore);
									this.averageVelocity = 0f;
									int num9 = (int)((num7 - this.minVelocityToTakeDamage) / 6f);
									if (this.jetpackControls && (!this.disablingJetpackControls || Vector3.Angle(Vector3.up, base.transform.up) > 50f))
									{
										num9 += 40;
									}
									this.DamagePlayer(Mathf.Clamp(num9, 20, 100), true, true, CauseOfDeath.Gravity, 0, true, Vector3.ClampMagnitude(this.velocityLastFrame, 50f));
									this.timeSinceTakingGravityDamage = 0f;
								}
							}
							else
							{
								this.timeSinceTakingGravityDamage += Time.deltaTime;
							}
							this.velocityLastFrame = this.thisController.velocity;
							this.previousFrameDeltaTime = Time.deltaTime;
						}
						else
						{
							this.teleportingThisFrame = false;
						}
					}
					this.isPlayerSliding = (Vector3.Angle(Vector3.up, this.playerGroundNormal) >= this.thisController.slopeLimit);
				}
				else if (this.isClimbingLadder)
				{
					Vector3 direction = this.thisPlayerBody.up;
					Vector3 origin = this.gameplayCamera.transform.position + this.thisPlayerBody.up * 0.07f;
					if (this.moveInputVector.y < 0f)
					{
						direction = -this.thisPlayerBody.up;
						origin = base.transform.position;
					}
					if (!Physics.Raycast(origin, direction, 0.15f, StartOfRound.Instance.allPlayersCollideWithMask, QueryTriggerInteraction.Ignore))
					{
						this.thisPlayerBody.transform.position += this.thisPlayerBody.up * (this.moveInputVector.y * this.climbSpeed * Time.deltaTime);
					}
				}
				this.playerEye.position = this.gameplayCamera.transform.position;
				this.playerEye.rotation = this.gameplayCamera.transform.rotation;
				if ((NetworkManager.Singleton != null && !base.IsServer) || (!this.isTestingPlayer && this.playersManager.connectedPlayersAmount > 0) || this.oldConnectedPlayersAmount >= 1)
				{
					this.updatePlayerLookInterval += Time.deltaTime;
					this.UpdatePlayerAnimationsToOtherClients(this.moveInputVector);
				}
				this.ClickHoldInteraction();
			}
			else
			{
				if (!this.isCameraDisabled)
				{
					this.isCameraDisabled = true;
					this.gameplayCamera.enabled = false;
					this.visorCamera.enabled = false;
					this.thisPlayerModel.shadowCastingMode = ShadowCastingMode.On;
					this.thisPlayerModelArms.enabled = false;
					this.mapRadarDirectionIndicator.enabled = false;
					base.gameObject.GetComponent<CharacterController>().enabled = false;
					if (this.playerBodyAnimator.runtimeAnimatorController != this.playersManager.otherClientsAnimatorController)
					{
						this.playerBodyAnimator.runtimeAnimatorController = this.playersManager.otherClientsAnimatorController;
					}
					if (!this.isPlayerDead)
					{
						int num10 = 0;
						while (num10 < this.playersManager.allPlayerObjects.Length && !this.playersManager.allPlayerObjects[num10].GetComponent<PlayerControllerB>().gameplayCamera.enabled)
						{
							if (num10 == 4)
							{
								Debug.LogWarning("!!! No cameras are enabled !!!");
								this.playerScreen.enabled = false;
							}
							num10++;
						}
					}
					if (base.gameObject.GetComponent<Rigidbody>())
					{
						base.gameObject.GetComponent<Rigidbody>().interpolation = RigidbodyInterpolation.None;
					}
					Debug.Log("!!!! DISABLING CAMERA FOR PLAYER: " + base.gameObject.name);
					Debug.Log(string.Format("!!!! connectedPlayersAmount: {0}", this.playersManager.connectedPlayersAmount));
				}
				this.SetNightVisionEnabled(true);
				if (!this.isTestingPlayer && !this.isPlayerDead && this.isPlayerControlled)
				{
					if (!this.disableSyncInAnimation)
					{
						if (this.snapToServerPosition)
						{
							base.transform.localPosition = Vector3.Lerp(base.transform.localPosition, this.serverPlayerPosition, 16f * Time.deltaTime);
						}
						else
						{
							float num11 = 8f;
							if (this.jetpackControls)
							{
								num11 = 15f;
							}
							float num12 = Mathf.Clamp(num11 * Vector3.Distance(base.transform.localPosition, this.serverPlayerPosition), 0.9f, 300f);
							base.transform.localPosition = Vector3.MoveTowards(base.transform.localPosition, this.serverPlayerPosition, num12 * Time.deltaTime);
						}
					}
					this.gameplayCamera.transform.localEulerAngles = new Vector3(Mathf.LerpAngle(this.gameplayCamera.transform.localEulerAngles.x, this.targetLookRot, 14f * Time.deltaTime), this.gameplayCamera.transform.localEulerAngles.y, this.gameplayCamera.transform.localEulerAngles.z);
					if (this.jetpackControls || this.isClimbingLadder)
					{
						if (this.disableSyncInAnimation)
						{
							RoundManager.Instance.tempTransform.rotation = Quaternion.Euler(this.syncFullRotation);
							base.transform.rotation = Quaternion.Lerp(Quaternion.Euler(base.transform.eulerAngles), Quaternion.Euler(this.syncFullRotation), 8f * Time.deltaTime);
						}
					}
					else
					{
						if (!this.disableSyncInAnimation)
						{
							base.transform.eulerAngles = new Vector3(base.transform.eulerAngles.x, Mathf.LerpAngle(base.transform.eulerAngles.y, this.targetYRot, 14f * Time.deltaTime), base.transform.eulerAngles.z);
						}
						if (!this.inSpecialInteractAnimation && !this.disableSyncInAnimation)
						{
							Vector3 localEulerAngles2 = base.transform.localEulerAngles;
							localEulerAngles2.x = Mathf.LerpAngle(localEulerAngles2.x, 0f, 25f * Time.deltaTime);
							localEulerAngles2.z = Mathf.LerpAngle(localEulerAngles2.z, 0f, 25f * Time.deltaTime);
							base.transform.localEulerAngles = localEulerAngles2;
						}
					}
					this.playerEye.position = this.gameplayCamera.transform.position;
					this.playerEye.localEulerAngles = new Vector3(this.targetLookRot, 0f, 0f);
					this.playerEye.eulerAngles = new Vector3(this.playerEye.eulerAngles.x, this.targetYRot, this.playerEye.eulerAngles.z);
				}
				else if ((this.isPlayerDead || !this.isPlayerControlled) && this.setPositionOfDeadPlayer)
				{
					base.transform.position = this.playersManager.notSpawnedPosition.position;
				}
				if (this.isInGameOverAnimation > 0f && this.deadBody != null && this.deadBody.gameObject.activeSelf)
				{
					Debug.Log("Waiting time before spectating");
					this.isInGameOverAnimation -= Time.deltaTime;
				}
				else if (!this.hasBegunSpectating)
				{
					if (this.deadBody != null)
					{
						Debug.Log(this.deadBody.gameObject.activeSelf);
					}
					Debug.Log("Started spectating");
					this.isInGameOverAnimation = 0f;
					this.hasBegunSpectating = true;
				}
			}
			this.timeSincePlayerMoving += Time.deltaTime;
			this.timeSinceMakingLoudNoise += Time.deltaTime;
			if (!this.inSpecialInteractAnimation)
			{
				if (this.playingQuickSpecialAnimation)
				{
					this.specialAnimationWeight = 1f;
				}
				else
				{
					this.specialAnimationWeight = Mathf.Lerp(this.specialAnimationWeight, 0f, Time.deltaTime * 12f);
				}
				if (!this.localArmsMatchCamera)
				{
					this.localArmsTransform.position = this.playerModelArmsMetarig.position + this.playerModelArmsMetarig.forward * -0.445f;
					this.playerModelArmsMetarig.rotation = Quaternion.Lerp(this.playerModelArmsMetarig.rotation, this.localArmsRotationTarget.rotation, 15f * Time.deltaTime);
				}
			}
			else
			{
				if (!this.isClimbingLadder && !this.inShockingMinigame)
				{
					this.cameraUp = Mathf.Lerp(this.cameraUp, 0f, 5f * Time.deltaTime);
					this.gameplayCamera.transform.localEulerAngles = new Vector3(this.cameraUp, this.gameplayCamera.transform.localEulerAngles.y, this.gameplayCamera.transform.localEulerAngles.z);
				}
				this.specialAnimationWeight = Mathf.Lerp(this.specialAnimationWeight, 1f, Time.deltaTime * 20f);
				this.playerModelArmsMetarig.localEulerAngles = new Vector3(-90f, 0f, 0f);
			}
			this.interactRay = new Ray(base.transform.position + Vector3.up * 2.3f, base.transform.forward);
			if (this.doingUpperBodyEmote > 0f || (!this.twoHanded && Physics.Raycast(this.interactRay, out this.hit, 0.53f, this.walkableSurfacesNoPlayersMask, QueryTriggerInteraction.Ignore)))
			{
				this.doingUpperBodyEmote -= Time.deltaTime;
				this.handsOnWallWeight = Mathf.Lerp(this.handsOnWallWeight, 1f, 15f * Time.deltaTime);
			}
			else
			{
				this.handsOnWallWeight = Mathf.Lerp(this.handsOnWallWeight, 0f, 15f * Time.deltaTime);
			}
			this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("UpperBodyEmotes"), this.handsOnWallWeight);
			if (this.performingEmote)
			{
				this.emoteLayerWeight = Mathf.Lerp(this.emoteLayerWeight, 1f, 10f * Time.deltaTime);
			}
			else
			{
				this.emoteLayerWeight = Mathf.Lerp(this.emoteLayerWeight, 0f, 10f * Time.deltaTime);
			}
			this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("EmotesNoArms"), this.emoteLayerWeight);
			this.meshContainer.position = Vector3.Lerp(base.transform.position, base.transform.position - Vector3.up * 2.8f, StartOfRound.Instance.playerSinkingCurve.Evaluate(this.sinkingValue));
			if (this.isSinking && !this.inSpecialInteractAnimation && this.inAnimationWithEnemy == null)
			{
				this.sinkingValue = Mathf.Clamp(this.sinkingValue + Time.deltaTime * this.sinkingSpeedMultiplier, 0f, 1f);
			}
			else
			{
				this.sinkingValue = Mathf.Clamp(this.sinkingValue - Time.deltaTime * 0.75f, 0f, 1f);
			}
			if (this.sinkingValue > 0.73f || this.isUnderwater)
			{
				if (!this.wasUnderwaterLastFrame)
				{
					this.wasUnderwaterLastFrame = true;
					if (!base.IsOwner)
					{
						this.waterBubblesAudio.Play();
					}
				}
				this.voiceMuffledByEnemy = true;
				if (!base.IsOwner)
				{
					this.statusEffectAudio.volume = Mathf.Lerp(this.statusEffectAudio.volume, 0f, 4f * Time.deltaTime);
					if (this.currentVoiceChatIngameSettings != null)
					{
						OccludeAudio component2 = this.currentVoiceChatIngameSettings.voiceAudio.GetComponent<OccludeAudio>();
						component2.overridingLowPass = true;
						component2.lowPassOverride = 600f;
						this.waterBubblesAudio.volume = Mathf.Clamp(this.currentVoiceChatIngameSettings._playerState.Amplitude * 120f, 0f, 1f);
					}
					else
					{
						StartOfRound.Instance.RefreshPlayerVoicePlaybackObjects();
					}
				}
				else if (this.sinkingValue > 0.73f)
				{
					HUDManager.Instance.sinkingCoveredFace = true;
				}
			}
			else if (base.IsOwner)
			{
				HUDManager.Instance.sinkingCoveredFace = false;
			}
			else if (this.wasUnderwaterLastFrame)
			{
				this.waterBubblesAudio.Stop();
				if (this.currentVoiceChatIngameSettings != null)
				{
					this.wasUnderwaterLastFrame = false;
					this.currentVoiceChatIngameSettings.voiceAudio.GetComponent<OccludeAudio>().overridingLowPass = false;
					this.voiceMuffledByEnemy = false;
				}
				else
				{
					StartOfRound.Instance.RefreshPlayerVoicePlaybackObjects();
					StartOfRound.Instance.UpdatePlayerVoiceEffects();
				}
			}
			else
			{
				this.statusEffectAudio.volume = Mathf.Lerp(this.statusEffectAudio.volume, 1f, 4f * Time.deltaTime);
			}
			if (this.activeAudioReverbFilter == null)
			{
				this.activeAudioReverbFilter = this.activeAudioListener.GetComponent<AudioReverbFilter>();
				this.activeAudioReverbFilter.enabled = true;
			}
			if (this.reverbPreset != null && GameNetworkManager.Instance != null && GameNetworkManager.Instance.localPlayerController != null && ((GameNetworkManager.Instance.localPlayerController == this && (!this.isPlayerDead || StartOfRound.Instance.overrideSpectateCamera)) || (GameNetworkManager.Instance.localPlayerController.spectatedPlayerScript == this && !StartOfRound.Instance.overrideSpectateCamera)))
			{
				this.activeAudioReverbFilter.dryLevel = Mathf.Lerp(this.activeAudioReverbFilter.dryLevel, this.reverbPreset.dryLevel, 15f * Time.deltaTime);
				this.activeAudioReverbFilter.roomLF = Mathf.Lerp(this.activeAudioReverbFilter.roomLF, this.reverbPreset.lowFreq, 15f * Time.deltaTime);
				this.activeAudioReverbFilter.roomLF = Mathf.Lerp(this.activeAudioReverbFilter.roomHF, this.reverbPreset.highFreq, 15f * Time.deltaTime);
				this.activeAudioReverbFilter.decayTime = Mathf.Lerp(this.activeAudioReverbFilter.decayTime, this.reverbPreset.decayTime, 15f * Time.deltaTime);
				this.activeAudioReverbFilter.room = Mathf.Lerp(this.activeAudioReverbFilter.room, this.reverbPreset.room, 15f * Time.deltaTime);
			}
			if (this.isHoldingObject || this.isGrabbingObjectAnimation || this.inShockingMinigame)
			{
				this.upperBodyAnimationsWeight = Mathf.Lerp(this.upperBodyAnimationsWeight, 1f, 25f * Time.deltaTime);
				this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("HoldingItemsRightHand"), this.upperBodyAnimationsWeight);
				if (this.twoHandedAnimation || this.inShockingMinigame)
				{
					this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("HoldingItemsBothHands"), this.upperBodyAnimationsWeight);
				}
				else
				{
					this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("HoldingItemsBothHands"), Mathf.Abs(this.upperBodyAnimationsWeight - 1f));
				}
			}
			else
			{
				this.upperBodyAnimationsWeight = Mathf.Lerp(this.upperBodyAnimationsWeight, 0f, 25f * Time.deltaTime);
				this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("HoldingItemsRightHand"), this.upperBodyAnimationsWeight);
				this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("HoldingItemsBothHands"), this.upperBodyAnimationsWeight);
			}
			this.playerBodyAnimator.SetLayerWeight(this.playerBodyAnimator.GetLayerIndex("SpecialAnimations"), this.specialAnimationWeight);
			if (this.inSpecialInteractAnimation && !this.inShockingMinigame)
			{
				this.cameraLookRig1.weight = Mathf.Lerp(this.cameraLookRig1.weight, 0f, Time.deltaTime * 25f);
				this.cameraLookRig2.weight = Mathf.Lerp(this.cameraLookRig1.weight, 0f, Time.deltaTime * 25f);
			}
			else
			{
				this.cameraLookRig1.weight = 0.45f;
				this.cameraLookRig2.weight = 1f;
			}
			if (this.isExhausted)
			{
				this.exhaustionEffectLerp = Mathf.Lerp(this.exhaustionEffectLerp, 1f, 10f * Time.deltaTime);
			}
			else
			{
				this.exhaustionEffectLerp = Mathf.Lerp(this.exhaustionEffectLerp, 0f, 10f * Time.deltaTime);
			}
			this.playerBodyAnimator.SetFloat("tiredAmount", this.exhaustionEffectLerp);
			if (this.isPlayerDead)
			{
				this.drunkness = 0f;
				this.drunknessInertia = 0f;
			}
			else
			{
				this.drunkness = Mathf.Clamp(this.drunkness + Time.deltaTime / 12f * this.drunknessSpeed * this.drunknessInertia, 0f, 1f);
				if (!this.increasingDrunknessThisFrame)
				{
					if (this.drunkness > 0f)
					{
						this.drunknessInertia = Mathf.Clamp(this.drunknessInertia - Time.deltaTime / 3f * this.drunknessSpeed / Mathf.Clamp(Mathf.Abs(this.drunknessInertia), 0.2f, 1f), -2.5f, 2.5f);
					}
					else
					{
						this.drunknessInertia = 0f;
					}
				}
				else
				{
					this.increasingDrunknessThisFrame = false;
				}
				float num13 = StartOfRound.Instance.drunknessSideEffect.Evaluate(this.drunkness);
				if (num13 > 0.15f)
				{
					SoundManager.Instance.playerVoicePitchTargets[(int)(checked((IntPtr)this.playerClientId))] = 1f + num13;
				}
				else
				{
					SoundManager.Instance.playerVoicePitchTargets[(int)(checked((IntPtr)this.playerClientId))] = 1f;
				}
			}
			this.smoothLookMultiplier = 25f * Mathf.Clamp(Mathf.Abs(this.drunkness - 1.5f), 0.15f, 1f);
			if (this.bleedingHeavily && this.bloodDropTimer >= 0f)
			{
				this.bloodDropTimer -= Time.deltaTime;
			}
			if (Physics.Raycast(this.lineOfSightCube.position, this.lineOfSightCube.forward, out this.hit, 10f, this.playersManager.collidersAndRoomMask, QueryTriggerInteraction.Ignore))
			{
				this.lineOfSightCube.localScale = new Vector3(1.5f, 1.5f, this.hit.distance);
			}
			else
			{
				this.lineOfSightCube.localScale = new Vector3(1.5f, 1.5f, 10f);
			}
			this.SetPlayerSanityLevel();
		}

		// Token: 0x06001013 RID: 4115 RVA: 0x0008C238 File Offset: 0x0008A438
		private void SetFaceUnderwaterFilters()
		{
			if (this.isPlayerDead)
			{
				return;
			}
			if (this.isUnderwater && this.underwaterCollider != null && this.underwaterCollider.bounds.Contains(this.gameplayCamera.transform.position))
			{
				HUDManager.Instance.setUnderwaterFilter = true;
				this.statusEffectAudio.volume = Mathf.Lerp(this.statusEffectAudio.volume, 0f, 4f * Time.deltaTime);
				StartOfRound.Instance.drowningTimer -= Time.deltaTime / 10f;
				if (StartOfRound.Instance.drowningTimer < 0f)
				{
					StartOfRound.Instance.drowningTimer = 1f;
					this.KillPlayer(Vector3.zero, true, CauseOfDeath.Drowning, 0);
				}
				else if (StartOfRound.Instance.drowningTimer <= 0.3f)
				{
					if (!StartOfRound.Instance.playedDrowningSFX)
					{
						StartOfRound.Instance.playedDrowningSFX = true;
						HUDManager.Instance.UIAudio.PlayOneShot(StartOfRound.Instance.HUDSystemAlertSFX);
					}
					HUDManager.Instance.DisplayStatusEffect("Oxygen critically low!");
				}
			}
			else
			{
				this.statusEffectAudio.volume = Mathf.Lerp(this.statusEffectAudio.volume, 1f, 4f * Time.deltaTime);
				StartOfRound.Instance.playedDrowningSFX = false;
				StartOfRound.Instance.drowningTimer = Mathf.Clamp(StartOfRound.Instance.drowningTimer + Time.deltaTime, 0.1f, 1f);
				HUDManager.Instance.setUnderwaterFilter = false;
			}
			if (this.syncUnderwaterInterval <= 0f)
			{
				if (HUDManager.Instance.setUnderwaterFilter)
				{
					if (!this.isFaceUnderwaterOnServer)
					{
						this.isFaceUnderwaterOnServer = true;
						this.SetFaceUnderwaterServerRpc();
						return;
					}
				}
				else if (this.isFaceUnderwaterOnServer)
				{
					this.isFaceUnderwaterOnServer = false;
					this.SetFaceOutOfWaterServerRpc();
					return;
				}
			}
			else
			{
				this.syncUnderwaterInterval = 0.5f;
			}
		}

		// Token: 0x06001014 RID: 4116 RVA: 0x0008C428 File Offset: 0x0008A628
		[ServerRpc]
		private void SetFaceUnderwaterServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(1048203095U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 1048203095U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.SetFaceUnderwaterClientRpc();
		}

		// Token: 0x06001015 RID: 4117 RVA: 0x0008C53C File Offset: 0x0008A73C
		[ClientRpc]
		private void SetFaceUnderwaterClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(1284827260U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 1284827260U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.isUnderwater = true;
		}

		// Token: 0x06001016 RID: 4118 RVA: 0x0008C614 File Offset: 0x0008A814
		[ServerRpc]
		private void SetFaceOutOfWaterServerRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendServerRpc(3262284737U, serverRpcParams, RpcDelivery.Reliable);
				base.__endSendServerRpc(ref fastBufferWriter, 3262284737U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.SetFaceOutOfWaterClientRpc();
		}

		// Token: 0x06001017 RID: 4119 RVA: 0x0008C728 File Offset: 0x0008A928
		[ClientRpc]
		private void SetFaceOutOfWaterClientRpc()
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(4067397557U, clientRpcParams, RpcDelivery.Reliable);
				base.__endSendClientRpc(ref fastBufferWriter, 4067397557U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.isUnderwater = false;
		}

		// Token: 0x06001018 RID: 4120 RVA: 0x0008C800 File Offset: 0x0008AA00
		public void IncreaseFearLevelOverTime(float amountMultiplier = 1f, float cap = 1f)
		{
			this.playersManager.fearLevelIncreasing = true;
			if (this.playersManager.fearLevel > cap)
			{
				return;
			}
			this.playersManager.fearLevel += Time.deltaTime * amountMultiplier;
		}

		// Token: 0x06001019 RID: 4121 RVA: 0x0008C836 File Offset: 0x0008AA36
		public void JumpToFearLevel(float targetFearLevel, bool onlyGoUp = true)
		{
			if (onlyGoUp && targetFearLevel - this.playersManager.fearLevel < 0.05f)
			{
				return;
			}
			this.playersManager.fearLevel = targetFearLevel;
			this.playersManager.fearLevelIncreasing = true;
		}

		// Token: 0x0600101A RID: 4122 RVA: 0x0008C868 File Offset: 0x0008AA68
		private void SetPlayerSanityLevel()
		{
			if (StartOfRound.Instance.inShipPhase || !TimeOfDay.Instance.currentDayTimeStarted)
			{
				this.insanityLevel = 0f;
				return;
			}
			if (!this.NearOtherPlayers(this, 17f) && !this.PlayerIsHearingOthersThroughWalkieTalkie(this))
			{
				if (this.isInsideFactory)
				{
					this.insanitySpeedMultiplier = 0.8f;
				}
				else if (this.isInHangarShipRoom)
				{
					this.insanitySpeedMultiplier = 0.2f;
				}
				else if (StartOfRound.Instance.connectedPlayersAmount == 0)
				{
					this.insanitySpeedMultiplier = -2f;
				}
				else if (TimeOfDay.Instance.dayMode >= DayMode.Sundown)
				{
					this.insanitySpeedMultiplier = 0.5f;
				}
				else
				{
					this.insanitySpeedMultiplier = 0.3f;
				}
				this.isPlayerAlone = true;
			}
			else
			{
				this.insanitySpeedMultiplier = -3f;
				this.isPlayerAlone = false;
			}
			if (this.insanitySpeedMultiplier < 0f)
			{
				this.insanityLevel = Mathf.MoveTowards(this.insanityLevel, 0f, Time.deltaTime * -this.insanitySpeedMultiplier);
				return;
			}
			if (this.insanityLevel > this.maxInsanityLevel)
			{
				this.insanityLevel = Mathf.MoveTowards(this.insanityLevel, this.maxInsanityLevel, Time.deltaTime * 2f);
				return;
			}
			if (StartOfRound.Instance.connectedPlayersAmount == 0)
			{
				this.insanitySpeedMultiplier /= 1.6f;
			}
			this.insanityLevel = Mathf.MoveTowards(this.insanityLevel, this.maxInsanityLevel, Time.deltaTime * this.insanitySpeedMultiplier);
		}

		// Token: 0x0600101B RID: 4123 RVA: 0x0008C9D8 File Offset: 0x0008ABD8
		private void SetNightVisionEnabled(bool isNotLocalClient)
		{
			this.nightVision.enabled = false;
			if (GameNetworkManager.Instance == null || GameNetworkManager.Instance.localPlayerController == null)
			{
				return;
			}
			if ((!isNotLocalClient || GameNetworkManager.Instance.localPlayerController.spectatedPlayerScript == this) && this.isInsideFactory)
			{
				this.nightVision.enabled = true;
			}
		}

		// Token: 0x0600101C RID: 4124 RVA: 0x0008CA40 File Offset: 0x0008AC40
		public void ClickHoldInteraction()
		{
			bool flag = this.playerActions.Movement.Interact.IsPressed();
			this.isHoldingInteract = flag;
			if (!flag)
			{
				this.StopHoldInteractionOnTrigger();
				return;
			}
			if (this.hoveringOverTrigger == null || !this.hoveringOverTrigger.interactable)
			{
				this.StopHoldInteractionOnTrigger();
				return;
			}
			if (this.hoveringOverTrigger == null || !this.hoveringOverTrigger.gameObject.activeInHierarchy || !this.hoveringOverTrigger.holdInteraction || this.hoveringOverTrigger.currentCooldownValue > 0f || (this.isHoldingObject && !this.hoveringOverTrigger.oneHandedItemAllowed) || (this.twoHanded && !this.hoveringOverTrigger.twoHandedItemAllowed))
			{
				this.StopHoldInteractionOnTrigger();
				return;
			}
			if (this.isGrabbingObjectAnimation || this.isTypingChat || this.inSpecialInteractAnimation || this.throwingObject)
			{
				this.StopHoldInteractionOnTrigger();
				return;
			}
			if (!HUDManager.Instance.HoldInteractionFill(this.hoveringOverTrigger.timeToHold, this.hoveringOverTrigger.timeToHoldSpeedMultiplier))
			{
				this.hoveringOverTrigger.HoldInteractNotFilled();
				return;
			}
			this.hoveringOverTrigger.Interact(this.thisPlayerBody);
		}

		// Token: 0x0600101D RID: 4125 RVA: 0x0008CB70 File Offset: 0x0008AD70
		private void StopHoldInteractionOnTrigger()
		{
			HUDManager.Instance.holdFillAmount = 0f;
			if (this.previousHoveringOverTrigger != null)
			{
				this.previousHoveringOverTrigger.StopInteraction();
			}
			if (this.hoveringOverTrigger != null)
			{
				this.hoveringOverTrigger.StopInteraction();
			}
		}

		// Token: 0x0600101E RID: 4126 RVA: 0x0008CBC0 File Offset: 0x0008ADC0
		public void CancelSpecialTriggerAnimations()
		{
			Terminal terminal = Object.FindObjectOfType<Terminal>();
			if (terminal.terminalInUse)
			{
				terminal.QuitTerminal();
				return;
			}
			if (this.currentTriggerInAnimationWith != null)
			{
				this.currentTriggerInAnimationWith.StopSpecialAnimation();
			}
		}

		// Token: 0x0600101F RID: 4127 RVA: 0x0008CBFC File Offset: 0x0008ADFC
		public void TeleportPlayer(Vector3 pos, bool withRotation = false, float rot = 0f, bool allowInteractTrigger = false, bool enableController = true)
		{
			if (base.IsOwner && !allowInteractTrigger)
			{
				this.CancelSpecialTriggerAnimations();
			}
			else if (!allowInteractTrigger && this.currentTriggerInAnimationWith != null)
			{
				this.currentTriggerInAnimationWith.onCancelAnimation.Invoke(this);
				this.currentTriggerInAnimationWith.SetInteractTriggerNotInAnimation(-1);
			}
			if (this.inAnimationWithEnemy)
			{
				this.inAnimationWithEnemy.CancelSpecialAnimationWithPlayer();
			}
			StartOfRound.Instance.playerTeleportedEvent.Invoke(this);
			if (withRotation)
			{
				this.targetYRot = rot;
				base.transform.eulerAngles = new Vector3(0f, this.targetYRot, 0f);
			}
			this.serverPlayerPosition = pos;
			this.thisController.enabled = false;
			base.transform.position = pos;
			if (enableController)
			{
				this.thisController.enabled = true;
			}
			this.teleportingThisFrame = true;
			this.teleportedLastFrame = true;
			this.timeSinceTakingGravityDamage = 1f;
			this.averageVelocity = 0f;
			if (this.isUnderwater || this.isSinking)
			{
				QuicksandTrigger[] array = Object.FindObjectsByType<QuicksandTrigger>(FindObjectsInactive.Exclude, FindObjectsSortMode.None);
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].sinkingLocalPlayer)
					{
						array[i].OnExit(base.gameObject.GetComponent<Collider>());
						return;
					}
				}
			}
		}

		// Token: 0x06001020 RID: 4128 RVA: 0x0008CD38 File Offset: 0x0008AF38
		public void KillPlayer(Vector3 bodyVelocity, bool spawnBody = true, CauseOfDeath causeOfDeath = CauseOfDeath.Unknown, int deathAnimation = 0)
		{
			if (!base.IsOwner)
			{
				return;
			}
			if (this.isPlayerDead)
			{
				return;
			}
			if (!this.AllowPlayerDeath())
			{
				return;
			}
			this.isPlayerDead = true;
			this.isPlayerControlled = false;
			this.thisPlayerModelArms.enabled = false;
			this.localVisor.position = this.playersManager.notSpawnedPosition.position;
			this.DisablePlayerModel(base.gameObject, false, false);
			this.isInsideFactory = false;
			this.IsInspectingItem = false;
			this.inTerminalMenu = false;
			this.twoHanded = false;
			this.carryWeight = 1f;
			this.fallValue = 0f;
			this.fallValueUncapped = 0f;
			this.takingFallDamage = false;
			this.isSinking = false;
			this.isUnderwater = false;
			StartOfRound.Instance.drowningTimer = 1f;
			HUDManager.Instance.setUnderwaterFilter = false;
			this.wasUnderwaterLastFrame = false;
			this.sourcesCausingSinking = 0;
			this.sinkingValue = 0f;
			this.hinderedMultiplier = 1f;
			this.isMovementHindered = 0;
			this.inAnimationWithEnemy = null;
			Object.FindObjectOfType<Terminal>().terminalInUse = false;
			this.ChangeAudioListenerToObject(this.playersManager.spectateCamera.gameObject);
			SoundManager.Instance.SetDiageticMixerSnapshot(0, 1f);
			HUDManager.Instance.SetNearDepthOfFieldEnabled(true);
			HUDManager.Instance.HUDAnimator.SetBool("biohazardDamage", false);
			Debug.Log("Running kill player function for LOCAL client, player object: " + base.gameObject.name);
			HUDManager.Instance.gameOverAnimator.SetTrigger("gameOver");
			HUDManager.Instance.HideHUD(true);
			this.StopHoldInteractionOnTrigger();
			this.KillPlayerServerRpc((int)this.playerClientId, spawnBody, bodyVelocity, (int)causeOfDeath, deathAnimation);
			if (spawnBody)
			{
				this.SpawnDeadBody((int)this.playerClientId, bodyVelocity, (int)causeOfDeath, this, deathAnimation, null);
			}
			StartOfRound.Instance.SwitchCamera(StartOfRound.Instance.spectateCamera);
			this.isInGameOverAnimation = 1.5f;
			this.cursorTip.text = "";
			this.cursorIcon.enabled = false;
			this.DropAllHeldItems(spawnBody, false);
			this.DisableJetpackControlsLocally();
		}

		// Token: 0x06001021 RID: 4129 RVA: 0x0008CF44 File Offset: 0x0008B144
		[ServerRpc]
		private void KillPlayerServerRpc(int playerId, bool spawnBody, Vector3 bodyVelocity, int causeOfDeath, int deathAnimation)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(1346025125U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, playerId);
				writer.WriteValueSafe<bool>(spawnBody, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe(bodyVelocity);
				BytePacker.WriteValueBitPacked(writer, causeOfDeath);
				BytePacker.WriteValueBitPacked(writer, deathAnimation);
				base.__endSendServerRpc(ref writer, 1346025125U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.playersManager.livingPlayers--;
			if (this.playersManager.livingPlayers == 0)
			{
				this.playersManager.allPlayersDead = true;
				this.playersManager.ShipLeaveAutomatically(false);
			}
			if (!spawnBody)
			{
				PlayerControllerB component = this.playersManager.allPlayerObjects[playerId].GetComponent<PlayerControllerB>();
				for (int i = 0; i < component.ItemSlots.Length; i++)
				{
					GrabbableObject grabbableObject = component.ItemSlots[i];
					if (grabbableObject != null)
					{
						grabbableObject.gameObject.GetComponent<NetworkObject>().Despawn(true);
					}
				}
			}
			else
			{
				GameObject gameObject = Object.Instantiate<GameObject>(StartOfRound.Instance.ragdollGrabbableObjectPrefab, this.playersManager.propsContainer);
				gameObject.GetComponent<NetworkObject>().Spawn(false);
				gameObject.GetComponent<RagdollGrabbableObject>().bodyID.Value = playerId;
			}
			this.KillPlayerClientRpc(playerId, spawnBody, bodyVelocity, causeOfDeath, deathAnimation);
		}

		// Token: 0x06001022 RID: 4130 RVA: 0x0008D16C File Offset: 0x0008B36C
		[ClientRpc]
		private void KillPlayerClientRpc(int playerId, bool spawnBody, Vector3 bodyVelocity, int causeOfDeath, int deathAnimation)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(168339603U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, playerId);
				writer.WriteValueSafe<bool>(spawnBody, default(FastBufferWriter.ForPrimitives));
				writer.WriteValueSafe(bodyVelocity);
				BytePacker.WriteValueBitPacked(writer, causeOfDeath);
				BytePacker.WriteValueBitPacked(writer, deathAnimation);
				base.__endSendClientRpc(ref writer, 168339603U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			StartOfRound.Instance.gameStats.deaths++;
			Debug.Log("A player died. player object: " + base.gameObject.name);
			if (!base.IsServer)
			{
				Debug.Log("Setting living players minus one.");
				this.playersManager.livingPlayers--;
				Debug.Log(this.playersManager.livingPlayers);
				if (this.playersManager.livingPlayers == 0)
				{
					this.playersManager.allPlayersDead = true;
					this.playersManager.ShipLeaveAutomatically(false);
				}
			}
			PlayerControllerB component = this.playersManager.allPlayerObjects[playerId].GetComponent<PlayerControllerB>();
			component.bleedingHeavily = false;
			this.statusEffectAudio.Stop();
			if (!base.IsOwner && spawnBody)
			{
				this.SpawnDeadBody(playerId, bodyVelocity, causeOfDeath, component, deathAnimation, null);
				this.DropAllHeldItems(spawnBody, false);
			}
			this.placeOfDeath = component.transform.position;
			this.DisablePlayerModel(this.playersManager.allPlayerObjects[playerId], false, false);
			component.setPositionOfDeadPlayer = true;
			component.isPlayerDead = true;
			component.isPlayerControlled = false;
			component.snapToServerPosition = false;
			component.isUnderwater = false;
			component.isHoldingObject = false;
			component.currentlyHeldObjectServer = null;
			SoundManager.Instance.playerVoicePitchTargets[playerId] = 1f;
			SoundManager.Instance.playerVoicePitchLerpSpeed[playerId] = 3f;
			component.causeOfDeath = (CauseOfDeath)causeOfDeath;
			if (!base.IsOwner && GameNetworkManager.Instance.localPlayerController.isPlayerDead)
			{
				HUDManager.Instance.UpdateBoxesSpectateUI();
			}
			StartOfRound.Instance.UpdatePlayerVoiceEffects();
		}

		// Token: 0x06001023 RID: 4131 RVA: 0x0008D40C File Offset: 0x0008B60C
		public void SpawnDeadBody(int playerId, Vector3 bodyVelocity, int causeOfDeath, PlayerControllerB deadPlayerController, int deathAnimation = 0, Transform overridePosition = null)
		{
			float d = 1.32f;
			Transform parent = null;
			if (this.isInElevator)
			{
				parent = this.playersManager.elevatorTransform;
			}
			GameObject gameObject;
			if (overridePosition != null)
			{
				gameObject = Object.Instantiate<GameObject>(this.playersManager.playerRagdolls[deathAnimation], overridePosition.position + Vector3.up * d, overridePosition.rotation, parent);
			}
			else
			{
				gameObject = Object.Instantiate<GameObject>(this.playersManager.playerRagdolls[deathAnimation], deadPlayerController.thisPlayerBody.position + Vector3.up * d, deadPlayerController.thisPlayerBody.rotation, parent);
			}
			DeadBodyInfo component = gameObject.GetComponent<DeadBodyInfo>();
			if (overridePosition)
			{
				component.overrideSpawnPosition = true;
			}
			component.parentedToShip = this.isInElevator;
			component.playerObjectId = playerId;
			this.deadBody = component;
			Rigidbody[] componentsInChildren = gameObject.GetComponentsInChildren<Rigidbody>();
			for (int i = 0; i < componentsInChildren.Length; i++)
			{
				componentsInChildren[i].velocity = bodyVelocity;
			}
			for (int j = 0; j < this.bodyBloodDecals.Length; j++)
			{
				this.deadBody.bodyBloodDecals[j].SetActive(this.bodyBloodDecals[j].activeSelf);
			}
			ScanNodeProperties componentInChildren = component.gameObject.GetComponentInChildren<ScanNodeProperties>();
			componentInChildren.headerText = "Body of " + deadPlayerController.playerUsername;
			CauseOfDeath causeOfDeath2 = (CauseOfDeath)causeOfDeath;
			componentInChildren.subText = "Cause of death: " + causeOfDeath2.ToString();
			this.deadBody.causeOfDeath = causeOfDeath2;
			if (causeOfDeath2 == CauseOfDeath.Bludgeoning || causeOfDeath2 == CauseOfDeath.Mauling || causeOfDeath2 == CauseOfDeath.Gunshots)
			{
				this.deadBody.MakeCorpseBloody();
			}
			if (causeOfDeath2 == CauseOfDeath.Gravity)
			{
				this.deadBody.bodyAudio.PlayOneShot(StartOfRound.Instance.playerFallDeath);
				WalkieTalkie.TransmitOneShotAudio(this.deadBody.bodyAudio, StartOfRound.Instance.playerFallDeath, 1f);
			}
		}

		// Token: 0x06001024 RID: 4132 RVA: 0x0008D5F0 File Offset: 0x0008B7F0
		public void DestroyItemInSlotAndSync(int itemSlot)
		{
			if (!base.IsOwner)
			{
				return;
			}
			if (itemSlot >= this.ItemSlots.Length || this.ItemSlots[itemSlot] == null)
			{
				Debug.LogError(string.Format("Destroy item in slot called for a slot (slot {0}) which is empty or incorrect", itemSlot));
			}
			this.timeSinceSwitchingSlots = 0f;
			this.DestroyItemInSlot(itemSlot);
			this.DestroyItemInSlotServerRpc(itemSlot);
		}

		// Token: 0x06001025 RID: 4133 RVA: 0x0008D650 File Offset: 0x0008B850
		[ServerRpc]
		public void DestroyItemInSlotServerRpc(int itemSlot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				if (base.OwnerClientId != networkManager.LocalClientId)
				{
					if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
					{
						Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
					}
					return;
				}
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(1388366573U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, itemSlot);
				base.__endSendServerRpc(ref writer, 1388366573U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.DestroyItemInSlotClientRpc(itemSlot);
		}

		// Token: 0x06001026 RID: 4134 RVA: 0x0008D774 File Offset: 0x0008B974
		[ClientRpc]
		public void DestroyItemInSlotClientRpc(int itemSlot)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(899109231U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, itemSlot);
				base.__endSendClientRpc(ref writer, 899109231U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (base.IsOwner)
			{
				return;
			}
			this.DestroyItemInSlot(itemSlot);
		}

		// Token: 0x06001027 RID: 4135 RVA: 0x0008D85C File Offset: 0x0008BA5C
		public void DestroyItemInSlot(int itemSlot)
		{
			if (GameNetworkManager.Instance.localPlayerController == null || NetworkManager.Singleton == null || NetworkManager.Singleton.ShutdownInProgress)
			{
				return;
			}
			Debug.Log(string.Format("Destroying item in slot {0}; {1}; is currentlyheldobjectserver null: {2}", itemSlot, this.currentItemSlot, this.currentlyHeldObjectServer == null));
			if (this.currentlyHeldObjectServer != null)
			{
				Debug.Log("currentlyHeldObjectServer: " + this.currentlyHeldObjectServer.itemProperties.itemName);
			}
			GrabbableObject grabbableObject = this.ItemSlots[itemSlot];
			if (this.isHoldingObject)
			{
				if (this.currentItemSlot == itemSlot)
				{
					this.carryWeight -= Mathf.Clamp(this.currentlyHeldObjectServer.itemProperties.weight - 1f, 0f, 10f);
					this.isHoldingObject = false;
					this.twoHanded = false;
					if (base.IsOwner)
					{
						this.playerBodyAnimator.SetBool("cancelHolding", true);
						this.playerBodyAnimator.SetTrigger("Throw");
						HUDManager.Instance.holdingTwoHandedItem.enabled = false;
						HUDManager.Instance.ClearControlTips();
						this.activatingItem = false;
					}
				}
				HUDManager.Instance.itemSlotIcons[itemSlot].enabled = false;
				if (this.currentlyHeldObjectServer != null && this.currentlyHeldObjectServer == this.ItemSlots[itemSlot])
				{
					if (base.IsOwner)
					{
						this.SetSpecialGrabAnimationBool(false, this.currentlyHeldObjectServer);
						this.currentlyHeldObjectServer.DiscardItemOnClient();
					}
					this.currentlyHeldObjectServer = null;
				}
			}
			this.ItemSlots[itemSlot] = null;
			if (base.IsServer)
			{
				grabbableObject.NetworkObject.Despawn(true);
			}
		}

		// Token: 0x06001028 RID: 4136 RVA: 0x0008DA18 File Offset: 0x0008BC18
		public void DropAllHeldItems(bool itemsFall = true, bool disconnecting = false)
		{
			for (int i = 0; i < this.ItemSlots.Length; i++)
			{
				GrabbableObject grabbableObject = this.ItemSlots[i];
				if (grabbableObject != null)
				{
					if (itemsFall)
					{
						grabbableObject.parentObject = null;
						grabbableObject.heldByPlayerOnServer = false;
						if (this.isInElevator)
						{
							grabbableObject.transform.SetParent(this.playersManager.elevatorTransform, true);
						}
						else
						{
							grabbableObject.transform.SetParent(this.playersManager.propsContainer, true);
						}
						this.SetItemInElevator(this.isInHangarShipRoom, this.isInElevator, grabbableObject);
						grabbableObject.EnablePhysics(true);
						grabbableObject.EnableItemMeshes(true);
						grabbableObject.transform.localScale = grabbableObject.originalScale;
						grabbableObject.isHeld = false;
						grabbableObject.isPocketed = false;
						grabbableObject.startFallingPosition = grabbableObject.transform.parent.InverseTransformPoint(grabbableObject.transform.position);
						grabbableObject.FallToGround(true);
						grabbableObject.fallTime = Random.Range(-0.3f, 0.05f);
						if (base.IsOwner)
						{
							grabbableObject.DiscardItemOnClient();
						}
						else if (!grabbableObject.itemProperties.syncDiscardFunction)
						{
							grabbableObject.playerHeldBy = null;
						}
					}
					if (base.IsOwner && !disconnecting)
					{
						HUDManager.Instance.holdingTwoHandedItem.enabled = false;
						HUDManager.Instance.itemSlotIcons[i].enabled = false;
						HUDManager.Instance.ClearControlTips();
						this.activatingItem = false;
					}
					this.ItemSlots[i] = null;
				}
			}
			if (this.isHoldingObject)
			{
				this.isHoldingObject = false;
				if (this.currentlyHeldObjectServer != null)
				{
					this.SetSpecialGrabAnimationBool(false, this.currentlyHeldObjectServer);
				}
				this.playerBodyAnimator.SetBool("cancelHolding", true);
				this.playerBodyAnimator.SetTrigger("Throw");
			}
			this.activatingItem = false;
			this.twoHanded = false;
			this.carryWeight = 1f;
			this.currentlyHeldObjectServer = null;
		}

		// Token: 0x06001029 RID: 4137 RVA: 0x0008DBF2 File Offset: 0x0008BDF2
		private bool NearOtherPlayers(PlayerControllerB playerScript = null, float checkRadius = 10f)
		{
			if (playerScript == null)
			{
				playerScript = this;
			}
			base.gameObject.layer = 0;
			bool result = Physics.CheckSphere(playerScript.transform.position, checkRadius, 8, QueryTriggerInteraction.Ignore);
			base.gameObject.layer = 3;
			return result;
		}

		// Token: 0x0600102A RID: 4138 RVA: 0x0008DC2C File Offset: 0x0008BE2C
		private bool PlayerIsHearingOthersThroughWalkieTalkie(PlayerControllerB playerScript = null)
		{
			if (playerScript == null)
			{
				playerScript = this;
			}
			if (!playerScript.holdingWalkieTalkie)
			{
				return false;
			}
			for (int i = 0; i < WalkieTalkie.allWalkieTalkies.Count; i++)
			{
				if (WalkieTalkie.allWalkieTalkies[i].clientIsHoldingAndSpeakingIntoThis && WalkieTalkie.allWalkieTalkies[i] != playerScript.currentlyHeldObjectServer as WalkieTalkie)
				{
					return true;
				}
			}
			return false;
		}

		// Token: 0x0600102B RID: 4139 RVA: 0x0008DC98 File Offset: 0x0008BE98
		public void DisablePlayerModel(GameObject playerObject, bool enable = false, bool disableLocalArms = false)
		{
			SkinnedMeshRenderer[] componentsInChildren = playerObject.GetComponentsInChildren<SkinnedMeshRenderer>();
			for (int i = 0; i < componentsInChildren.Length; i++)
			{
				componentsInChildren[i].enabled = enable;
			}
			if (disableLocalArms)
			{
				this.thisPlayerModelArms.enabled = false;
			}
		}

		// Token: 0x0600102C RID: 4140 RVA: 0x0008DCD2 File Offset: 0x0008BED2
		public void SyncBodyPositionWithClients()
		{
			if (this.deadBody != null)
			{
				this.SyncBodyPositionClientRpc(this.deadBody.transform.position);
			}
		}

		// Token: 0x0600102D RID: 4141 RVA: 0x0008DCF8 File Offset: 0x0008BEF8
		[ClientRpc]
		public void SyncBodyPositionClientRpc(Vector3 newBodyPosition)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter fastBufferWriter = base.__beginSendClientRpc(301044013U, clientRpcParams, RpcDelivery.Reliable);
				fastBufferWriter.WriteValueSafe(newBodyPosition);
				base.__endSendClientRpc(ref fastBufferWriter, 301044013U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (Vector3.Distance(this.deadBody.transform.position, newBodyPosition) < 1.5f)
			{
				return;
			}
			base.StartCoroutine(this.WaitUntilPlayerHasLeftBodyToTeleport(newBodyPosition));
		}

		// Token: 0x0600102E RID: 4142 RVA: 0x0008DDF9 File Offset: 0x0008BFF9
		private IEnumerator WaitUntilPlayerHasLeftBodyToTeleport(Vector3 newBodyPosition)
		{
			yield return new WaitUntil(() => this.deadBody == null || !Physics.CheckSphere(this.deadBody.transform.position, 8f, this.playersManager.playersMask));
			if (this.deadBody == null)
			{
				yield break;
			}
			this.deadBody.SetRagdollPositionSafely(newBodyPosition, false);
			yield break;
		}

		// Token: 0x0600102F RID: 4143 RVA: 0x0008DE10 File Offset: 0x0008C010
		private void LateUpdate()
		{
			if (this.isFirstFrameLateUpdate)
			{
				this.isFirstFrameLateUpdate = false;
				this.previousElevatorPosition = this.playersManager.elevatorTransform.position;
			}
			else if (base.IsOwner && this.isPlayerControlled && (!base.IsServer || this.isHostPlayerObject))
			{
				if (this.isInElevator)
				{
					if (!this.wasInElevatorLastFrame)
					{
						this.wasInElevatorLastFrame = true;
						base.transform.SetParent(this.playersManager.elevatorTransform);
					}
				}
				else if (this.wasInElevatorLastFrame)
				{
					this.wasInElevatorLastFrame = false;
					base.transform.SetParent(this.playersManager.playersContainer);
				}
			}
			this.previousElevatorPosition = this.playersManager.elevatorTransform.position;
			if (!this.isTestingPlayer)
			{
				if (NetworkManager.Singleton == null)
				{
					return;
				}
				if (!base.IsOwner && this.usernameAlpha.alpha >= 0f && GameNetworkManager.Instance.localPlayerController != null)
				{
					this.usernameAlpha.alpha -= Time.deltaTime;
					this.usernameBillboard.LookAt(GameNetworkManager.Instance.localPlayerController.localVisorTargetPoint);
				}
				else if (this.usernameCanvas.gameObject.activeSelf)
				{
					this.usernameCanvas.gameObject.SetActive(false);
				}
			}
			if (base.IsOwner && (!base.IsServer || this.isHostPlayerObject))
			{
				this.PlayerLookInput();
				if (this.isPlayerControlled && !this.isPlayerDead)
				{
					if (GameNetworkManager.Instance != null)
					{
						float num;
						if (this.inSpecialInteractAnimation)
						{
							num = 0.06f;
						}
						else if (this.NearOtherPlayers(this, 10f))
						{
							num = 0.1f;
						}
						else
						{
							num = 0.24f;
						}
						if ((this.oldPlayerPosition - base.transform.localPosition).sqrMagnitude > num || this.updatePositionForNewlyJoinedClient)
						{
							this.updatePositionForNewlyJoinedClient = false;
							if (!this.playersManager.newGameIsLoading)
							{
								this.UpdatePlayerPositionServerRpc(this.thisPlayerBody.localPosition, this.isInElevator, this.isExhausted, this.thisController.isGrounded);
								this.oldPlayerPosition = base.transform.localPosition;
							}
						}
						if (this.currentlyHeldObjectServer != null && this.isHoldingObject && this.grabbedObjectValidated)
						{
							this.currentlyHeldObjectServer.transform.localPosition = this.currentlyHeldObjectServer.itemProperties.positionOffset;
							this.currentlyHeldObjectServer.transform.localEulerAngles = this.currentlyHeldObjectServer.itemProperties.rotationOffset;
						}
					}
					this.localVisor.position = this.localVisorTargetPoint.position;
					this.localVisor.rotation = Quaternion.Lerp(this.localVisor.rotation, this.localVisorTargetPoint.rotation, 53f * Mathf.Clamp(Time.deltaTime, 0.0167f, 20f));
					float num2 = 1f;
					if (this.drunkness > 0.02f)
					{
						num2 *= Mathf.Abs(StartOfRound.Instance.drunknessSpeedEffect.Evaluate(this.drunkness) - 1.25f);
					}
					if (this.isSprinting)
					{
						this.sprintMeter = Mathf.Clamp(this.sprintMeter - Time.deltaTime / this.sprintTime * this.carryWeight * num2, 0f, 1f);
					}
					else if (this.isMovementHindered > 0)
					{
						if (this.isWalking)
						{
							this.sprintMeter = Mathf.Clamp(this.sprintMeter - Time.deltaTime / this.sprintTime * num2 * 0.5f, 0f, 1f);
						}
					}
					else
					{
						if (!this.isWalking)
						{
							this.sprintMeter = Mathf.Clamp(this.sprintMeter + Time.deltaTime / (this.sprintTime + 4f) * num2, 0f, 1f);
						}
						else
						{
							this.sprintMeter = Mathf.Clamp(this.sprintMeter + Time.deltaTime / (this.sprintTime + 9f) * num2, 0f, 1f);
						}
						if (this.isExhausted && this.sprintMeter > 0.2f)
						{
							this.isExhausted = false;
						}
					}
					this.sprintMeterUI.fillAmount = this.sprintMeter;
					float num3;
					if (this.isHoldingObject && this.currentlyHeldObjectServer != null && this.currentlyHeldObjectServer.itemProperties.requiresBattery)
					{
						HUDManager.Instance.batteryMeter.fillAmount = this.currentlyHeldObjectServer.insertedBattery.charge / 1.3f;
						HUDManager.Instance.batteryMeter.gameObject.SetActive(true);
						HUDManager.Instance.batteryIcon.enabled = true;
						num3 = this.currentlyHeldObjectServer.insertedBattery.charge / 1.3f;
					}
					else if (this.helmetLight.enabled)
					{
						HUDManager.Instance.batteryMeter.fillAmount = this.pocketedFlashlight.insertedBattery.charge / 1.3f;
						HUDManager.Instance.batteryMeter.gameObject.SetActive(true);
						HUDManager.Instance.batteryIcon.enabled = true;
						num3 = this.pocketedFlashlight.insertedBattery.charge / 1.3f;
					}
					else
					{
						HUDManager.Instance.batteryMeter.gameObject.SetActive(false);
						HUDManager.Instance.batteryIcon.enabled = false;
						num3 = 1f;
					}
					HUDManager.Instance.batteryBlinkUI.SetBool("blink", num3 < 0.2f && num3 > 0f);
					this.timeSinceSwitchingSlots += Time.deltaTime;
					if (this.limpMultiplier > 0f)
					{
						this.limpMultiplier -= Time.deltaTime / 2f;
					}
					if (this.health < 20)
					{
						if (this.healthRegenerateTimer <= 0f)
						{
							this.healthRegenerateTimer = 1f;
							this.health++;
							if (this.health >= 20)
							{
								this.MakeCriticallyInjured(false);
							}
							HUDManager.Instance.UpdateHealthUI(this.health, false);
						}
						else
						{
							this.healthRegenerateTimer -= Time.deltaTime;
						}
					}
					this.SetHoverTipAndCurrentInteractTrigger();
				}
			}
			if (!this.inSpecialInteractAnimation && this.localArmsMatchCamera)
			{
				this.localArmsTransform.position = this.cameraContainerTransform.transform.position + this.gameplayCamera.transform.up * -0.5f;
				this.playerModelArmsMetarig.rotation = this.localArmsRotationTarget.rotation;
			}
			if (this.playersManager.overrideSpectateCamera)
			{
				return;
			}
			if (base.IsOwner && this.isPlayerDead && (!base.IsServer || this.isHostPlayerObject))
			{
				if (this.isInGameOverAnimation > 0f && this.deadBody != null)
				{
					this.spectateCameraPivot.position = this.deadBody.bodyParts[0].position;
					this.RaycastSpectateCameraAroundPivot();
					return;
				}
				if (this.spectatedPlayerScript != null)
				{
					if (this.spectatedPlayerScript.isPlayerDead)
					{
						if (StartOfRound.Instance.allPlayersDead)
						{
							StartOfRound.Instance.SetSpectateCameraToGameOverMode(true, null);
						}
						if (this.spectatedPlayerDeadTimer < 1.5f)
						{
							this.spectatedPlayerDeadTimer += Time.deltaTime;
							if (this.spectatedPlayerScript.deadBody != null)
							{
								this.spectateCameraPivot.position = this.spectatedPlayerScript.deadBody.bodyParts[0].position;
								this.RaycastSpectateCameraAroundPivot();
							}
							return;
						}
						this.spectatedPlayerDeadTimer = 0f;
						this.SpectateNextPlayer();
					}
					this.spectateCameraPivot.position = this.spectatedPlayerScript.lowerSpine.position + Vector3.up * 0.7f;
					this.RaycastSpectateCameraAroundPivot();
					return;
				}
				if (StartOfRound.Instance.allPlayersDead)
				{
					StartOfRound.Instance.SetSpectateCameraToGameOverMode(true, null);
					this.SetSpectatedPlayerEffects(true);
					return;
				}
				this.SpectateNextPlayer();
			}
		}

		// Token: 0x06001030 RID: 4144 RVA: 0x0008E634 File Offset: 0x0008C834
		private void RaycastSpectateCameraAroundPivot()
		{
			this.interactRay = new Ray(this.spectateCameraPivot.position, -this.spectateCameraPivot.forward);
			if (Physics.Raycast(this.interactRay, out this.hit, 1.4f, this.walkableSurfacesNoPlayersMask, QueryTriggerInteraction.Ignore))
			{
				this.playersManager.spectateCamera.transform.position = this.interactRay.GetPoint(this.hit.distance - 0.25f);
			}
			else
			{
				this.playersManager.spectateCamera.transform.position = this.interactRay.GetPoint(1.3f);
			}
			this.playersManager.spectateCamera.transform.LookAt(this.spectateCameraPivot);
		}

		// Token: 0x06001031 RID: 4145 RVA: 0x0008E6FC File Offset: 0x0008C8FC
		private void SetHoverTipAndCurrentInteractTrigger()
		{
			if (!this.isGrabbingObjectAnimation)
			{
				this.interactRay = new Ray(this.gameplayCamera.transform.position, this.gameplayCamera.transform.forward);
				if (Physics.Raycast(this.interactRay, out this.hit, this.grabDistance, this.interactableObjectsMask) && this.hit.collider.gameObject.layer != 8)
				{
					string tag = this.hit.collider.tag;
					if (!(tag == "PhysicsProp"))
					{
						if (tag == "InteractTrigger")
						{
							InteractTrigger component = this.hit.transform.gameObject.GetComponent<InteractTrigger>();
							if (component != this.previousHoveringOverTrigger && this.previousHoveringOverTrigger != null)
							{
								this.previousHoveringOverTrigger.isBeingHeldByPlayer = false;
							}
							if (!(component == null))
							{
								this.hoveringOverTrigger = component;
								if (!component.interactable)
								{
									this.cursorIcon.sprite = component.disabledHoverIcon;
									this.cursorIcon.enabled = (component.disabledHoverIcon != null);
									this.cursorTip.text = component.disabledHoverTip;
								}
								else if (component.isPlayingSpecialAnimation)
								{
									this.cursorIcon.enabled = false;
									this.cursorTip.text = "";
								}
								else if (this.isHoldingInteract)
								{
									if (this.twoHanded)
									{
										this.cursorTip.text = "[Hands full]";
									}
									else if (!string.IsNullOrEmpty(component.holdTip))
									{
										this.cursorTip.text = component.holdTip;
									}
								}
								else
								{
									this.cursorIcon.enabled = true;
									this.cursorIcon.sprite = component.hoverIcon;
									this.cursorTip.text = component.hoverTip;
								}
							}
						}
					}
					else
					{
						if (this.FirstEmptyItemSlot() == -1)
						{
							this.cursorTip.text = "Inventory full!";
						}
						else
						{
							GrabbableObject component2 = this.hit.collider.gameObject.GetComponent<GrabbableObject>();
							if (!GameNetworkManager.Instance.gameHasStarted && !component2.itemProperties.canBeGrabbedBeforeGameStart && StartOfRound.Instance.testRoom == null)
							{
								this.cursorTip.text = "(Cannot hold until ship has landed)";
								goto IL_2EA;
							}
							if (component2 != null && !string.IsNullOrEmpty(component2.customGrabTooltip))
							{
								this.cursorTip.text = component2.customGrabTooltip;
							}
							else
							{
								this.cursorTip.text = "Grab : [E]";
							}
						}
						this.cursorIcon.enabled = true;
						this.cursorIcon.sprite = this.grabItemIcon;
					}
				}
				else
				{
					this.cursorIcon.enabled = false;
					this.cursorTip.text = "";
					if (this.hoveringOverTrigger != null)
					{
						this.previousHoveringOverTrigger = this.hoveringOverTrigger;
					}
					this.hoveringOverTrigger = null;
				}
				IL_2EA:
				if (!this.isFreeCamera && Physics.Raycast(this.interactRay, out this.hit, 5f, this.playerMask))
				{
					PlayerControllerB component3 = this.hit.collider.gameObject.GetComponent<PlayerControllerB>();
					if (component3 != null)
					{
						component3.ShowNameBillboard();
					}
				}
			}
			if (StartOfRound.Instance.localPlayerUsingController)
			{
				StringBuilder stringBuilder = new StringBuilder(this.cursorTip.text);
				stringBuilder.Replace("[E]", "[X]");
				stringBuilder.Replace("[LMB]", "[X]");
				stringBuilder.Replace("[RMB]", "[R-Trigger]");
				stringBuilder.Replace("[F]", "[R-Shoulder]");
				stringBuilder.Replace("[Z]", "[L-Shoulder]");
				this.cursorTip.text = stringBuilder.ToString();
				return;
			}
			this.cursorTip.text = this.cursorTip.text.Replace("[LMB]", "[E]");
		}

		// Token: 0x06001032 RID: 4146 RVA: 0x0008EAEE File Offset: 0x0008CCEE
		public void ShowNameBillboard()
		{
			this.usernameAlpha.alpha = 1f;
			this.usernameCanvas.gameObject.SetActive(true);
		}

		// Token: 0x06001033 RID: 4147 RVA: 0x0008EB11 File Offset: 0x0008CD11
		public bool IsPlayerServer()
		{
			return base.IsServer;
		}

		// Token: 0x06001034 RID: 4148 RVA: 0x0008EB1C File Offset: 0x0008CD1C
		private void SpectateNextPlayer()
		{
			int num = 0;
			if (this.spectatedPlayerScript != null)
			{
				num = (int)this.spectatedPlayerScript.playerClientId;
			}
			for (int i = 0; i < 4; i++)
			{
				num = (num + 1) % 4;
				if (!this.playersManager.allPlayerScripts[num].isPlayerDead && this.playersManager.allPlayerScripts[num].isPlayerControlled && this.playersManager.allPlayerScripts[num] != this)
				{
					this.spectatedPlayerScript = this.playersManager.allPlayerScripts[num];
					this.SetSpectatedPlayerEffects(false);
					return;
				}
			}
			if (this.deadBody != null && this.deadBody.gameObject.activeSelf)
			{
				this.spectateCameraPivot.position = this.deadBody.bodyParts[0].position;
				this.RaycastSpectateCameraAroundPivot();
			}
			StartOfRound.Instance.SetPlayerSafeInShip();
		}

		// Token: 0x06001035 RID: 4149 RVA: 0x0008EC00 File Offset: 0x0008CE00
		public void SetSpectatedPlayerEffects(bool allPlayersDead = false)
		{
			try
			{
				if (this.spectatedPlayerScript != null)
				{
					HUDManager.Instance.SetSpectatingTextToPlayer(this.spectatedPlayerScript);
				}
				else
				{
					HUDManager.Instance.spectatingPlayerText.text = "";
				}
				TimeOfDay timeOfDay = Object.FindObjectOfType<TimeOfDay>();
				if (allPlayersDead)
				{
					for (int i = 0; i < timeOfDay.effects.Length; i++)
					{
						timeOfDay.effects[i].effectEnabled = false;
					}
					if (timeOfDay.sunDirect != null)
					{
						timeOfDay.sunDirect.enabled = true;
						timeOfDay.sunIndirect.GetComponent<HDAdditionalLightData>().lightDimmer = 1f;
					}
					AudioReverbPresets audioReverbPresets = Object.FindObjectOfType<AudioReverbPresets>();
					if (audioReverbPresets != null && audioReverbPresets.audioPresets.Length > 3)
					{
						GameNetworkManager.Instance.localPlayerController.reverbPreset = audioReverbPresets.audioPresets[3].reverbPreset;
					}
				}
				else
				{
					AudioReverbTrigger audioReverbTrigger = this.spectatedPlayerScript.currentAudioTrigger;
					if (audioReverbTrigger == null)
					{
						TimeOfDay.Instance.SetInsideLightingDimness(true, this.spectatedPlayerScript.isInsideFactory || this.spectatedPlayerScript.isInHangarShipRoom);
					}
					else
					{
						if (audioReverbTrigger.localFog != null)
						{
							if (audioReverbTrigger.toggleLocalFog)
							{
								audioReverbTrigger.localFog.parameters.meanFreePath = audioReverbTrigger.fogEnabledAmount;
							}
							else
							{
								audioReverbTrigger.localFog.parameters.meanFreePath = 200f;
							}
						}
						TimeOfDay.Instance.SetInsideLightingDimness(true, audioReverbTrigger.setInsideAtmosphere && audioReverbTrigger.insideLighting);
						if (audioReverbTrigger.disableAllWeather || this.spectatedPlayerScript.isInsideFactory)
						{
							TimeOfDay.Instance.DisableAllWeather(false);
						}
						else
						{
							if (audioReverbTrigger.enableCurrentLevelWeather && TimeOfDay.Instance.currentLevelWeather != LevelWeatherType.None)
							{
								TimeOfDay.Instance.effects[(int)TimeOfDay.Instance.currentLevelWeather].effectEnabled = true;
							}
							if (audioReverbTrigger.weatherEffect != -1)
							{
								TimeOfDay.Instance.effects[audioReverbTrigger.weatherEffect].effectEnabled = audioReverbTrigger.effectEnabled;
							}
						}
						StartOfRound.Instance.UpdatePlayerVoiceEffects();
					}
				}
			}
			catch (Exception arg)
			{
				Debug.LogError(string.Format("Error caught in SpectatedPlayerEffects: {0}", arg));
			}
		}

		// Token: 0x06001036 RID: 4150 RVA: 0x0008EE2C File Offset: 0x0008D02C
		public void AddBloodToBody()
		{
			for (int i = 0; i < this.bodyBloodDecals.Length; i++)
			{
				if (!this.bodyBloodDecals[i].activeSelf)
				{
					this.bodyBloodDecals[i].SetActive(true);
					return;
				}
			}
		}

		// Token: 0x06001037 RID: 4151 RVA: 0x0008EE6C File Offset: 0x0008D06C
		public void RemoveBloodFromBody()
		{
			for (int i = 0; i < this.bodyBloodDecals.Length; i++)
			{
				this.bodyBloodDecals[i].SetActive(false);
			}
		}

		// Token: 0x06001038 RID: 4152 RVA: 0x0008EE9C File Offset: 0x0008D09C
		void IHittable.Hit(int force, Vector3 hitDirection, PlayerControllerB playerWhoHit, bool playHitSFX = false)
		{
			if (!this.AllowPlayerDeath())
			{
				return;
			}
			CentipedeAI[] array = Object.FindObjectsByType<CentipedeAI>(FindObjectsSortMode.None);
			for (int i = 0; i < array.Length; i++)
			{
				if (array[i].clingingToPlayer == this)
				{
					return;
				}
			}
			if (this.inAnimationWithEnemy)
			{
				return;
			}
			if (force <= 2)
			{
				this.DamagePlayerFromOtherClientServerRpc(10, hitDirection, (int)playerWhoHit.playerClientId);
				return;
			}
			if (force <= 4)
			{
				this.DamagePlayerFromOtherClientServerRpc(30, hitDirection, (int)playerWhoHit.playerClientId);
				return;
			}
			this.DamagePlayerFromOtherClientServerRpc(100, hitDirection, (int)playerWhoHit.playerClientId);
		}

		// Token: 0x06001039 RID: 4153 RVA: 0x0008EF20 File Offset: 0x0008D120
		[ServerRpc(RequireOwnership = false)]
		public void DamagePlayerFromOtherClientServerRpc(int damageAmount, Vector3 hitDirection, int playerWhoHit)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server && (networkManager.IsClient || networkManager.IsHost))
			{
				ServerRpcParams serverRpcParams;
				FastBufferWriter writer = base.__beginSendServerRpc(638895557U, serverRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, damageAmount);
				writer.WriteValueSafe(hitDirection);
				BytePacker.WriteValueBitPacked(writer, playerWhoHit);
				base.__endSendServerRpc(ref writer, 638895557U, serverRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Server || (!networkManager.IsServer && !networkManager.IsHost))
			{
				return;
			}
			this.DamagePlayerFromOtherClientClientRpc(damageAmount, hitDirection, playerWhoHit, this.health - damageAmount);
		}

		// Token: 0x0600103A RID: 4154 RVA: 0x0008F020 File Offset: 0x0008D220
		[ClientRpc]
		public void DamagePlayerFromOtherClientClientRpc(int damageAmount, Vector3 hitDirection, int playerWhoHit, int newHealthAmount)
		{
			NetworkManager networkManager = base.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client && (networkManager.IsServer || networkManager.IsHost))
			{
				ClientRpcParams clientRpcParams;
				FastBufferWriter writer = base.__beginSendClientRpc(2557046125U, clientRpcParams, RpcDelivery.Reliable);
				BytePacker.WriteValueBitPacked(writer, damageAmount);
				writer.WriteValueSafe(hitDirection);
				BytePacker.WriteValueBitPacked(writer, playerWhoHit);
				BytePacker.WriteValueBitPacked(writer, newHealthAmount);
				base.__endSendClientRpc(ref writer, 2557046125U, clientRpcParams, RpcDelivery.Reliable);
			}
			if (this.__rpc_exec_stage != NetworkBehaviour.__RpcExecStage.Client || (!networkManager.IsClient && !networkManager.IsHost))
			{
				return;
			}
			if (!this.AllowPlayerDeath())
			{
				return;
			}
			this.DamageOnOtherClients(damageAmount, newHealthAmount);
			if (base.IsOwner && this.isPlayerControlled)
			{
				CentipedeAI[] array = Object.FindObjectsByType<CentipedeAI>(FindObjectsSortMode.None);
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].clingingToPlayer == this)
					{
						return;
					}
				}
				this.DamagePlayer(damageAmount, true, false, CauseOfDeath.Bludgeoning, 0, false, default(Vector3));
			}
			this.movementAudio.PlayOneShot(StartOfRound.Instance.hitPlayerSFX);
			if (this.health < 6)
			{
				this.DropBlood(hitDirection, true, false);
				this.bodyBloodDecals[0].SetActive(true);
				this.playersManager.allPlayerScripts[playerWhoHit].AddBloodToBody();
				this.playersManager.allPlayerScripts[playerWhoHit].movementAudio.PlayOneShot(StartOfRound.Instance.bloodGoreSFX);
				WalkieTalkie.TransmitOneShotAudio(this.playersManager.allPlayerScripts[playerWhoHit].movementAudio, StartOfRound.Instance.bloodGoreSFX, 1f);
			}
		}

		// Token: 0x0600103B RID: 4155 RVA: 0x0008F208 File Offset: 0x0008D408
		public bool HasLineOfSightToPosition(Vector3 pos, float width = 45f, int range = 60, float proximityAwareness = -1f)
		{
			float num = Vector3.Distance(base.transform.position, pos);
			return num < (float)range && (Vector3.Angle(this.playerEye.transform.forward, pos - this.gameplayCamera.transform.position) < width || num < proximityAwareness) && !Physics.Linecast(this.playerEye.transform.position, pos, StartOfRound.Instance.collidersRoomDefaultAndFoliage, QueryTriggerInteraction.Ignore);
		}

		// Token: 0x0600103C RID: 4156 RVA: 0x0008F288 File Offset: 0x0008D488
		public float LineOfSightToPositionAngle(Vector3 pos, int range = 60, float proximityAwareness = -1f)
		{
			if (Vector3.Distance(base.transform.position, pos) < (float)range && !Physics.Linecast(this.playerEye.transform.position, pos, StartOfRound.Instance.collidersRoomDefaultAndFoliage, QueryTriggerInteraction.Ignore))
			{
				return Vector3.Angle(this.playerEye.transform.forward, pos - this.gameplayCamera.transform.position);
			}
			return -361f;
		}

		// Token: 0x0600103D RID: 4157 RVA: 0x0008F300 File Offset: 0x0008D500
		public PlayerControllerB()
		{
		}

		// Token: 0x06001040 RID: 4160 RVA: 0x0008F494 File Offset: 0x0008D694
		protected override void __initializeVariables()
		{
			base.__initializeVariables();
		}

		// Token: 0x06001041 RID: 4161 RVA: 0x0008F4AC File Offset: 0x0008D6AC
		[RuntimeInitializeOnLoadMethod]
		internal static void InitializeRPCS_PlayerControllerB()
		{
			NetworkManager.__rpc_func_table.Add(800455552U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_800455552));
			NetworkManager.__rpc_func_table.Add(3591743514U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3591743514));
			NetworkManager.__rpc_func_table.Add(1084949295U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1084949295));
			NetworkManager.__rpc_func_table.Add(1822320450U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1822320450));
			NetworkManager.__rpc_func_table.Add(3986869491U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3986869491));
			NetworkManager.__rpc_func_table.Add(1090586009U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1090586009));
			NetworkManager.__rpc_func_table.Add(341877959U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_341877959));
			NetworkManager.__rpc_func_table.Add(2005250174U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2005250174));
			NetworkManager.__rpc_func_table.Add(4195705835U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_4195705835));
			NetworkManager.__rpc_func_table.Add(3390857164U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3390857164));
			NetworkManager.__rpc_func_table.Add(2585603452U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2585603452));
			NetworkManager.__rpc_func_table.Add(2196003333U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2196003333));
			NetworkManager.__rpc_func_table.Add(3803364611U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3803364611));
			NetworkManager.__rpc_func_table.Add(1955832627U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1955832627));
			NetworkManager.__rpc_func_table.Add(878005044U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_878005044));
			NetworkManager.__rpc_func_table.Add(655708081U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_655708081));
			NetworkManager.__rpc_func_table.Add(412259855U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_412259855));
			NetworkManager.__rpc_func_table.Add(141629807U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_141629807));
			NetworkManager.__rpc_func_table.Add(1554282707U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1554282707));
			NetworkManager.__rpc_func_table.Add(2552479808U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2552479808));
			NetworkManager.__rpc_func_table.Add(1786952262U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1786952262));
			NetworkManager.__rpc_func_table.Add(2217326231U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2217326231));
			NetworkManager.__rpc_func_table.Add(2376977494U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2376977494));
			NetworkManager.__rpc_func_table.Add(3943098567U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3943098567));
			NetworkManager.__rpc_func_table.Add(3830452098U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3830452098));
			NetworkManager.__rpc_func_table.Add(3771510012U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3771510012));
			NetworkManager.__rpc_func_table.Add(588787670U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_588787670));
			NetworkManager.__rpc_func_table.Add(2188611472U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2188611472));
			NetworkManager.__rpc_func_table.Add(3789403418U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3789403418));
			NetworkManager.__rpc_func_table.Add(2444895710U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2444895710));
			NetworkManager.__rpc_func_table.Add(3473255830U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3473255830));
			NetworkManager.__rpc_func_table.Add(3386813972U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3386813972));
			NetworkManager.__rpc_func_table.Add(2480354441U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2480354441));
			NetworkManager.__rpc_func_table.Add(2281795056U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2281795056));
			NetworkManager.__rpc_func_table.Add(2581007949U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2581007949));
			NetworkManager.__rpc_func_table.Add(153310197U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_153310197));
			NetworkManager.__rpc_func_table.Add(3332990272U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3332990272));
			NetworkManager.__rpc_func_table.Add(983565270U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_983565270));
			NetworkManager.__rpc_func_table.Add(2504133785U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2504133785));
			NetworkManager.__rpc_func_table.Add(956616685U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_956616685));
			NetworkManager.__rpc_func_table.Add(3237016509U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3237016509));
			NetworkManager.__rpc_func_table.Add(1367193869U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1367193869));
			NetworkManager.__rpc_func_table.Add(1048203095U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1048203095));
			NetworkManager.__rpc_func_table.Add(1284827260U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1284827260));
			NetworkManager.__rpc_func_table.Add(3262284737U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_3262284737));
			NetworkManager.__rpc_func_table.Add(4067397557U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_4067397557));
			NetworkManager.__rpc_func_table.Add(1346025125U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1346025125));
			NetworkManager.__rpc_func_table.Add(168339603U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_168339603));
			NetworkManager.__rpc_func_table.Add(1388366573U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_1388366573));
			NetworkManager.__rpc_func_table.Add(899109231U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_899109231));
			NetworkManager.__rpc_func_table.Add(301044013U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_301044013));
			NetworkManager.__rpc_func_table.Add(638895557U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_638895557));
			NetworkManager.__rpc_func_table.Add(2557046125U, new NetworkManager.RpcReceiveHandler(PlayerControllerB.__rpc_handler_2557046125));
		}

		// Token: 0x06001042 RID: 4162 RVA: 0x0008FA50 File Offset: 0x0008DC50
		private static void __rpc_handler_800455552(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).BreakLegsSFXServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001043 RID: 4163 RVA: 0x0008FAF0 File Offset: 0x0008DCF0
		private static void __rpc_handler_3591743514(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).BreakLegsSFXClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001044 RID: 4164 RVA: 0x0008FB44 File Offset: 0x0008DD44
		private static void __rpc_handler_1084949295(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			int damageNumber;
			ByteUnpacker.ReadValueBitPacked(reader, out damageNumber);
			int newHealthAmount;
			ByteUnpacker.ReadValueBitPacked(reader, out newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).DamagePlayerServerRpc(damageNumber, newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001045 RID: 4165 RVA: 0x0008FC04 File Offset: 0x0008DE04
		private static void __rpc_handler_1822320450(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int damageNumber;
			ByteUnpacker.ReadValueBitPacked(reader, out damageNumber);
			int newHealthAmount;
			ByteUnpacker.ReadValueBitPacked(reader, out newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).DamagePlayerClientRpc(damageNumber, newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001046 RID: 4166 RVA: 0x0008FC78 File Offset: 0x0008DE78
		private static void __rpc_handler_3986869491(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			float sinkingSpeed;
			reader.ReadValueSafe<float>(out sinkingSpeed, default(FastBufferWriter.ForPrimitives));
			int audioClipIndex;
			ByteUnpacker.ReadValueBitPacked(reader, out audioClipIndex);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).StartSinkingServerRpc(sinkingSpeed, audioClipIndex);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001047 RID: 4167 RVA: 0x0008FD48 File Offset: 0x0008DF48
		private static void __rpc_handler_1090586009(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			float sinkingSpeed;
			reader.ReadValueSafe<float>(out sinkingSpeed, default(FastBufferWriter.ForPrimitives));
			int audioClipIndex;
			ByteUnpacker.ReadValueBitPacked(reader, out audioClipIndex);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).StartSinkingClientRpc(sinkingSpeed, audioClipIndex);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001048 RID: 4168 RVA: 0x0008FDCC File Offset: 0x0008DFCC
		private static void __rpc_handler_341877959(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).StopSinkingServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001049 RID: 4169 RVA: 0x0008FE6C File Offset: 0x0008E06C
		private static void __rpc_handler_2005250174(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).StopSinkingClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104A RID: 4170 RVA: 0x0008FEC0 File Offset: 0x0008E0C0
		private static void __rpc_handler_4195705835(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).MakeCriticallyInjuredServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104B RID: 4171 RVA: 0x0008FF60 File Offset: 0x0008E160
		private static void __rpc_handler_3390857164(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).MakeCriticallyInjuredClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104C RID: 4172 RVA: 0x0008FFB4 File Offset: 0x0008E1B4
		private static void __rpc_handler_2585603452(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).HealServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104D RID: 4173 RVA: 0x00090054 File Offset: 0x0008E254
		private static void __rpc_handler_2196003333(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).HealClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104E RID: 4174 RVA: 0x000900A8 File Offset: 0x0008E2A8
		private static void __rpc_handler_3803364611(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).StartPerformingEmoteServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600104F RID: 4175 RVA: 0x00090148 File Offset: 0x0008E348
		private static void __rpc_handler_1955832627(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).StartPerformingEmoteClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001050 RID: 4176 RVA: 0x0009019C File Offset: 0x0008E39C
		private static void __rpc_handler_878005044(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).StopPerformingEmoteServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001051 RID: 4177 RVA: 0x0009023C File Offset: 0x0008E43C
		private static void __rpc_handler_655708081(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).StopPerformingEmoteClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001052 RID: 4178 RVA: 0x00090290 File Offset: 0x0008E490
		private static void __rpc_handler_412259855(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			bool forward;
			reader.ReadValueSafe<bool>(out forward, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).SwitchItemSlotsServerRpc(forward);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001053 RID: 4179 RVA: 0x00090350 File Offset: 0x0008E550
		private static void __rpc_handler_141629807(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool forward;
			reader.ReadValueSafe<bool>(out forward, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).SwitchItemSlotsClientRpc(forward);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001054 RID: 4180 RVA: 0x000903C0 File Offset: 0x0008E5C0
		private static void __rpc_handler_1554282707(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).GrabObjectServerRpc(grabbedObject);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001055 RID: 4181 RVA: 0x00090480 File Offset: 0x0008E680
		private static void __rpc_handler_2552479808(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool grabValidated;
			reader.ReadValueSafe<bool>(out grabValidated, default(FastBufferWriter.ForPrimitives));
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).GrabObjectClientRpc(grabValidated, grabbedObject);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001056 RID: 4182 RVA: 0x00090510 File Offset: 0x0008E710
		private static void __rpc_handler_1786952262(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).DespawnHeldObjectServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001057 RID: 4183 RVA: 0x000905B0 File Offset: 0x0008E7B0
		private static void __rpc_handler_2217326231(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).DespawnHeldObjectClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001058 RID: 4184 RVA: 0x00090604 File Offset: 0x0008E804
		private static void __rpc_handler_2376977494(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			bool droppedInElevator;
			reader.ReadValueSafe<bool>(out droppedInElevator, default(FastBufferWriter.ForPrimitives));
			bool droppedInShipRoom;
			reader.ReadValueSafe<bool>(out droppedInShipRoom, default(FastBufferWriter.ForPrimitives));
			Vector3 targetFloorPosition;
			reader.ReadValueSafe(out targetFloorPosition);
			int floorYRot;
			ByteUnpacker.ReadValueBitPacked(reader, out floorYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).ThrowObjectServerRpc(grabbedObject, droppedInElevator, droppedInShipRoom, targetFloorPosition, floorYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001059 RID: 4185 RVA: 0x00090724 File Offset: 0x0008E924
		private static void __rpc_handler_3943098567(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool droppedInElevator;
			reader.ReadValueSafe<bool>(out droppedInElevator, default(FastBufferWriter.ForPrimitives));
			bool droppedInShipRoom;
			reader.ReadValueSafe<bool>(out droppedInShipRoom, default(FastBufferWriter.ForPrimitives));
			Vector3 targetFloorPosition;
			reader.ReadValueSafe(out targetFloorPosition);
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			int floorYRot;
			ByteUnpacker.ReadValueBitPacked(reader, out floorYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).ThrowObjectClientRpc(droppedInElevator, droppedInShipRoom, targetFloorPosition, grabbedObject, floorYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105A RID: 4186 RVA: 0x000907F4 File Offset: 0x0008E9F4
		private static void __rpc_handler_3830452098(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			NetworkObjectReference parentObject;
			reader.ReadValueSafe<NetworkObjectReference>(out parentObject, default(FastBufferWriter.ForNetworkSerializable));
			Vector3 placePositionOffset;
			reader.ReadValueSafe(out placePositionOffset);
			bool matchRotationOfParent;
			reader.ReadValueSafe<bool>(out matchRotationOfParent, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).PlaceObjectServerRpc(grabbedObject, parentObject, placePositionOffset, matchRotationOfParent);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105B RID: 4187 RVA: 0x00090900 File Offset: 0x0008EB00
		private static void __rpc_handler_3771510012(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			NetworkObjectReference parentObjectReference;
			reader.ReadValueSafe<NetworkObjectReference>(out parentObjectReference, default(FastBufferWriter.ForNetworkSerializable));
			Vector3 placePositionOffset;
			reader.ReadValueSafe(out placePositionOffset);
			bool matchRotationOfParent;
			reader.ReadValueSafe<bool>(out matchRotationOfParent, default(FastBufferWriter.ForPrimitives));
			NetworkObjectReference grabbedObject;
			reader.ReadValueSafe<NetworkObjectReference>(out grabbedObject, default(FastBufferWriter.ForNetworkSerializable));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).PlaceObjectClientRpc(parentObjectReference, placePositionOffset, matchRotationOfParent, grabbedObject);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105C RID: 4188 RVA: 0x000909C0 File Offset: 0x0008EBC0
		private static void __rpc_handler_588787670(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			short newRot;
			ByteUnpacker.ReadValueBitPacked(reader, out newRot);
			short newYRot;
			ByteUnpacker.ReadValueBitPacked(reader, out newYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).UpdatePlayerRotationServerRpc(newRot, newYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105D RID: 4189 RVA: 0x00090A80 File Offset: 0x0008EC80
		private static void __rpc_handler_2188611472(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			short newRot;
			ByteUnpacker.ReadValueBitPacked(reader, out newRot);
			short newYRot;
			ByteUnpacker.ReadValueBitPacked(reader, out newYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).UpdatePlayerRotationClientRpc(newRot, newYRot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105E RID: 4190 RVA: 0x00090AF4 File Offset: 0x0008ECF4
		private static void __rpc_handler_3789403418(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			Vector3 playerEulers;
			reader.ReadValueSafe(out playerEulers);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).UpdatePlayerRotationFullServerRpc(playerEulers);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600105F RID: 4191 RVA: 0x00090BA4 File Offset: 0x0008EDA4
		private static void __rpc_handler_2444895710(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			Vector3 playerEulers;
			reader.ReadValueSafe(out playerEulers);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).UpdatePlayerRotationFullClientRpc(playerEulers);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001060 RID: 4192 RVA: 0x00090C08 File Offset: 0x0008EE08
		private static void __rpc_handler_3473255830(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			int animationState;
			ByteUnpacker.ReadValueBitPacked(reader, out animationState);
			float animationSpeed;
			reader.ReadValueSafe<float>(out animationSpeed, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).UpdatePlayerAnimationServerRpc(animationState, animationSpeed);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001061 RID: 4193 RVA: 0x00090CD8 File Offset: 0x0008EED8
		private static void __rpc_handler_3386813972(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int animationState;
			ByteUnpacker.ReadValueBitPacked(reader, out animationState);
			float animationSpeed;
			reader.ReadValueSafe<float>(out animationSpeed, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).UpdatePlayerAnimationClientRpc(animationState, animationSpeed);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001062 RID: 4194 RVA: 0x00090D5C File Offset: 0x0008EF5C
		private static void __rpc_handler_2480354441(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			bool specialAnimation;
			reader.ReadValueSafe<bool>(out specialAnimation, default(FastBufferWriter.ForPrimitives));
			float timed;
			reader.ReadValueSafe<float>(out timed, default(FastBufferWriter.ForPrimitives));
			bool climbingLadder;
			reader.ReadValueSafe<bool>(out climbingLadder, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).IsInSpecialAnimationServerRpc(specialAnimation, timed, climbingLadder);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001063 RID: 4195 RVA: 0x00090E58 File Offset: 0x0008F058
		private static void __rpc_handler_2281795056(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool specialAnimation;
			reader.ReadValueSafe<bool>(out specialAnimation, default(FastBufferWriter.ForPrimitives));
			float timed;
			reader.ReadValueSafe<float>(out timed, default(FastBufferWriter.ForPrimitives));
			bool climbingLadder;
			reader.ReadValueSafe<bool>(out climbingLadder, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).IsInSpecialAnimationClientRpc(specialAnimation, timed, climbingLadder);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001064 RID: 4196 RVA: 0x00090F08 File Offset: 0x0008F108
		private static void __rpc_handler_2581007949(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			Vector3 newPos;
			reader.ReadValueSafe(out newPos);
			bool inElevator;
			reader.ReadValueSafe<bool>(out inElevator, default(FastBufferWriter.ForPrimitives));
			bool exhausted;
			reader.ReadValueSafe<bool>(out exhausted, default(FastBufferWriter.ForPrimitives));
			bool isPlayerGrounded;
			reader.ReadValueSafe<bool>(out isPlayerGrounded, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).UpdatePlayerPositionServerRpc(newPos, inElevator, exhausted, isPlayerGrounded);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001065 RID: 4197 RVA: 0x00091014 File Offset: 0x0008F214
		private static void __rpc_handler_153310197(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			Vector3 newPos;
			reader.ReadValueSafe(out newPos);
			bool inElevator;
			reader.ReadValueSafe<bool>(out inElevator, default(FastBufferWriter.ForPrimitives));
			bool exhausted;
			reader.ReadValueSafe<bool>(out exhausted, default(FastBufferWriter.ForPrimitives));
			bool isPlayerGrounded;
			reader.ReadValueSafe<bool>(out isPlayerGrounded, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).UpdatePlayerPositionClientRpc(newPos, inElevator, exhausted, isPlayerGrounded);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001066 RID: 4198 RVA: 0x000910D4 File Offset: 0x0008F2D4
		private static void __rpc_handler_3332990272(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			bool fallHard;
			reader.ReadValueSafe<bool>(out fallHard, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).LandFromJumpServerRpc(fallHard);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001067 RID: 4199 RVA: 0x00091194 File Offset: 0x0008F394
		private static void __rpc_handler_983565270(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool fallHard;
			reader.ReadValueSafe<bool>(out fallHard, default(FastBufferWriter.ForPrimitives));
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).LandFromJumpClientRpc(fallHard);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001068 RID: 4200 RVA: 0x00091204 File Offset: 0x0008F404
		private static void __rpc_handler_2504133785(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			ulong newPlayerSteamId;
			ByteUnpacker.ReadValueBitPacked(reader, out newPlayerSteamId);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).SendNewPlayerValuesServerRpc(newPlayerSteamId);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001069 RID: 4201 RVA: 0x00091268 File Offset: 0x0008F468
		private static void __rpc_handler_956616685(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			bool flag;
			reader.ReadValueSafe<bool>(out flag, default(FastBufferWriter.ForPrimitives));
			ulong[] playerSteamIds = null;
			if (flag)
			{
				reader.ReadValueSafe<ulong>(out playerSteamIds, default(FastBufferWriter.ForPrimitives));
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).SendNewPlayerValuesClientRpc(playerSteamIds);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106A RID: 4202 RVA: 0x00091304 File Offset: 0x0008F504
		private static void __rpc_handler_3237016509(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).DisableJetpackModeServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106B RID: 4203 RVA: 0x000913A4 File Offset: 0x0008F5A4
		private static void __rpc_handler_1367193869(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).DisableJetpackModeClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106C RID: 4204 RVA: 0x000913F8 File Offset: 0x0008F5F8
		private static void __rpc_handler_1048203095(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).SetFaceUnderwaterServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106D RID: 4205 RVA: 0x00091498 File Offset: 0x0008F698
		private static void __rpc_handler_1284827260(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).SetFaceUnderwaterClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106E RID: 4206 RVA: 0x000914EC File Offset: 0x0008F6EC
		private static void __rpc_handler_3262284737(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).SetFaceOutOfWaterServerRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x0600106F RID: 4207 RVA: 0x0009158C File Offset: 0x0008F78C
		private static void __rpc_handler_4067397557(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).SetFaceOutOfWaterClientRpc();
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001070 RID: 4208 RVA: 0x000915E0 File Offset: 0x0008F7E0
		private static void __rpc_handler_1346025125(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			int playerId;
			ByteUnpacker.ReadValueBitPacked(reader, out playerId);
			bool spawnBody;
			reader.ReadValueSafe<bool>(out spawnBody, default(FastBufferWriter.ForPrimitives));
			Vector3 bodyVelocity;
			reader.ReadValueSafe(out bodyVelocity);
			int num;
			ByteUnpacker.ReadValueBitPacked(reader, out num);
			int deathAnimation;
			ByteUnpacker.ReadValueBitPacked(reader, out deathAnimation);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).KillPlayerServerRpc(playerId, spawnBody, bodyVelocity, num, deathAnimation);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001071 RID: 4209 RVA: 0x000916E4 File Offset: 0x0008F8E4
		private static void __rpc_handler_168339603(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int playerId;
			ByteUnpacker.ReadValueBitPacked(reader, out playerId);
			bool spawnBody;
			reader.ReadValueSafe<bool>(out spawnBody, default(FastBufferWriter.ForPrimitives));
			Vector3 bodyVelocity;
			reader.ReadValueSafe(out bodyVelocity);
			int num;
			ByteUnpacker.ReadValueBitPacked(reader, out num);
			int deathAnimation;
			ByteUnpacker.ReadValueBitPacked(reader, out deathAnimation);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).KillPlayerClientRpc(playerId, spawnBody, bodyVelocity, num, deathAnimation);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001072 RID: 4210 RVA: 0x00091798 File Offset: 0x0008F998
		private static void __rpc_handler_1388366573(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			if (rpcParams.Server.Receive.SenderClientId != target.OwnerClientId)
			{
				if (networkManager.LogLevel <= Unity.Netcode.LogLevel.Normal)
				{
					Debug.LogError("Only the owner can invoke a ServerRpc that requires ownership!");
				}
				return;
			}
			int itemSlot;
			ByteUnpacker.ReadValueBitPacked(reader, out itemSlot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).DestroyItemInSlotServerRpc(itemSlot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001073 RID: 4211 RVA: 0x00091848 File Offset: 0x0008FA48
		private static void __rpc_handler_899109231(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int itemSlot;
			ByteUnpacker.ReadValueBitPacked(reader, out itemSlot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).DestroyItemInSlotClientRpc(itemSlot);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001074 RID: 4212 RVA: 0x000918AC File Offset: 0x0008FAAC
		private static void __rpc_handler_301044013(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			Vector3 newBodyPosition;
			reader.ReadValueSafe(out newBodyPosition);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).SyncBodyPositionClientRpc(newBodyPosition);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001075 RID: 4213 RVA: 0x00091910 File Offset: 0x0008FB10
		private static void __rpc_handler_638895557(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int damageAmount;
			ByteUnpacker.ReadValueBitPacked(reader, out damageAmount);
			Vector3 hitDirection;
			reader.ReadValueSafe(out hitDirection);
			int playerWhoHit;
			ByteUnpacker.ReadValueBitPacked(reader, out playerWhoHit);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Server;
			((PlayerControllerB)target).DamagePlayerFromOtherClientServerRpc(damageAmount, hitDirection, playerWhoHit);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001076 RID: 4214 RVA: 0x00091994 File Offset: 0x0008FB94
		private static void __rpc_handler_2557046125(NetworkBehaviour target, FastBufferReader reader, __RpcParams rpcParams)
		{
			NetworkManager networkManager = target.NetworkManager;
			if (networkManager == null || !networkManager.IsListening)
			{
				return;
			}
			int damageAmount;
			ByteUnpacker.ReadValueBitPacked(reader, out damageAmount);
			Vector3 hitDirection;
			reader.ReadValueSafe(out hitDirection);
			int playerWhoHit;
			ByteUnpacker.ReadValueBitPacked(reader, out playerWhoHit);
			int newHealthAmount;
			ByteUnpacker.ReadValueBitPacked(reader, out newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.Client;
			((PlayerControllerB)target).DamagePlayerFromOtherClientClientRpc(damageAmount, hitDirection, playerWhoHit, newHealthAmount);
			target.__rpc_exec_stage = NetworkBehaviour.__RpcExecStage.None;
		}

		// Token: 0x06001077 RID: 4215 RVA: 0x00091A29 File Offset: 0x0008FC29
		protected internal override string __getTypeName()
		{
			return "PlayerControllerB";
		}

		// Token: 0x04000F77 RID: 3959
		public bool isTestingPlayer;

		// Token: 0x04000F78 RID: 3960
		[Header("MODELS / ANIMATIONS")]
		public Transform[] bodyParts;

		// Token: 0x04000F79 RID: 3961
		public Transform thisPlayerBody;

		// Token: 0x04000F7A RID: 3962
		public SkinnedMeshRenderer thisPlayerModel;

		// Token: 0x04000F7B RID: 3963
		public SkinnedMeshRenderer thisPlayerModelLOD1;

		// Token: 0x04000F7C RID: 3964
		public SkinnedMeshRenderer thisPlayerModelLOD2;

		// Token: 0x04000F7D RID: 3965
		public SkinnedMeshRenderer thisPlayerModelArms;

		// Token: 0x04000F7E RID: 3966
		public Transform playerGlobalHead;

		// Token: 0x04000F7F RID: 3967
		public Transform playerModelArmsMetarig;

		// Token: 0x04000F80 RID: 3968
		public Transform localArmsRotationTarget;

		// Token: 0x04000F81 RID: 3969
		public Transform meshContainer;

		// Token: 0x04000F82 RID: 3970
		public Transform lowerSpine;

		// Token: 0x04000F83 RID: 3971
		public Camera gameplayCamera;

		// Token: 0x04000F84 RID: 3972
		public Transform cameraContainerTransform;

		// Token: 0x04000F85 RID: 3973
		public Transform playerEye;

		// Token: 0x04000F86 RID: 3974
		public float targetFOV = 66f;

		// Token: 0x04000F87 RID: 3975
		public Camera visorCamera;

		// Token: 0x04000F88 RID: 3976
		public CharacterController thisController;

		// Token: 0x04000F89 RID: 3977
		public Animator playerBodyAnimator;

		// Token: 0x04000F8A RID: 3978
		public MeshFilter playerBadgeMesh;

		// Token: 0x04000F8B RID: 3979
		public MeshRenderer playerBetaBadgeMesh;

		// Token: 0x04000F8C RID: 3980
		public int playerLevelNumber;

		// Token: 0x04000F8D RID: 3981
		public Transform localVisor;

		// Token: 0x04000F8E RID: 3982
		public Transform localVisorTargetPoint;

		// Token: 0x04000F8F RID: 3983
		private bool isSidling;

		// Token: 0x04000F90 RID: 3984
		private bool wasMovingForward;

		// Token: 0x04000F91 RID: 3985
		public MultiRotationConstraint cameraLookRig1;

		// Token: 0x04000F92 RID: 3986
		public MultiRotationConstraint cameraLookRig2;

		// Token: 0x04000F93 RID: 3987
		public Transform playerHudUIContainer;

		// Token: 0x04000F94 RID: 3988
		public Transform playerHudBaseRotation;

		// Token: 0x04000F95 RID: 3989
		public ChainIKConstraint rightArmNormalRig;

		// Token: 0x04000F96 RID: 3990
		public ChainIKConstraint rightArmProceduralRig;

		// Token: 0x04000F97 RID: 3991
		public Transform rightArmProceduralTarget;

		// Token: 0x04000F98 RID: 3992
		private Vector3 rightArmProceduralTargetBasePosition;

		// Token: 0x04000F99 RID: 3993
		public Transform leftHandItemTarget;

		// Token: 0x04000F9A RID: 3994
		public Light nightVision;

		// Token: 0x04000F9B RID: 3995
		public int currentSuitID;

		// Token: 0x04000F9C RID: 3996
		public bool performingEmote;

		// Token: 0x04000F9D RID: 3997
		public float emoteLayerWeight;

		// Token: 0x04000F9E RID: 3998
		public float timeSinceStartingEmote;

		// Token: 0x04000F9F RID: 3999
		public ParticleSystem beamUpParticle;

		// Token: 0x04000FA0 RID: 4000
		public ParticleSystem beamOutParticle;

		// Token: 0x04000FA1 RID: 4001
		public ParticleSystem beamOutBuildupParticle;

		// Token: 0x04000FA2 RID: 4002
		public bool localArmsMatchCamera;

		// Token: 0x04000FA3 RID: 4003
		public Transform localArmsTransform;

		// Token: 0x04000FA4 RID: 4004
		public Collider playerCollider;

		// Token: 0x04000FA5 RID: 4005
		public Collider[] bodyPartSpraypaintColliders;

		// Token: 0x04000FA6 RID: 4006
		[Header("AUDIOS")]
		public AudioSource movementAudio;

		// Token: 0x04000FA7 RID: 4007
		public AudioSource itemAudio;

		// Token: 0x04000FA8 RID: 4008
		public AudioSource statusEffectAudio;

		// Token: 0x04000FA9 RID: 4009
		public AudioSource waterBubblesAudio;

		// Token: 0x04000FAA RID: 4010
		public int currentFootstepSurfaceIndex;

		// Token: 0x04000FAB RID: 4011
		private int previousFootstepClip;

		// Token: 0x04000FAC RID: 4012
		[HideInInspector]
		public Dictionary<AudioSource, AudioReverbTrigger> audioCoroutines = new Dictionary<AudioSource, AudioReverbTrigger>();

		// Token: 0x04000FAD RID: 4013
		[HideInInspector]
		public Dictionary<AudioSource, IEnumerator> audioCoroutines2 = new Dictionary<AudioSource, IEnumerator>();

		// Token: 0x04000FAE RID: 4014
		[HideInInspector]
		public AudioReverbTrigger currentAudioTrigger;

		// Token: 0x04000FAF RID: 4015
		public AudioReverbTrigger currentAudioTriggerB;

		// Token: 0x04000FB0 RID: 4016
		public float targetDryLevel;

		// Token: 0x04000FB1 RID: 4017
		public float targetRoom;

		// Token: 0x04000FB2 RID: 4018
		public float targetHighFreq;

		// Token: 0x04000FB3 RID: 4019
		public float targetLowFreq;

		// Token: 0x04000FB4 RID: 4020
		public float targetDecayTime;

		// Token: 0x04000FB5 RID: 4021
		public ReverbPreset reverbPreset;

		// Token: 0x04000FB6 RID: 4022
		public AudioListener activeAudioListener;

		// Token: 0x04000FB7 RID: 4023
		public AudioReverbFilter activeAudioReverbFilter;

		// Token: 0x04000FB8 RID: 4024
		public ParticleSystem bloodParticle;

		// Token: 0x04000FB9 RID: 4025
		public bool playingQuickSpecialAnimation;

		// Token: 0x04000FBA RID: 4026
		private Coroutine quickSpecialAnimationCoroutine;

		// Token: 0x04000FBB RID: 4027
		[Header("INPUT / MOVEMENT")]
		public float movementSpeed = 0.5f;

		// Token: 0x04000FBC RID: 4028
		public PlayerActions playerActions;

		// Token: 0x04000FBD RID: 4029
		private bool isWalking;

		// Token: 0x04000FBE RID: 4030
		private bool movingForward;

		// Token: 0x04000FBF RID: 4031
		public Vector2 moveInputVector;

		// Token: 0x04000FC0 RID: 4032
		public Vector3 velocityLastFrame;

		// Token: 0x04000FC1 RID: 4033
		private float sprintMultiplier = 1f;

		// Token: 0x04000FC2 RID: 4034
		public bool isSprinting;

		// Token: 0x04000FC3 RID: 4035
		public float sprintTime = 5f;

		// Token: 0x04000FC4 RID: 4036
		public Image sprintMeterUI;

		// Token: 0x04000FC5 RID: 4037
		[HideInInspector]
		public float sprintMeter;

		// Token: 0x04000FC6 RID: 4038
		[HideInInspector]
		public bool isExhausted;

		// Token: 0x04000FC7 RID: 4039
		private float exhaustionEffectLerp;

		// Token: 0x04000FC8 RID: 4040
		public float jumpForce = 5f;

		// Token: 0x04000FC9 RID: 4041
		private bool isJumping;

		// Token: 0x04000FCA RID: 4042
		private bool isFallingFromJump;

		// Token: 0x04000FCB RID: 4043
		private Coroutine jumpCoroutine;

		// Token: 0x04000FCC RID: 4044
		public float fallValue;

		// Token: 0x04000FCD RID: 4045
		public bool isGroundedOnServer;

		// Token: 0x04000FCE RID: 4046
		public bool isPlayerSliding;

		// Token: 0x04000FCF RID: 4047
		private float playerSlidingTimer;

		// Token: 0x04000FD0 RID: 4048
		public Vector3 playerGroundNormal;

		// Token: 0x04000FD1 RID: 4049
		public float maxSlideFriction;

		// Token: 0x04000FD2 RID: 4050
		private float slideFriction;

		// Token: 0x04000FD3 RID: 4051
		public float fallValueUncapped;

		// Token: 0x04000FD4 RID: 4052
		public bool takingFallDamage;

		// Token: 0x04000FD5 RID: 4053
		public float minVelocityToTakeDamage;

		// Token: 0x04000FD6 RID: 4054
		public bool isCrouching;

		// Token: 0x04000FD7 RID: 4055
		private bool isFallingNoJump;

		// Token: 0x04000FD8 RID: 4056
		public int isMovementHindered;

		// Token: 0x04000FD9 RID: 4057
		private int movementHinderedPrev;

		// Token: 0x04000FDA RID: 4058
		public float hinderedMultiplier = 1f;

		// Token: 0x04000FDB RID: 4059
		public int sourcesCausingSinking;

		// Token: 0x04000FDC RID: 4060
		public bool isSinking;

		// Token: 0x04000FDD RID: 4061
		public bool isUnderwater;

		// Token: 0x04000FDE RID: 4062
		private float syncUnderwaterInterval;

		// Token: 0x04000FDF RID: 4063
		private bool isFaceUnderwaterOnServer;

		// Token: 0x04000FE0 RID: 4064
		public Collider underwaterCollider;

		// Token: 0x04000FE1 RID: 4065
		private bool wasUnderwaterLastFrame;

		// Token: 0x04000FE2 RID: 4066
		public float sinkingValue;

		// Token: 0x04000FE3 RID: 4067
		public float sinkingSpeedMultiplier;

		// Token: 0x04000FE4 RID: 4068
		public int statusEffectAudioIndex;

		// Token: 0x04000FE5 RID: 4069
		private float cameraUp;

		// Token: 0x04000FE6 RID: 4070
		public float lookSensitivity = 0.4f;

		// Token: 0x04000FE7 RID: 4071
		public bool disableLookInput;

		// Token: 0x04000FE8 RID: 4072
		private float oldLookRot;

		// Token: 0x04000FE9 RID: 4073
		private float targetLookRot;

		// Token: 0x04000FEA RID: 4074
		private float previousYRot;

		// Token: 0x04000FEB RID: 4075
		private float targetYRot;

		// Token: 0x04000FEC RID: 4076
		public Vector3 syncFullRotation;

		// Token: 0x04000FED RID: 4077
		private Vector3 walkForce;

		// Token: 0x04000FEE RID: 4078
		public Vector3 externalForces;

		// Token: 0x04000FEF RID: 4079
		private Vector3 movementForcesLastFrame;

		// Token: 0x04000FF0 RID: 4080
		public Rigidbody playerRigidbody;

		// Token: 0x04000FF1 RID: 4081
		public float averageVelocity;

		// Token: 0x04000FF2 RID: 4082
		public int velocityMovingAverageLength = 20;

		// Token: 0x04000FF3 RID: 4083
		public int velocityAverageCount;

		// Token: 0x04000FF4 RID: 4084
		public float getAverageVelocityInterval;

		// Token: 0x04000FF5 RID: 4085
		public bool jetpackControls;

		// Token: 0x04000FF6 RID: 4086
		public bool disablingJetpackControls;

		// Token: 0x04000FF7 RID: 4087
		public Transform jetpackTurnCompass;

		// Token: 0x04000FF8 RID: 4088
		private bool startedJetpackControls;

		// Token: 0x04000FF9 RID: 4089
		private float previousFrameDeltaTime;

		// Token: 0x04000FFA RID: 4090
		private Collider[] nearByPlayers = new Collider[4];

		// Token: 0x04000FFB RID: 4091
		private bool teleportingThisFrame;

		// Token: 0x04000FFC RID: 4092
		public bool teleportedLastFrame;

		// Token: 0x04000FFD RID: 4093
		[Header("LOCATION")]
		public bool isInElevator;

		// Token: 0x04000FFE RID: 4094
		public bool isInHangarShipRoom;

		// Token: 0x04000FFF RID: 4095
		public bool isInsideFactory;

		// Token: 0x04001000 RID: 4096
		[Space(5f)]
		public bool wasInElevatorLastFrame;

		// Token: 0x04001001 RID: 4097
		public Vector3 previousElevatorPosition;

		// Token: 0x04001002 RID: 4098
		[Header("CONTROL / NETWORKING")]
		public ulong playerClientId;

		// Token: 0x04001003 RID: 4099
		public string playerUsername = "Player";

		// Token: 0x04001004 RID: 4100
		public ulong playerSteamId;

		// Token: 0x04001005 RID: 4101
		public ulong actualClientId;

		// Token: 0x04001006 RID: 4102
		public bool isPlayerControlled;

		// Token: 0x04001007 RID: 4103
		public bool justConnected = true;

		// Token: 0x04001008 RID: 4104
		public bool disconnectedMidGame;

		// Token: 0x04001009 RID: 4105
		[Space(5f)]
		private bool isCameraDisabled;

		// Token: 0x0400100A RID: 4106
		public StartOfRound playersManager;

		// Token: 0x0400100B RID: 4107
		public bool isHostPlayerObject;

		// Token: 0x0400100C RID: 4108
		public Vector3 oldPlayerPosition;

		// Token: 0x0400100D RID: 4109
		private int previousAnimationState;

		// Token: 0x0400100E RID: 4110
		public Vector3 serverPlayerPosition;

		// Token: 0x0400100F RID: 4111
		public bool snapToServerPosition;

		// Token: 0x04001010 RID: 4112
		private float oldCameraUp;

		// Token: 0x04001011 RID: 4113
		public float ladderCameraHorizontal;

		// Token: 0x04001012 RID: 4114
		private float updatePlayerAnimationsInterval;

		// Token: 0x04001013 RID: 4115
		private float updatePlayerLookInterval;

		// Token: 0x04001014 RID: 4116
		private List<int> currentAnimationStateHash = new List<int>();

		// Token: 0x04001015 RID: 4117
		private List<int> previousAnimationStateHash = new List<int>();

		// Token: 0x04001016 RID: 4118
		private float currentAnimationSpeed;

		// Token: 0x04001017 RID: 4119
		private float previousAnimationSpeed;

		// Token: 0x04001018 RID: 4120
		private int previousAnimationServer;

		// Token: 0x04001019 RID: 4121
		private int oldConnectedPlayersAmount;

		// Token: 0x0400101A RID: 4122
		private int playerMask = 8;

		// Token: 0x0400101B RID: 4123
		public RawImage playerScreen;

		// Token: 0x0400101C RID: 4124
		public VoicePlayerState voicePlayerState;

		// Token: 0x0400101D RID: 4125
		public AudioSource currentVoiceChatAudioSource;

		// Token: 0x0400101E RID: 4126
		public PlayerVoiceIngameSettings currentVoiceChatIngameSettings;

		// Token: 0x0400101F RID: 4127
		private float voiceChatUpdateInterval;

		// Token: 0x04001020 RID: 4128
		public bool isTypingChat;

		// Token: 0x04001021 RID: 4129
		[Header("DEATH")]
		public int health;

		// Token: 0x04001022 RID: 4130
		public float healthRegenerateTimer;

		// Token: 0x04001023 RID: 4131
		public bool criticallyInjured;

		// Token: 0x04001024 RID: 4132
		public bool hasBeenCriticallyInjured;

		// Token: 0x04001025 RID: 4133
		private float limpMultiplier = 0.2f;

		// Token: 0x04001026 RID: 4134
		public CauseOfDeath causeOfDeath;

		// Token: 0x04001027 RID: 4135
		public bool isPlayerDead;

		// Token: 0x04001028 RID: 4136
		[HideInInspector]
		public bool setPositionOfDeadPlayer;

		// Token: 0x04001029 RID: 4137
		[HideInInspector]
		public Vector3 placeOfDeath;

		// Token: 0x0400102A RID: 4138
		public Transform spectateCameraPivot;

		// Token: 0x0400102B RID: 4139
		public PlayerControllerB spectatedPlayerScript;

		// Token: 0x0400102C RID: 4140
		public DeadBodyInfo deadBody;

		// Token: 0x0400102D RID: 4141
		public GameObject[] bodyBloodDecals;

		// Token: 0x0400102E RID: 4142
		private int currentBloodIndex;

		// Token: 0x0400102F RID: 4143
		public List<GameObject> playerBloodPooledObjects = new List<GameObject>();

		// Token: 0x04001030 RID: 4144
		public bool bleedingHeavily;

		// Token: 0x04001031 RID: 4145
		private float bloodDropTimer;

		// Token: 0x04001032 RID: 4146
		private bool alternatePlaceFootprints;

		// Token: 0x04001033 RID: 4147
		public EnemyAI inAnimationWithEnemy;

		// Token: 0x04001034 RID: 4148
		[Header("UI/MENU")]
		public bool inTerminalMenu;

		// Token: 0x04001035 RID: 4149
		public QuickMenuManager quickMenuManager;

		// Token: 0x04001036 RID: 4150
		public TextMeshProUGUI usernameBillboardText;

		// Token: 0x04001037 RID: 4151
		public Transform usernameBillboard;

		// Token: 0x04001038 RID: 4152
		public CanvasGroup usernameAlpha;

		// Token: 0x04001039 RID: 4153
		public Canvas usernameCanvas;

		// Token: 0x0400103A RID: 4154
		private Vector3 tempVelocity;

		// Token: 0x0400103B RID: 4155
		[Header("ITEM INTERACTION")]
		public float grabDistance = 5f;

		// Token: 0x0400103C RID: 4156
		public float throwPower = 17f;

		// Token: 0x0400103D RID: 4157
		public bool isHoldingObject;

		// Token: 0x0400103E RID: 4158
		private bool hasThrownObject;

		// Token: 0x0400103F RID: 4159
		public bool twoHanded;

		// Token: 0x04001040 RID: 4160
		public bool twoHandedAnimation;

		// Token: 0x04001041 RID: 4161
		public float carryWeight = 1f;

		// Token: 0x04001042 RID: 4162
		public bool isGrabbingObjectAnimation;

		// Token: 0x04001043 RID: 4163
		public bool activatingItem;

		// Token: 0x04001044 RID: 4164
		public float grabObjectAnimationTime;

		// Token: 0x04001045 RID: 4165
		public Transform localItemHolder;

		// Token: 0x04001046 RID: 4166
		public Transform serverItemHolder;

		// Token: 0x04001047 RID: 4167
		public Transform propThrowPosition;

		// Token: 0x04001048 RID: 4168
		public GrabbableObject currentlyHeldObject;

		// Token: 0x04001049 RID: 4169
		private GrabbableObject currentlyGrabbingObject;

		// Token: 0x0400104A RID: 4170
		public GrabbableObject currentlyHeldObjectServer;

		// Token: 0x0400104B RID: 4171
		public GameObject heldObjectServerCopy;

		// Token: 0x0400104C RID: 4172
		private Coroutine grabObjectCoroutine;

		// Token: 0x0400104D RID: 4173
		private Ray interactRay;

		// Token: 0x0400104E RID: 4174
		private int grabbableObjectsMask = 64;

		// Token: 0x0400104F RID: 4175
		private int interactableObjectsMask = 832;

		// Token: 0x04001050 RID: 4176
		private int walkableSurfacesNoPlayersMask = 268437761;

		// Token: 0x04001051 RID: 4177
		private RaycastHit hit;

		// Token: 0x04001052 RID: 4178
		private float upperBodyAnimationsWeight;

		// Token: 0x04001053 RID: 4179
		public float doingUpperBodyEmote;

		// Token: 0x04001054 RID: 4180
		private float handsOnWallWeight;

		// Token: 0x04001055 RID: 4181
		public Light helmetLight;

		// Token: 0x04001056 RID: 4182
		public Light[] allHelmetLights;

		// Token: 0x04001057 RID: 4183
		private bool grabbedObjectValidated;

		// Token: 0x04001058 RID: 4184
		private bool grabInvalidated;

		// Token: 0x04001059 RID: 4185
		private bool throwingObject;

		// Token: 0x0400105A RID: 4186
		[Space(5f)]
		public GrabbableObject[] ItemSlots;

		// Token: 0x0400105B RID: 4187
		public int currentItemSlot;

		// Token: 0x0400105C RID: 4188
		private MeshRenderer[] itemRenderers;

		// Token: 0x0400105D RID: 4189
		private float timeSinceSwitchingSlots;

		// Token: 0x0400105E RID: 4190
		[HideInInspector]
		public bool grabSetParentServer;

		// Token: 0x0400105F RID: 4191
		[Header("TRIGGERS AND SPECIAL")]
		public Image cursorIcon;

		// Token: 0x04001060 RID: 4192
		public TextMeshProUGUI cursorTip;

		// Token: 0x04001061 RID: 4193
		public Sprite grabItemIcon;

		// Token: 0x04001062 RID: 4194
		private bool hoveringOverItem;

		// Token: 0x04001063 RID: 4195
		public InteractTrigger hoveringOverTrigger;

		// Token: 0x04001064 RID: 4196
		public InteractTrigger previousHoveringOverTrigger;

		// Token: 0x04001065 RID: 4197
		public InteractTrigger currentTriggerInAnimationWith;

		// Token: 0x04001066 RID: 4198
		public bool isHoldingInteract;

		// Token: 0x04001067 RID: 4199
		public bool inSpecialInteractAnimation;

		// Token: 0x04001068 RID: 4200
		public bool disableSyncInAnimation;

		// Token: 0x04001069 RID: 4201
		public float specialAnimationWeight;

		// Token: 0x0400106A RID: 4202
		public bool isClimbingLadder;

		// Token: 0x0400106B RID: 4203
		public bool enteringSpecialAnimation;

		// Token: 0x0400106C RID: 4204
		public float climbSpeed = 4f;

		// Token: 0x0400106D RID: 4205
		public Vector3 clampCameraRotation;

		// Token: 0x0400106E RID: 4206
		public Transform lineOfSightCube;

		// Token: 0x0400106F RID: 4207
		public bool voiceMuffledByEnemy;

		// Token: 0x04001070 RID: 4208
		[Header("SPECIAL ITEMS")]
		public int shipTeleporterId;

		// Token: 0x04001071 RID: 4209
		public EnemyAI redirectToEnemy;

		// Token: 0x04001072 RID: 4210
		public MeshRenderer mapRadarDirectionIndicator;

		// Token: 0x04001073 RID: 4211
		public Animator mapRadarDotAnimator;

		// Token: 0x04001074 RID: 4212
		public bool equippedUsableItemQE;

		// Token: 0x04001075 RID: 4213
		public bool IsInspectingItem;

		// Token: 0x04001076 RID: 4214
		public bool isFirstFrameLateUpdate = true;

		// Token: 0x04001077 RID: 4215
		public GrabbableObject pocketedFlashlight;

		// Token: 0x04001078 RID: 4216
		public bool isFreeCamera;

		// Token: 0x04001079 RID: 4217
		public bool isSpeedCheating;

		// Token: 0x0400107A RID: 4218
		public bool inShockingMinigame;

		// Token: 0x0400107B RID: 4219
		public Transform shockingTarget;

		// Token: 0x0400107C RID: 4220
		public Transform turnCompass;

		// Token: 0x0400107D RID: 4221
		public Transform smoothLookTurnCompass;

		// Token: 0x0400107E RID: 4222
		public float smoothLookMultiplier = 25f;

		// Token: 0x0400107F RID: 4223
		private bool smoothLookEnabledLastFrame;

		// Token: 0x04001080 RID: 4224
		public Camera turnCompassCamera;

		// Token: 0x04001081 RID: 4225
		[HideInInspector]
		public Vector3 targetScreenPos;

		// Token: 0x04001082 RID: 4226
		[HideInInspector]
		public float shockMinigamePullPosition;

		// Token: 0x04001083 RID: 4227
		[Space(5f)]
		public bool speakingToWalkieTalkie;

		// Token: 0x04001084 RID: 4228
		public bool holdingWalkieTalkie;

		// Token: 0x04001085 RID: 4229
		public float isInGameOverAnimation;

		// Token: 0x04001086 RID: 4230
		[HideInInspector]
		public bool hasBegunSpectating;

		// Token: 0x04001087 RID: 4231
		private Coroutine timeSpecialAnimationCoroutine;

		// Token: 0x04001088 RID: 4232
		private float spectatedPlayerDeadTimer;

		// Token: 0x04001089 RID: 4233
		public float insanityLevel;

		// Token: 0x0400108A RID: 4234
		public float maxInsanityLevel = 50f;

		// Token: 0x0400108B RID: 4235
		public float insanitySpeedMultiplier = 1f;

		// Token: 0x0400108C RID: 4236
		public bool isPlayerAlone;

		// Token: 0x0400108D RID: 4237
		public float timeSincePlayerMoving;

		// Token: 0x0400108E RID: 4238
		public Scrollbar terminalScrollVertical;

		// Token: 0x0400108F RID: 4239
		private bool updatePositionForNewlyJoinedClient;

		// Token: 0x04001090 RID: 4240
		private float timeSinceTakingGravityDamage;

		// Token: 0x04001091 RID: 4241
		[Space(5f)]
		public float drunkness;

		// Token: 0x04001092 RID: 4242
		public float drunknessInertia = 1f;

		// Token: 0x04001093 RID: 4243
		public float drunknessSpeed;

		// Token: 0x04001094 RID: 4244
		public bool increasingDrunknessThisFrame;

		// Token: 0x04001095 RID: 4245
		public float timeSinceMakingLoudNoise;
	}
}
